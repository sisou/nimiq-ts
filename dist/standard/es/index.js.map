{"version":3,"file":"index.js","sources":["../../../src/WasmHelper.ts","../../../src/GenesisConfig.ts","../../../src/Policy.ts","../../../src/ArrayUtils.ts","../../../src/NumberUtils.ts","../../../src/StringUtils.ts","../../../src/SerialBuffer.ts","../../../src/BufferUtils.ts","../../../src/Serializable.ts","../../../src/Address.ts","../../../src/Commitment.ts","../../../src/Hash.ts","../../../src/CryptoWorker.ts","../../../src/CryptoUtils.ts","../../../src/CRC8.ts","../../../src/PublicKey.ts","../../../src/Secret.ts","../../../src/PrivateKey.ts","../../../src/ExtendedPrivateKey.ts","../../../src/MnemonicUtils.ts","../../../src/Entropy.ts","../../../src/KeyPair.ts","../../../src/MerkleTree.ts","../../../src/MerklePath.ts","../../../src/Account.ts","../../../src/RandomSecret.ts","../../../src/PartialSignature.ts","../../../src/Signature.ts","../../../src/CommitmentPair.ts","../../../src/Assert.ts","../../../src/Transaction.ts","../../../src/ExtendedTransaction.ts","../../../src/SignatureProof.ts","../../../src/BasicTransaction.ts","../../../src/Wallet.ts","../../../src/MultiSigWallet.ts","../../../src/BasicAccount.ts","../../../src/Contract.ts","../../../src/VestingContract.ts","../../../src/HashedTimeLockedContract.ts","../../../src/index.ts","../../../src/wasm/worker-wasm.ts"],"sourcesContent":["export type WasmSource = BufferSource | WebAssembly.Module | Promise<BufferSource | WebAssembly.Module>;\n\nlet loadModule: (() => WasmSource) | undefined;\n\nexport function setWasmInit(init: () => WasmSource) {\n    loadModule = init\n}\n\nexport class WasmHelper {\n    private static _module: any;\n\n    static async doImport(): Promise<void> {\n        if (WasmHelper._module) return;\n\n        if (!loadModule) throw new Error('No WebAssembly.Module available');\n\n        const moduleSettings: Record<string, any> = {};\n        const wasmSource = await loadModule();\n        if (wasmSource instanceof WebAssembly.Module) {\n            moduleSettings.wasmModule = wasmSource;\n        } else {\n            moduleSettings.wasmBinary = wasmSource;\n        }\n\n        const { init } = await import('./wasm/worker-wasm');\n\n        const runtimeInitialized = new Promise((resolve) => {\n            moduleSettings.onRuntimeInitialized = () => resolve(true);\n        });\n\n        WasmHelper._module = init(moduleSettings);\n\n        await runtimeInitialized;\n    }\n\n    static get Module() {\n        if (!WasmHelper._module) throw new Error('WebAssembly not loaded, call WasmHelper.doImport() first');\n        return WasmHelper._module;\n    }\n}\n","type Config = {\n\tNETWORK_ID: number,\n\tNETWORK_NAME: string,\n}\n\nexport class GenesisConfig {\n\tstatic CONFIGS: Record<string, Config> = {\n\t\t'main': {\n\t\t\tNETWORK_ID: 42,\n\t\t\tNETWORK_NAME: 'main'\n\t\t},\n\n\t\t'test': {\n\t\t\tNETWORK_ID: 1,\n\t\t\tNETWORK_NAME: 'test'\n\t\t},\n\n\t\t'dev': {\n\t\t\tNETWORK_ID: 2,\n\t\t\tNETWORK_NAME: 'dev'\n\t\t}\n\t}\n\n\tstatic _config?: Config;\n\n    static main() {\n        GenesisConfig.init(GenesisConfig.CONFIGS['main']);\n    }\n\n    static test() {\n        GenesisConfig.init(GenesisConfig.CONFIGS['test']);\n    }\n\n    static dev() {\n        GenesisConfig.init(GenesisConfig.CONFIGS['dev']);\n    }\n\n    static init(config: Config) {\n        if (GenesisConfig._config) throw new Error('GenesisConfig already initialized');\n        if (!config.NETWORK_ID) throw new Error('Config is missing network id');\n        if (!config.NETWORK_NAME) throw new Error('Config is missing network name');\n\n        GenesisConfig._config = config;\n    }\n\n    static get NETWORK_ID(): number {\n        if (!GenesisConfig._config) throw new Error('GenesisConfig not initialized');\n        return GenesisConfig._config.NETWORK_ID;\n    }\n\n    static get NETWORK_NAME(): string {\n        if (!GenesisConfig._config) throw new Error('GenesisConfig not initialized');\n        return GenesisConfig._config.NETWORK_NAME;\n    }\n\n    static networkIdToNetworkName(networkId: number): string {\n        for (const key of Object.keys(GenesisConfig.CONFIGS)) {\n            const config = GenesisConfig.CONFIGS[key];\n            if (networkId === config.NETWORK_ID) {\n                return config.NETWORK_NAME;\n            }\n        }\n        throw new Error(`Unable to find networkName for networkId ${networkId}`);\n    }\n\n    static networkIdFromAny(networkId: number | string): number {\n        if (typeof networkId === 'number') return networkId;\n        if (GenesisConfig.CONFIGS[networkId]) {\n            return GenesisConfig.CONFIGS[networkId].NETWORK_ID;\n        }\n        throw new Error(`Unable to find networkId for ${networkId}`);\n    }\n}\n","export class Policy {\n\t/**\n\t * Targeted block time in seconds.\n\t */\n\tstatic BLOCK_TIME = 60;\n\n\t/**\n\t * Maximum block size in bytes.\n\t */\n\tstatic BLOCK_SIZE_MAX = 1e5; // 100 kb\n\n\t/**\n\t * The highest (easiest) block PoW target.\n\t */\n\tstatic BLOCK_TARGET_MAX = BigInt(2) ** BigInt(240);\n\n\t/**\n\t * Number of blocks we take into account to calculate next difficulty.\n\t */\n\tstatic DIFFICULTY_BLOCK_WINDOW = 120;\n\n\t/**\n\t * Limits the rate at which the difficulty is adjusted min/max.\n\t */\n\tstatic DIFFICULTY_MAX_ADJUSTMENT_FACTOR = 2;\n\n\t/**\n\t * Number of blocks a transaction is valid.\n\t */\n\tstatic TRANSACTION_VALIDITY_WINDOW = 120;\n\n\n\t/* Supply & Emission Parameters */\n\n\t/**\n\t * Number of Satoshis per Nimiq.\n\t */\n\tstatic LUNAS_PER_COIN = 1e5;\n\n\t/**\n\t * Targeted total supply in lunas.\n\t */\n\tstatic TOTAL_SUPPLY = 21e14;\n\n\t/**\n\t * Initial supply before genesis block in lunas.\n\t */\n\tstatic INITIAL_SUPPLY = 252000000000000;\n\n\t/**\n\t * Emission speed.\n\t */\n\tstatic EMISSION_SPEED = Math.pow(2, 22);\n\n\t/**\n\t * First block using constant tail emission until total supply is reached.\n\t */\n\tstatic EMISSION_TAIL_START = 48692960;\n\n\t/**\n\t * Constant tail emission in lunas until total supply is reached.\n\t */\n\tstatic EMISSION_TAIL_REWARD = 4000;\n\n\t/* Security parameters */\n\n\t/**\n\t * NIPoPoW Security parameter M\n\t * FIXME naming\n\t */\n\tstatic M = 240;\n\n\t/**\n\t * NIPoPoW Security parameter K\n\t * FIXME naming\n\t */\n\tstatic K = 120;\n\n\t/**\n\t * NIPoPoW Security parameter DELTA\n\t * FIXME naming\n\t */\n\tstatic DELTA = 0.15;\n\n\t/**\n\t * Number of blocks the light client downloads to verify the AccountsTree construction.\n\t * FIXME naming\n\t */\n\tstatic NUM_BLOCKS_VERIFICATION = 250;\n\n\n\t/* Snapshot Parameters */\n\n\t/**\n\t * Maximum number of snapshots.\n\t */\n\tstatic NUM_SNAPSHOTS_MAX = 20;\n\n\t/**\n\t * Stores the circulating supply before the given block.\n\t */\n\tprivate static _supplyCache = new Map<number, number>();\n\tprivate static _supplyCacheMax = 0; // blocks\n\tprivate static _supplyCacheInterval = 5000; // blocks\n\n    /**\n     * Convert Nimiq decimal to Number of Satoshis.\n     */\n    static coinsToLunas(coins: number): number {\n        return Math.round(coins * Policy.LUNAS_PER_COIN);\n    }\n\n    /**\n     * Convert Number of Satoshis to Nimiq decimal.\n     */\n    static lunasToCoins(lunas: number): number {\n        return lunas / Policy.LUNAS_PER_COIN;\n    }\n\n    /** @deprecated Use coinsToLunas instead */\n    static coinsToSatoshis(coins: number): number {\n        return Policy.coinsToLunas(coins);\n    }\n\n    /** @deprecated Use lunasToCoins instead */\n    static satoshisToCoins(satoshis: number): number {\n        return Policy.lunasToCoins(satoshis);\n    }\n\n    /** @deprecated Use LUNAS_PER_COIN instead */\n    static get SATOSHIS_PER_COIN(): number {\n        return Policy.LUNAS_PER_COIN;\n    }\n\n    /**\n     * Circulating supply after block.\n     */\n    static supplyAfter(blockHeight: number): number {\n        // Calculate last entry in supply cache that is below blockHeight.\n        let startHeight = Math.floor(blockHeight / Policy._supplyCacheInterval) * Policy._supplyCacheInterval;\n        startHeight = Math.max(0, Math.min(startHeight, Policy._supplyCacheMax));\n\n        // Calculate respective block for the last entry of the cache and the targeted height.\n        const startI = startHeight / Policy._supplyCacheInterval;\n        const endI = Math.floor(blockHeight / Policy._supplyCacheInterval);\n\n        // The starting supply is the initial supply at the beginning and a cached value afterwards.\n        let supply = startHeight === 0 ? Policy.INITIAL_SUPPLY : Policy._supplyCache.get(startHeight)!;\n        // Use and update cache.\n        for (let i = startI; i < endI; ++i) {\n            startHeight = i * Policy._supplyCacheInterval;\n            // Since the cache stores the supply *before* a certain block, subtract one.\n            const endHeight = (i + 1) * Policy._supplyCacheInterval - 1;\n            supply = Policy._supplyAfter(supply, endHeight, startHeight);\n            // Don't forget to add one again.\n            Policy._supplyCache.set(endHeight + 1, supply);\n            Policy._supplyCacheMax = endHeight + 1;\n        }\n\n        // Calculate remaining supply (this also adds the block reward for endI*interval).\n        return Policy._supplyAfter(supply, blockHeight, endI * Policy._supplyCacheInterval);\n    }\n\n    /**\n     * Circulating supply after block.\n     */\n    private static _supplyAfter(initialSupply: number, blockHeight: number, startHeight = 0): number {\n        let supply = initialSupply;\n        for (let i = startHeight; i <= blockHeight; ++i) {\n            supply += Policy._blockRewardAt(supply, i);\n        }\n        return supply;\n    }\n\n    /**\n     * Miner reward per block.\n     */\n    static blockRewardAt(blockHeight: number): number {\n        const currentSupply = Policy.supplyAfter(blockHeight - 1);\n        return Policy._blockRewardAt(currentSupply, blockHeight);\n    }\n\n    /**\n     * Miner reward per block.\n     */\n    private static _blockRewardAt(currentSupply: number, blockHeight: number): number {\n        if (blockHeight <= 0) return 0;\n        const remaining = Policy.TOTAL_SUPPLY - currentSupply;\n        if (blockHeight >= Policy.EMISSION_TAIL_START && remaining >= Policy.EMISSION_TAIL_REWARD) {\n            return Policy.EMISSION_TAIL_REWARD;\n        }\n        const remainder = remaining % Policy.EMISSION_SPEED;\n        return (remaining - remainder) / Policy.EMISSION_SPEED;\n    }\n}\n","export class ArrayUtils {\n    static randomElement<T>(arr: T[]): T {\n        return arr[Math.floor(Math.random() * arr.length)];\n    }\n\n    static subarray(uintarr: Uint8Array, begin?: number, end?: number): Uint8Array {\n        function clamp(v: number, min: number, max: number) { return v < min ? min : v > max ? max : v; }\n\n        if (begin === undefined) { begin = 0; }\n        if (end === undefined) { end = uintarr.byteLength; }\n\n        begin = clamp(begin, 0, uintarr.byteLength);\n        end = clamp(end, 0, uintarr.byteLength);\n\n        let len = end - begin;\n        if (len < 0) {\n            len = 0;\n        }\n\n        return new Uint8Array(uintarr.buffer, uintarr.byteOffset + begin, len);\n    }\n\n    static *k_combinations(list: any[], k: number): Generator<any[]> {\n        const n = list.length;\n        // Shortcut:\n        if (k > n) {\n            return;\n        }\n        const indices = Array.from(new Array(k), (x,i) => i);\n        yield indices.map(i => list[i]);\n        const reverseRange = Array.from(new Array(k), (x,i) => k-i-1);\n        /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n        while (true) {\n            let i = k-1, found = false;\n            for (i of reverseRange) {\n                if (indices[i] !== i + n - k) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return;\n            }\n            indices[i] += 1;\n            for (const j of Array.from(new Array(k-i-1), (x,k) => i+k+1)) {\n                indices[j] = indices[j-1] + 1;\n            }\n            yield indices.map(i => list[i]);\n        }\n    }\n}\n","export class NumberUtils {\n    static UINT8_MAX = 255;\n    static UINT16_MAX = 65535;\n    static UINT32_MAX = 4294967295;\n    static UINT64_MAX = Number.MAX_SAFE_INTEGER;\n\n    static isInteger(val: unknown): val is number {\n        return Number.isInteger(val);\n    }\n\n    static isUint8(val: unknown): boolean {\n        return NumberUtils.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT8_MAX;\n    }\n\n    static isUint16(val: unknown): boolean {\n        return NumberUtils.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT16_MAX;\n    }\n\n    static isUint32(val: unknown): boolean {\n        return NumberUtils.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT32_MAX;\n    }\n\n    static isUint64(val: unknown): boolean {\n        return NumberUtils.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT64_MAX;\n    }\n\n    static randomUint32(): number {\n        return Math.floor(Math.random() * (NumberUtils.UINT32_MAX + 1));\n    }\n\n    static randomUint64(): number {\n        return Math.floor(Math.random() * (NumberUtils.UINT64_MAX + 1));\n    }\n\n    static fromBinary(bin: string): number {\n        return parseInt(bin, 2);\n    }\n}\n","export class StringUtils {\n    static isMultibyte(str: string): boolean {\n        return /[\\uD800-\\uDFFF]/.test(str);\n    }\n\n    static isHex(str: string): boolean {\n        return /^[0-9A-Fa-f]*$/.test(str);\n    }\n\n    static isHexBytes(str: string, length?: number): boolean {\n        if (!StringUtils.isHex(str)) return false;\n        if (str.length % 2 !== 0) return false;\n        if (typeof length === 'number' && str.length / 2 !== length) return false;\n        return true;\n    }\n\n    static commonPrefix(str1: string, str2: string): string {\n        let i = 0;\n        for (; i < str1.length; ++i) {\n            if (str1[i] !== str2[i]) break;\n        }\n        return str1.substring(0, i);\n    }\n\n    static lpad(str: string, padString: string, length: number): string {\n        while (str.length < length) str = padString + str;\n        return str;\n    }\n\n}\n","import { ArrayUtils } from \"./ArrayUtils\";\nimport { BufferUtils } from \"./BufferUtils\";\nimport { NumberUtils } from \"./NumberUtils\";\nimport { StringUtils } from \"./StringUtils\";\n\nexport class SerialBuffer extends Uint8Array {\n    private _view: DataView;\n    private _readPos: number;\n    private _writePos: number;\n\n    static EMPTY = new SerialBuffer(0);\n\n    constructor(length: number);\n    constructor(array: ArrayLike<number> | ArrayBufferLike);\n    constructor(bufferOrArrayOrLength: number | ArrayLike<number> | ArrayBufferLike) {\n        super(bufferOrArrayOrLength as any);\n        this._view = new DataView(this.buffer);\n        this._readPos = 0;\n        this._writePos = 0;\n    }\n\n    override subarray(start?: number, end?: number): Uint8Array {\n        return ArrayUtils.subarray(this, start, end);\n    }\n\n    get readPos(): number {\n        return this._readPos;\n    }\n\n    set readPos(value: number) {\n        if (value < 0 || value > this.byteLength) throw `Invalid readPos ${value}`;\n        this._readPos = value;\n    }\n\n    get writePos(): number {\n        return this._writePos;\n    }\n\n    set writePos(value: number) {\n        if (value < 0 || value > this.byteLength) throw `Invalid writePos ${value}`;\n        this._writePos = value;\n    }\n\n    /**\n     * Resets the read and write position of the buffer to zero.\n     */\n    reset(): void {\n        this._readPos = 0;\n        this._writePos = 0;\n    }\n\n    read(length: number): Uint8Array {\n        const value = this.subarray(this._readPos, this._readPos + length);\n        this._readPos += length;\n        return new Uint8Array(value);\n    }\n\n    write(array: Uint8Array): void {\n        this.set(array, this._writePos);\n        this._writePos += array.byteLength;\n    }\n\n    readUint8(): number {\n        return this._view.getUint8(this._readPos++);\n    }\n\n    writeUint8(value: number): void {\n        this._view.setUint8(this._writePos++, value);\n    }\n\n    readUint16(): number {\n        const value = this._view.getUint16(this._readPos);\n        this._readPos += 2;\n        return value;\n    }\n\n    writeUint16(value: number): void {\n        this._view.setUint16(this._writePos, value);\n        this._writePos += 2;\n    }\n\n    readUint32(): number {\n        const value = this._view.getUint32(this._readPos);\n        this._readPos += 4;\n        return value;\n    }\n\n    writeUint32(value: number): void {\n        this._view.setUint32(this._writePos, value);\n        this._writePos += 4;\n    }\n\n    readUint64(): number {\n        const value = this._view.getUint32(this._readPos) * Math.pow(2, 32) + this._view.getUint32(this._readPos + 4);\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        this._readPos += 8;\n        return value;\n    }\n\n    writeUint64(value: number): void {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        this._view.setUint32(this._writePos, Math.floor(value / Math.pow(2, 32)));\n        this._view.setUint32(this._writePos + 4, value);\n        this._writePos += 8;\n    }\n\n    readVarUint(): number {\n        const value = this.readUint8();\n        if (value < 0xFD) {\n            return value;\n        } else if (value === 0xFD) {\n            return this.readUint16();\n        } else if (value === 0xFE) {\n            return this.readUint32();\n        } else /*if (value === 0xFF)*/ {\n            return this.readUint64();\n        }\n    }\n\n    writeVarUint(value: number): void {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        if (value < 0xFD) {\n            this.writeUint8(value);\n        } else if (value <= 0xFFFF) {\n            this.writeUint8(0xFD);\n            this.writeUint16(value);\n        } else if (value <= 0xFFFFFFFF) {\n            this.writeUint8(0xFE);\n            this.writeUint32(value);\n        } else {\n            this.writeUint8(0xFF);\n            this.writeUint64(value);\n        }\n    }\n\n    static varUintSize(value: number): number {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        if (value < 0xFD) {\n            return 1;\n        } else if (value <= 0xFFFF) {\n            return 3;\n        } else if (value <= 0xFFFFFFFF) {\n            return 5;\n        } else {\n            return 9;\n        }\n    }\n\n    readFloat64(): number {\n        const value = this._view.getFloat64(this._readPos);\n        this._readPos += 8;\n        return value;\n    }\n\n    writeFloat64(value: number): void {\n        this._view.setFloat64(this._writePos, value);\n        this._writePos += 8;\n    }\n\n    readString(length: number): string {\n        const bytes = this.read(length);\n        return BufferUtils.toAscii(bytes);\n    }\n\n    writeString(value: string, length: number): void {\n        if (StringUtils.isMultibyte(value) || value.length !== length) throw new Error('Malformed value/length');\n        const bytes = BufferUtils.fromAscii(value);\n        this.write(bytes);\n    }\n\n    readPaddedString(length: number): string {\n        const bytes = this.read(length);\n        let i = 0;\n        while (i < length && bytes[i] !== 0x0) i++;\n        const view = new Uint8Array(bytes.buffer, bytes.byteOffset, i);\n        return BufferUtils.toAscii(view);\n    }\n\n    writePaddedString(value: string, length: number): void {\n        if (StringUtils.isMultibyte(value) || value.length > length) throw new Error('Malformed value/length');\n        const bytes = BufferUtils.fromAscii(value);\n        this.write(bytes);\n        const padding = length - bytes.byteLength;\n        this.write(new Uint8Array(padding));\n    }\n\n    readVarLengthString(): string {\n        const length = this.readUint8();\n        if (this._readPos + length > this.length) throw new Error('Malformed length');\n        const bytes = this.read(length);\n        return BufferUtils.toAscii(bytes);\n    }\n\n    writeVarLengthString(value: string): void {\n        if (StringUtils.isMultibyte(value) || !NumberUtils.isUint8(value.length)) throw new Error('Malformed value');\n        const bytes = BufferUtils.fromAscii(value);\n        this.writeUint8(bytes.byteLength);\n        this.write(bytes);\n    }\n\n    static varLengthStringSize(value: string): number {\n        if (StringUtils.isMultibyte(value) || !NumberUtils.isUint8(value.length)) throw new Error('Malformed value');\n        return /*length*/ 1 + value.length;\n    }\n}\n","import { SerialBuffer } from \"./SerialBuffer\";\nimport { StringUtils } from \"./StringUtils\";\n\ntype TypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array;\n\nclass BufferUtils {\n    static BASE64_ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    static BASE32_ALPHABET = {\n        RFC4648: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n        RFC4648_HEX: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n        NIMIQ: '0123456789ABCDEFGHJKLMNPQRSTUVXY'\n    };\n    static HEX_ALPHABET = '0123456789abcdef';\n\n    static _BASE64_LOOKUP: string[] = [];\n    private static _ISO_8859_15_DECODER?: TextDecoder | null;\n    private static _UTF8_ENCODER?: TextEncoder | null;\n\n    static toAscii(buffer: Uint8Array): string {\n        const chunkSize = 0x2000;\n        const buf = BufferUtils._toUint8View(buffer);\n\n        let ascii = '';\n        for (let i = 0; i < buf.length; i += chunkSize) {\n            ascii += String.fromCharCode.apply(null, [...buf.subarray(i, i + chunkSize)]);\n        }\n        return ascii;\n    }\n\n    static fromAscii(string: string): Uint8Array {\n        const buf = new Uint8Array(string.length);\n        for (let i = 0; i < string.length; ++i) {\n            buf[i] = string.charCodeAt(i);\n        }\n        return buf;\n    }\n\n    static _codePointTextDecoder(buffer: Uint8Array): string {\n        if (typeof TextDecoder === 'undefined') throw new Error('TextDecoder not supported');\n        if (BufferUtils._ISO_8859_15_DECODER === null) throw new Error('TextDecoder does not support iso-8859-15');\n        if (BufferUtils._ISO_8859_15_DECODER === undefined) {\n            try {\n                BufferUtils._ISO_8859_15_DECODER = new TextDecoder('iso-8859-15');\n            } catch (e) {\n                BufferUtils._ISO_8859_15_DECODER = null;\n                throw new Error('TextDecoder does not support iso-8859-15');\n            }\n        }\n        const uint8View = BufferUtils._toUint8View(buffer);\n        return BufferUtils._ISO_8859_15_DECODER.decode(uint8View)\n            .replace(/\\u20ac/g, '\\u00a4')  // € => ¤\n            .replace(/\\u0160/g, '\\u00a6')  // Š => ¦\n            .replace(/\\u0161/g, '\\u00a8')  // š => ¨\n            .replace(/\\u017d/g, '\\u00b4')  // Ž => ´\n            .replace(/\\u017e/g, '\\u00b8')  // ž => ¸\n            .replace(/\\u0152/g, '\\u00bc')  // Œ => ¼\n            .replace(/\\u0153/g, '\\u00bd')  // œ => ½\n            .replace(/\\u0178/g, '\\u00be'); // Ÿ => ¾\n    }\n\n    static _tripletToBase64(num: number): string {\n        return BufferUtils._BASE64_LOOKUP[num >> 18 & 0x3F] + BufferUtils._BASE64_LOOKUP[num >> 12 & 0x3F] + BufferUtils._BASE64_LOOKUP[num >> 6 & 0x3F] + BufferUtils._BASE64_LOOKUP[num & 0x3F];\n    }\n\n    static _base64encodeChunk(u8: Uint8Array, start: number, end: number) {\n        let tmp;\n        const output = [];\n        for (let i = start; i < end; i += 3) {\n            tmp = ((u8[i] << 16) & 0xFF0000) + ((u8[i + 1] << 8) & 0xFF00) + (u8[i + 2] & 0xFF);\n            output.push(BufferUtils._tripletToBase64(tmp));\n        }\n        return output.join('');\n    }\n\n    static _base64fromByteArray(u8: Uint8Array) {\n        let tmp;\n        const len = u8.length;\n        const extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n        let output = '';\n        const parts = [];\n        const maxChunkLength = 16383; // must be multiple of 3\n\n        // go through the array every three bytes, we'll deal with trailing stuff later\n        for (let i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n            parts.push(BufferUtils._base64encodeChunk(u8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n        }\n\n        // pad the end with zeros, but make sure to not forget the extra bytes\n        if (extraBytes === 1) {\n            tmp = u8[len - 1];\n            output += BufferUtils._BASE64_LOOKUP[tmp >> 2];\n            output += BufferUtils._BASE64_LOOKUP[(tmp << 4) & 0x3F];\n            output += '==';\n        } else if (extraBytes === 2) {\n            tmp = (u8[len - 2] << 8) + (u8[len - 1]);\n            output += BufferUtils._BASE64_LOOKUP[tmp >> 10];\n            output += BufferUtils._BASE64_LOOKUP[(tmp >> 4) & 0x3F];\n            output += BufferUtils._BASE64_LOOKUP[(tmp << 2) & 0x3F];\n            output += '=';\n        }\n\n        parts.push(output);\n\n        return parts.join('');\n    }\n\n    static toBase64(buffer: Uint8Array): string {\n        if (typeof TextDecoder !== 'undefined' && BufferUtils._ISO_8859_15_DECODER !== null) {\n            try {\n                return btoa(BufferUtils._codePointTextDecoder(buffer));\n            } catch (e) {\n                // Disabled itself\n            }\n        }\n\n        return BufferUtils._base64fromByteArray(BufferUtils._toUint8View(buffer));\n    }\n\n    static fromBase64(base64: string, length?: number): SerialBuffer {\n        const arr = new Uint8Array(atob(base64).split('').map(c => c.charCodeAt(0)));\n        if (length !== undefined && arr.length !== length) throw new Error('Decoded length does not match expected length');\n        return new SerialBuffer(arr);\n    }\n\n    static toBase64Url(buffer: Uint8Array): string {\n        return BufferUtils.toBase64(buffer).replace(/\\//g, '_').replace(/\\+/g, '-').replace(/=/g, '.');\n    }\n\n    static fromBase64Url(base64: string, length?: number): SerialBuffer {\n        return BufferUtils.fromBase64(base64.replace(/_/g, '/').replace(/-/g, '+').replace(/\\./g, '='), length);\n    }\n\n    static toBase32(buf: Uint8Array, alphabet: string = BufferUtils.BASE32_ALPHABET.NIMIQ): string {\n        let shift = 3, carry = 0, byte, symbol, i, res = '';\n\n        for (i = 0; i < buf.length; i++) {\n            byte = buf[i];\n            symbol = carry | (byte >> shift);\n            res += alphabet[symbol & 0x1f];\n\n            if (shift > 5) {\n                shift -= 5;\n                symbol = byte >> shift;\n                res += alphabet[symbol & 0x1f];\n            }\n\n            shift = 5 - shift;\n            carry = byte << shift;\n            shift = 8 - shift;\n        }\n\n        if (shift !== 3) {\n            res += alphabet[carry & 0x1f];\n        }\n\n        while (res.length % 8 !== 0 && alphabet.length === 33) {\n            res += alphabet[32];\n        }\n\n        return res;\n    }\n\n    static fromBase32(base32: string, alphabet: string = BufferUtils.BASE32_ALPHABET.NIMIQ): Uint8Array {\n        const charmap: Record<string, number> = {};\n        alphabet.toUpperCase().split('').forEach((c, i) => {\n            if (!(c in charmap)) charmap[c] = i;\n        });\n\n        let symbol, shift = 8, carry = 0, buf = [];\n        base32.toUpperCase().split('').forEach((char) => {\n            // ignore padding\n            if (alphabet.length === 33 && char === alphabet[32]) return;\n\n            symbol = charmap[char] & 0xff;\n\n            shift -= 5;\n            if (shift > 0) {\n                carry |= symbol << shift;\n            } else if (shift < 0) {\n                buf.push(carry | (symbol >> -shift));\n                shift += 8;\n                carry = (symbol << shift) & 0xff;\n            } else {\n                buf.push(carry | symbol);\n                shift = 8;\n                carry = 0;\n            }\n        });\n\n        if (shift !== 8 && carry !== 0) {\n            buf.push(carry);\n        }\n\n        return new Uint8Array(buf);\n    }\n\n    static toHex(buffer: Uint8Array): string {\n        let hex = '';\n        for (let i = 0; i < buffer.length; i++) {\n            const code = buffer[i];\n            hex += BufferUtils.HEX_ALPHABET[code >>> 4];\n            hex += BufferUtils.HEX_ALPHABET[code & 0x0F];\n        }\n        return hex;\n    }\n\n    static fromHex(hex: string, length?: number): SerialBuffer {\n        hex = hex.trim();\n        if (!StringUtils.isHexBytes(hex, length)) throw new Error('String is not an hex string (of matching length)');\n        return new SerialBuffer(new Uint8Array((hex.match(/.{2}/g) || []).map(byte => parseInt(byte, 16))));\n    }\n\n    static toBinary(buffer: ArrayLike<number>): string {\n        let bin = '';\n        for (let i = 0; i < buffer.length; i++) {\n            const code = buffer[i];\n            bin += StringUtils.lpad(code.toString(2), '0', 8);\n        }\n        return bin;\n    }\n\n    private static _strToUint8Array(str: string): Uint8Array {\n        const out = [];\n        let p = 0;\n        for (let i = 0; i < str.length; i++) {\n            let c = str.charCodeAt(i);\n            if (c < 128) {\n                out[p++] = c;\n            } else if (c < 2048) {\n                out[p++] = (c >> 6) | 192;\n                out[p++] = (c & 63) | 128;\n            } else if (\n                ((c & 0xFC00) === 0xD800) && (i + 1) < str.length &&\n                ((str.charCodeAt(i + 1) & 0xFC00) === 0xDC00)) {\n                // Surrogate Pair\n                c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);\n                out[p++] = (c >> 18) | 240;\n                out[p++] = ((c >> 12) & 63) | 128;\n                out[p++] = ((c >> 6) & 63) | 128;\n                out[p++] = (c & 63) | 128;\n            } else {\n                out[p++] = (c >> 12) | 224;\n                out[p++] = ((c >> 6) & 63) | 128;\n                out[p++] = (c & 63) | 128;\n            }\n        }\n        return new Uint8Array(out);\n    }\n\n    private static _utf8TextEncoder(str: string): Uint8Array {\n        if (typeof TextEncoder === 'undefined') throw new Error('TextEncoder not supported');\n        if (BufferUtils._UTF8_ENCODER === null) throw new Error('TextEncoder does not support utf8');\n        if (BufferUtils._UTF8_ENCODER === undefined) {\n            try {\n                BufferUtils._UTF8_ENCODER = new TextEncoder();\n            } catch (e) {\n                BufferUtils._UTF8_ENCODER = null;\n                throw new Error('TextEncoder does not support utf8');\n            }\n        }\n        return BufferUtils._UTF8_ENCODER.encode(str);\n    }\n\n    static fromUtf8(str: string): Uint8Array {\n        if (typeof TextEncoder !== 'undefined' && BufferUtils._UTF8_ENCODER !== null) {\n            try {\n                return BufferUtils._utf8TextEncoder(str);\n            } catch (e) {\n                // Disabled itself\n            }\n        }\n        return BufferUtils._strToUint8Array(str);\n    }\n\n    static fromAny(o: Uint8Array | string, length?: number): SerialBuffer {\n        if (o === '') return SerialBuffer.EMPTY;\n        if (!o) throw new Error('Invalid buffer format');\n        if (o instanceof Uint8Array) return new SerialBuffer(o);\n        try {\n            return BufferUtils.fromHex(o, length);\n        } catch (e) {\n            // Ignore\n        }\n        try {\n            return BufferUtils.fromBase64(o, length);\n        } catch (e) {\n            // Ignore\n        }\n        throw new Error('Invalid buffer format');\n    }\n\n    static concatTypedArrays<T extends TypedArray>(a: T, b: T): T\n    static concatTypedArrays(a: any, b: any): TypedArray {\n        const c = new (a.constructor)(a.length + b.length);\n        c.set(a, 0);\n        c.set(b, a.length);\n        return c;\n    }\n\n    static equals(a: TypedArray, b: TypedArray): boolean {\n        const viewA = BufferUtils._toUint8View(a);\n        const viewB = BufferUtils._toUint8View(b);\n        if (viewA.length !== viewB.length) return false;\n        for (let i = 0; i < viewA.length; i++) {\n            if (viewA[i] !== viewB[i]) return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns -1 if a is smaller than b, 1 if a is larger than b, 0 if a equals b.\n     */\n    static compare(a: TypedArray, b: TypedArray): number {\n        if (a.length < b.length) return -1;\n        if (a.length > b.length) return 1;\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] < b[i]) return -1;\n            if (a[i] > b[i]) return 1;\n        }\n        return 0;\n    }\n\n    static xor(a: Uint8Array, b: Uint8Array): Uint8Array {\n        const res = new Uint8Array(a.byteLength);\n        for (let i = 0; i < a.byteLength; ++i) {\n            res[i] = a[i] ^ b[i];\n        }\n        return res;\n    }\n\n    private static _toUint8View(arrayLike: TypedArray | ArrayBuffer): Uint8Array {\n        if (arrayLike instanceof Uint8Array) {\n            return arrayLike;\n        } else if (arrayLike instanceof ArrayBuffer) {\n            return new Uint8Array(arrayLike);\n        } else if (arrayLike.buffer instanceof ArrayBuffer) {\n            return new Uint8Array(arrayLike.buffer);\n        } else {\n            throw new Error('TypedArray or ArrayBuffer required');\n        }\n    }\n}\n\nfor (let i = 0, len = BufferUtils.BASE64_ALPHABET.length; i < len; ++i) {\n    BufferUtils._BASE64_LOOKUP[i] = BufferUtils.BASE64_ALPHABET[i];\n}\n\nexport { BufferUtils };\n","import { BufferUtils } from \"./BufferUtils\";\nimport { SerialBuffer } from \"./SerialBuffer\";\n\nexport abstract class Serializable {\n    equals(o: unknown): boolean {\n        return o instanceof Serializable && BufferUtils.equals(this.serialize(), o.serialize());\n    }\n\n    /**\n     * Returns a negative number if `this` is smaller than o, a positive number if `this` is larger than o, and zero if equal.\n     */\n    compare(o: Serializable): number {\n        return BufferUtils.compare(this.serialize(), o.serialize());\n    }\n\n    hashCode(): string {\n        return this.toBase64();\n    }\n\n    abstract serialize(buf?: SerialBuffer): SerialBuffer;\n\n    toString(): string {\n        return this.toBase64();\n    }\n\n    toBase64(): string {\n        return BufferUtils.toBase64(this.serialize());\n    }\n\n    toHex(): string {\n        return BufferUtils.toHex(this.serialize());\n    }\n}\n","import { BufferUtils } from \"./BufferUtils\";\nimport { Hash } from \"./Hash\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { Serializable } from \"./Serializable\";\n\nexport class Address extends Serializable {\n    static CCODE = 'NQ';\n    static SERIALIZED_SIZE = 20;\n    static HEX_SIZE = 40;\n    static NULL = new Address(new Uint8Array(Address.SERIALIZED_SIZE));\n    static CONTRACT_CREATION = new Address(new Uint8Array(Address.SERIALIZED_SIZE));\n\n    static copy(o: Address): Address {\n        if (!o) return o;\n        const obj = new Uint8Array(o._obj);\n        return new Address(obj);\n    }\n\n    static fromHash(hash: Hash): Address {\n        return new Address(hash.subarray(0, Address.SERIALIZED_SIZE));\n    }\n\n    private _obj: Uint8Array;\n\n    constructor(arg: Uint8Array) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Address.SERIALIZED_SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * Create Address object from binary form.\n     */\n    static unserialize(buf: SerialBuffer): Address {\n        return new Address(buf.read(Address.SERIALIZED_SIZE));\n    }\n\n    /**\n     * Serialize this Address object into binary form.\n     */\n    serialize(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    subarray(begin?: number, end?: number): Uint8Array {\n        return this._obj.subarray(begin, end);\n    }\n\n    get serializedSize(): number {\n        return Address.SERIALIZED_SIZE;\n    }\n\n    override equals(o: unknown): boolean {\n        return o instanceof Address\n            && super.equals(o);\n    }\n\n    static fromAny(addr: Address | string): Address {\n        if (addr instanceof Address) return addr;\n        if (typeof addr === 'string') return Address.fromString(addr);\n        throw new Error('Invalid address format');\n    }\n\n    toPlain(): string {\n        return this.toUserFriendlyAddress();\n    }\n\n    static fromString(str: string): Address {\n        try {\n            return Address.fromUserFriendlyAddress(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Address.fromHex(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Address.fromBase64(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        throw new Error('Invalid address format');\n    }\n\n    static fromBase64(base64: string): Address {\n        return new Address(BufferUtils.fromBase64(base64));\n    }\n\n    static fromHex(hex: string): Address {\n        return new Address(BufferUtils.fromHex(hex));\n    }\n\n    static fromUserFriendlyAddress(str: string): Address {\n        str = str.replace(/ /g, '');\n        if (str.substring(0, 2).toUpperCase() !== Address.CCODE) {\n            throw new Error('Invalid Address: Wrong country code');\n        }\n        if (str.length !== 36) {\n            throw new Error('Invalid Address: Should be 36 chars (ignoring spaces)');\n        }\n        if (Address._ibanCheck(str.substring(4) + str.substring(0, 4)) !== 1) {\n            throw new Error('Invalid Address: Checksum invalid');\n        }\n        return new Address(BufferUtils.fromBase32(str.substring(4)));\n    }\n\n    private static _ibanCheck(str: string): number {\n        const num = str.split('').map((c) => {\n            const code = c.toUpperCase().charCodeAt(0);\n            return code >= 48 && code <= 57 ? c : (code - 55).toString();\n        }).join('');\n        let tmp = '';\n\n        for (let i = 0; i < Math.ceil(num.length / 6); i++) {\n            tmp = (parseInt(tmp + num.substring(i * 6, (i * 6) + 6)) % 97).toString();\n        }\n\n        return parseInt(tmp);\n    }\n\n    toUserFriendlyAddress(withSpaces: boolean = true): string {\n        const base32 = BufferUtils.toBase32(this.serialize());\n        // eslint-disable-next-line prefer-template\n        const check = ('00' + (98 - Address._ibanCheck(base32 + Address.CCODE + '00'))).slice(-2);\n        let res = Address.CCODE + check + base32;\n        if (withSpaces) res = res.replace(/.{4}/g, '$& ').trim();\n        return res;\n    }\n}\n","import { SerialBuffer } from \"./SerialBuffer\";\nimport { Serializable } from \"./Serializable\";\nimport { WasmHelper } from \"./WasmHelper\";\n\nexport class Commitment extends Serializable {\n\tstatic SIZE = 32;\n\n    static copy(o: Commitment): Commitment {\n        if (!o) return o;\n        return new Commitment(new Uint8Array(o._obj));\n    }\n\n    static sum(commitments: Commitment[]): Commitment {\n        return new Commitment(Commitment._commitmentsAggregate(commitments.map(c => c._obj)));\n    }\n\n\tprivate _obj: Uint8Array;\n\n    constructor(arg: Uint8Array) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Commitment.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    static unserialize(buf: SerialBuffer): Commitment {\n        return new Commitment(buf.read(Commitment.SIZE));\n    }\n\n    serialize(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    get serializedSize(): number {\n        return Commitment.SIZE;\n    }\n\n    override equals(o: unknown): boolean {\n        return o instanceof Commitment && super.equals(o);\n    }\n\n    private static _commitmentsAggregate(commitments: Uint8Array[]): Uint8Array {\n        if (commitments.some(commitment => commitment.byteLength !== Commitment.SIZE)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedCommitments = new Uint8Array(commitments.length * Commitment.SIZE);\n        for (let i = 0; i < commitments.length; ++i) {\n            concatenatedCommitments.set(commitments[i], i * Commitment.SIZE);\n        }\n\t\tconst Module = WasmHelper.Module;\n\t\tlet stackPtr;\n\t\ttry {\n\t\t\tstackPtr = Module.stackSave();\n\t\t\tconst wasmOut = Module.stackAlloc(Commitment.SIZE);\n\t\t\tconst wasmInCommitments = Module.stackAlloc(concatenatedCommitments.length);\n\t\t\tnew Uint8Array(Module.HEAPU8.buffer, wasmInCommitments, concatenatedCommitments.length).set(concatenatedCommitments);\n\t\t\tModule._ed25519_aggregate_commitments(wasmOut, wasmInCommitments, commitments.length);\n\t\t\tconst aggCommitments = new Uint8Array(Commitment.SIZE);\n\t\t\taggCommitments.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, Commitment.SIZE));\n\t\t\treturn aggCommitments;\n\t\t} catch (e) {\n\t\t\t// Log.w(CryptoWorkerImpl, e); // TODO: Log\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tif (stackPtr !== undefined) Module.stackRestore(stackPtr);\n\t\t}\n    }\n}\n","import { BufferUtils } from \"./BufferUtils\";\nimport { CryptoWorker } from \"./CryptoWorker\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { Serializable } from \"./Serializable\";\nimport { WasmHelper } from \"./WasmHelper\";\n\nclass Hash extends Serializable {\n    static SIZE = new Map<Hash.Algorithm, number>();\n    static NULL: Hash;\n\n    private _obj: Uint8Array;\n    private _algorithm: Hash.Algorithm;\n\n    constructor(arg?: Uint8Array, algorithm: Hash.Algorithm = Hash.Algorithm.BLAKE2B) {\n        if (arg === null) {\n            arg = new Uint8Array(Hash.getSize(algorithm));\n        } else {\n            if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n            if (arg.length !== Hash.getSize(algorithm)) throw new Error('Primitive: Invalid length');\n        }\n        super();\n        this._obj = arg;\n        this._algorithm = algorithm;\n    }\n\n    /** @deprecated */\n    static light(arr: Uint8Array): Hash {\n        return Hash.blake2b(arr);\n    }\n\n    static blake2b(arr: Uint8Array): Hash {\n        return new Hash(Hash.computeBlake2b(arr), Hash.Algorithm.BLAKE2B);\n    }\n\n    /** @deprecated */\n    static hard(arr: Uint8Array): Promise<Hash> {\n        return Hash.argon2d(arr);\n    }\n\n    static async argon2d(arr: Uint8Array): Promise<Hash> {\n        return new Hash(await (await CryptoWorker.getInstanceAsync()).computeArgon2d(arr), Hash.Algorithm.ARGON2D);\n    }\n\n    static sha256(arr: Uint8Array): Hash {\n        return new Hash(Hash.computeSha256(arr), Hash.Algorithm.SHA256);\n    }\n\n    static sha512(arr: Uint8Array): Hash {\n        return new Hash(Hash.computeSha512(arr), Hash.Algorithm.SHA512);\n    }\n\n    static compute(arr: Uint8Array, algorithm: Hash.Algorithm): Hash {\n        // !! The algorithms supported by this function are the allowed hash algorithms for HTLCs !!\n        switch (algorithm) {\n            case Hash.Algorithm.BLAKE2B: return Hash.blake2b(arr);\n            case Hash.Algorithm.SHA256: return Hash.sha256(arr);\n            // Hash.Algorithm.SHA512 postponed until hard-fork\n            // Hash.Algorithm.ARGON2 intentionally omitted\n            default: throw new Error('Invalid hash algorithm');\n        }\n    }\n\n    static unserialize(buf: SerialBuffer, algorithm: Hash.Algorithm = Hash.Algorithm.BLAKE2B): Hash {\n        return new Hash(buf.read(Hash.getSize(algorithm)), algorithm);\n    }\n\n    serialize(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    subarray(begin?: number, end?: number): Uint8Array {\n        return this._obj.subarray(begin, end);\n    }\n\n    get serializedSize(): number {\n        return Hash.SIZE.get(this._algorithm)!;\n    }\n\n    get array(): Uint8Array {\n        return this._obj;\n    }\n\n    get algorithm(): Hash.Algorithm {\n        return this._algorithm;\n    }\n\n    override equals(o: unknown): boolean {\n        return o instanceof Hash && o._algorithm === this._algorithm && super.equals(o);\n    }\n\n    static fromAny(hash: Hash | Uint8Array | string, algorithm: Hash.Algorithm = Hash.Algorithm.BLAKE2B): Hash {\n        if (hash instanceof Hash) return hash;\n        try {\n            return new Hash(BufferUtils.fromAny(hash, Hash.SIZE.get(algorithm)), algorithm);\n        } catch (e) {\n            throw new Error('Invalid hash format');\n        }\n    }\n\n    toPlain(): string {\n        return this.toHex();\n    }\n\n    static fromBase64(base64: string): Hash {\n        return new Hash(BufferUtils.fromBase64(base64));\n    }\n\n    static fromHex(hex: string): Hash {\n        return new Hash(BufferUtils.fromHex(hex));\n    }\n\n    static fromPlain(str: string): Hash {\n        return Hash.fromString(str);\n    }\n\n    static fromString(str: string): Hash {\n        try {\n            return Hash.fromHex(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Hash.fromBase64(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        throw new Error('Invalid hash format');\n    }\n\n    static isHash(o: unknown): o is Hash {\n        return o instanceof Hash;\n    }\n\n    static getSize(algorithm: Hash.Algorithm): number {\n        const size = Hash.SIZE.get(algorithm);\n        if (typeof size !== 'number') throw new Error('Invalid hash algorithm');\n        return size;\n    }\n\n    static computeBlake2b(input: Uint8Array): Uint8Array {\n        const Module = WasmHelper.Module;\n        let stackPtr;\n        try {\n            stackPtr = Module.stackSave();\n            const hashSize = Hash.getSize(Hash.Algorithm.BLAKE2B);\n            const wasmOut = Module.stackAlloc(hashSize);\n            const wasmIn = Module.stackAlloc(input.length);\n            new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n            const res = Module._nimiq_blake2(wasmOut, wasmIn, input.length);\n            if (res !== 0) {\n                throw res;\n            }\n            const hash = new Uint8Array(hashSize);\n            hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n            return hash;\n        } catch (e) {\n            // Log.w(Hash, e); // TODO Log\n            throw e;\n        } finally {\n            if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n        }\n    }\n\n    static computeSha256(input: Uint8Array): Uint8Array {\n        const Module = WasmHelper.Module;\n        let stackPtr;\n        try {\n            stackPtr = Module.stackSave();\n            const hashSize = Hash.getSize(Hash.Algorithm.SHA256);\n            const wasmOut = Module.stackAlloc(hashSize);\n            const wasmIn = Module.stackAlloc(input.length);\n            new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n            Module._nimiq_sha256(wasmOut, wasmIn, input.length);\n            const hash = new Uint8Array(hashSize);\n            hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n            return hash;\n        } catch (e) {\n            // Log.w(Hash, e); // TODO Log\n            throw e;\n        } finally {\n            if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n        }\n    }\n\n    static computeSha512(input: Uint8Array): Uint8Array {\n        const Module = WasmHelper.Module;\n        let stackPtr;\n        try {\n            stackPtr = Module.stackSave();\n            const hashSize = Hash.getSize(Hash.Algorithm.SHA512);\n            const wasmOut = Module.stackAlloc(hashSize);\n            const wasmIn = Module.stackAlloc(input.length);\n            new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n            Module._nimiq_sha512(wasmOut, wasmIn, input.length);\n            const hash = new Uint8Array(hashSize);\n            hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n            return hash;\n        } catch (e) {\n            // Log.w(Hash, e); // TODO Log\n            throw e;\n        } finally {\n            if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n        }\n    }\n}\n\nnamespace Hash {\n    export enum Algorithm {\n        BLAKE2B = 1,\n        ARGON2D = 2,\n        SHA256 = 3,\n        SHA512 = 4,\n    }\n\n    export namespace Algorithm {\n        export function toString(hashAlgorithm: Hash.Algorithm): string {\n            switch (hashAlgorithm) {\n                case Hash.Algorithm.BLAKE2B: return 'blake2b';\n                case Hash.Algorithm.ARGON2D: return 'argon2d';\n                case Hash.Algorithm.SHA256: return 'sha256';\n                case Hash.Algorithm.SHA512: return 'sha512';\n                default: throw new Error('Invalid hash algorithm');\n            }\n        }\n        export function fromAny(algorithm: unknown): Hash.Algorithm {\n            if (typeof algorithm === 'number' && Hash.SIZE.has(algorithm)) return algorithm;\n            switch (algorithm) {\n                case 'blake2b': return Hash.Algorithm.BLAKE2B;\n                case 'argon2d': return Hash.Algorithm.ARGON2D;\n                case 'sha256': return Hash.Algorithm.SHA256;\n                case 'sha512': return Hash.Algorithm.SHA512;\n                default: throw new Error('Invalid hash algorithm');\n            }\n        }\n    }\n}\n\nHash.SIZE.set(Hash.Algorithm.BLAKE2B, 32);\nHash.SIZE.set(Hash.Algorithm.ARGON2D, 32);\nHash.SIZE.set(Hash.Algorithm.SHA256, 32);\nHash.SIZE.set(Hash.Algorithm.SHA512, 64);\n\n// Must be set after the Hash.SIZE map has been created, because the constructor depends on Hash.SIZE\nHash.NULL = new Hash(new Uint8Array(32));\n\nexport { Hash };\n","import { Hash } from \"./Hash\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { WasmHelper } from \"./WasmHelper\";\n\n/**\n * @interface\n */\nexport abstract class CryptoWorker {\n\tprivate static _workerAsync: CryptoWorker | null = null\n\n    static async getInstanceAsync(): Promise<CryptoWorker> {\n        if (!CryptoWorker._workerAsync) {\n\t\t\tCryptoWorker._workerAsync = new CryptoWorkerImpl();\n        }\n        return CryptoWorker._workerAsync;\n    }\n\n    abstract computeArgon2d(input: Uint8Array): Promise<Uint8Array>;\n\n    abstract computeArgon2dBatch(inputs: Uint8Array[]): Promise<Uint8Array[]>;\n\n    /** @deprecated */\n    abstract kdfLegacy(key: Uint8Array, salt: Uint8Array, iterations: number, outputSize: number): Promise<Uint8Array>;\n\n    abstract kdf(key: Uint8Array, salt: Uint8Array, iterations: number, outputSize: number): Promise<Uint8Array>;\n\n    // abstract blockVerify(\n\t// \tblock: Uint8Array,\n\t// \ttransactionValid: boolean[],\n\t// \ttimeNow: number,\n\t// \tgenesisHash: Uint8Array,\n\t// \tnetworkId: number,\n\t// ): Promise<{\n\t// \tvalid: boolean,\n\t// \tpow: SerialBuffer,\n\t// \tinterlinkHash: SerialBuffer,\n\t// \tbodyHash: SerialBuffer,\n\t// }>;\n}\n\nclass CryptoWorkerImpl extends CryptoWorker {\n    async computeArgon2d(input: Uint8Array): Promise<Uint8Array> {\n\t\tconst Module = WasmHelper.Module;\n\t\tlet stackPtr;\n\t\ttry {\n\t\t\tstackPtr = Module.stackSave();\n\t\t\tconst hashSize = Hash.getSize(Hash.Algorithm.ARGON2D);\n\t\t\tconst wasmOut = Module.stackAlloc(hashSize);\n\t\t\tconst wasmIn = Module.stackAlloc(input.length);\n\t\t\tnew Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n\t\t\tconst res = Module._nimiq_argon2(wasmOut, wasmIn, input.length, 512);\n\t\t\tif (res !== 0) {\n\t\t\t\tthrow res;\n\t\t\t}\n\t\t\tconst hash = new Uint8Array(hashSize);\n\t\t\thash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n\t\t\treturn hash;\n\t\t} catch (e) {\n\t\t\t// Log.w(CryptoWorkerImpl, e); // TODO Log\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tif (stackPtr !== undefined) Module.stackRestore(stackPtr);\n\t\t}\n\t}\n\n    async computeArgon2dBatch(inputs: Uint8Array[]): Promise<Uint8Array[]> {\n        const hashes = [];\n\t\tconst Module = WasmHelper.Module;\n\t\tlet stackPtr;\n\t\ttry {\n\t\t\tstackPtr = Module.stackSave();\n\t\t\tconst hashSize = Hash.getSize(Hash.Algorithm.ARGON2D);\n\t\t\tconst wasmOut = Module.stackAlloc(hashSize);\n\t\t\tconst stackTmp = Module.stackSave();\n\t\t\tfor (const input of inputs) {\n\t\t\t\tModule.stackRestore(stackTmp);\n\t\t\t\tconst wasmIn = Module.stackAlloc(input.length);\n\t\t\t\tnew Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n\t\t\t\tconst res = Module._nimiq_argon2(wasmOut, wasmIn, input.length, 512);\n\t\t\t\tif (res !== 0) {\n\t\t\t\t\tthrow res;\n\t\t\t\t}\n\t\t\t\tconst hash = new Uint8Array(hashSize);\n\t\t\t\thash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n\t\t\t\thashes.push(hash);\n\t\t\t}\n\t\t\treturn hashes;\n\t\t} catch (e) {\n\t\t\t// Log.w(CryptoWorkerImpl, e); // TODO Log\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tif (stackPtr !== undefined) Module.stackRestore(stackPtr);\n\t\t}\n\t}\n\n    /** @deprecated */\n    async kdfLegacy(key: Uint8Array, salt: Uint8Array, iterations: number, outputSize: number = Hash.getSize(Hash.Algorithm.ARGON2D)): Promise<Uint8Array> {\n\t\tconst Module = WasmHelper.Module;\n\t\tlet stackPtr;\n\t\ttry {\n\t\t\tstackPtr = Module.stackSave();\n\t\t\tconst wasmOut = Module.stackAlloc(outputSize);\n\t\t\tconst wasmIn = Module.stackAlloc(key.length);\n\t\t\tnew Uint8Array(Module.HEAPU8.buffer, wasmIn, key.length).set(key);\n\t\t\tconst wasmSalt = Module.stackAlloc(salt.length);\n\t\t\tnew Uint8Array(Module.HEAPU8.buffer, wasmSalt, salt.length).set(salt);\n\t\t\tconst res = Module._nimiq_kdf_legacy(wasmOut, outputSize, wasmIn, key.length, wasmSalt, salt.length, 512, iterations);\n\t\t\tif (res !== 0) {\n\t\t\t\tthrow res;\n\t\t\t}\n\t\t\tconst hash = new Uint8Array(outputSize);\n\t\t\thash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, outputSize));\n\t\t\treturn hash;\n\t\t} catch (e) {\n\t\t\t// Log.w(CryptoWorkerImpl, e); // TODO Log\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tif (stackPtr !== undefined) Module.stackRestore(stackPtr);\n\t\t}\n\t}\n\n    async kdf(key: Uint8Array, salt: Uint8Array, iterations: number, outputSize: number = Hash.getSize(Hash.Algorithm.ARGON2D)): Promise<Uint8Array> {\n\t\tconst Module = WasmHelper.Module;\n\t\tlet stackPtr;\n\t\ttry {\n\t\t\tstackPtr = Module.stackSave();\n\t\t\tconst wasmOut = Module.stackAlloc(outputSize);\n\t\t\tconst wasmIn = Module.stackAlloc(key.length);\n\t\t\tnew Uint8Array(Module.HEAPU8.buffer, wasmIn, key.length).set(key);\n\t\t\tconst wasmSalt = Module.stackAlloc(salt.length);\n\t\t\tnew Uint8Array(Module.HEAPU8.buffer, wasmSalt, salt.length).set(salt);\n\t\t\tconst res = Module._nimiq_kdf(wasmOut, outputSize, wasmIn, key.length, wasmSalt, salt.length, 512, iterations);\n\t\t\tif (res !== 0) {\n\t\t\t\tthrow res;\n\t\t\t}\n\t\t\tconst hash = new Uint8Array(outputSize);\n\t\t\thash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, outputSize));\n\t\t\treturn hash;\n\t\t} catch (e) {\n\t\t\t// Log.w(CryptoWorkerImpl, e); // TODO Log\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tif (stackPtr !== undefined) Module.stackRestore(stackPtr);\n\t\t}\n\t}\n\n    // async blockVerify(\n\t// \tblock: Uint8Array,\n\t// \ttransactionValid: boolean[],\n\t// \ttimeNow: number,\n\t// \tgenesisHash: Uint8Array,\n\t// \tnetworkId: number,\n\t// ): Promise<{\n\t// \tvalid: boolean,\n\t// \tpow: SerialBuffer,\n\t// \tinterlinkHash: SerialBuffer,\n\t// \tbodyHash: SerialBuffer,\n\t// }> {\n    //     // The worker only uses a stub genesis config.\n    //     GenesisConfig = {\n    //         GENESIS_HASH: Hash.unserialize(new SerialBuffer(genesisHash)),\n    //         NETWORK_ID: networkId\n    //     };\n\n    //     const block = Block.unserialize(new SerialBuffer(blockSerialized)); // TODO Block\n    //     for (let i = 0; i < transactionValid.length; i++) {\n    //         block.body.transactions[i]._valid = transactionValid[i];\n    //     }\n\n    //     const valid = await block._verify(timeNow);\n    //     const pow = await block.header.pow();\n    //     const interlinkHash = block.interlink.hash();\n    //     const bodyHash = block.body.hash();\n    //     return { valid: valid, pow: pow.serialize(), interlinkHash: interlinkHash.serialize(), bodyHash: bodyHash.serialize() };\n    // }\n}\n","import { BufferUtils } from \"./BufferUtils\";\nimport { CryptoWorker } from \"./CryptoWorker\";\nimport { Hash } from \"./Hash\";\nimport { SerialBuffer } from \"./SerialBuffer\";\n\nexport class CryptoUtils {\n    static SHA512_BLOCK_SIZE = 128;\n\n    static getRandomValues(buf: Uint8Array): Uint8Array {\n        if (typeof window !== 'undefined') {\n            // Browser and Deno\n            return window.crypto.getRandomValues(buf);\n        } else {\n            // NodeJS\n            const crypto = require(\"crypto\");\n            if (!(buf instanceof Uint8Array)) {\n                throw new TypeError('expected Uint8Array');\n            }\n            if (buf.length > 65536) {\n                const e = new Error();\n                // e.code = 22;\n                e.message = `Failed to execute 'getRandomValues' on 'Crypto': The ArrayBufferView's byte length ${buf.length} exceeds the number of bytes of entropy available via this API (65536).`;\n                e.name = 'QuotaExceededError';\n                throw e;\n            }\n            const bytes = crypto.randomBytes(buf.length);\n            buf.set(bytes);\n            return buf;\n        }\n    }\n\n    static computeHmacSha512(key: Uint8Array, data: Uint8Array): Uint8Array {\n        if (key.length > CryptoUtils.SHA512_BLOCK_SIZE) {\n            key = new SerialBuffer(Hash.computeSha512(key));\n        }\n\n        const iKey = new SerialBuffer(CryptoUtils.SHA512_BLOCK_SIZE);\n        const oKey = new SerialBuffer(CryptoUtils.SHA512_BLOCK_SIZE);\n        for (let i = 0; i < CryptoUtils.SHA512_BLOCK_SIZE; ++i) {\n            const byte = key[i] || 0;\n            iKey[i] = 0x36 ^ byte;\n            oKey[i] = 0x5c ^ byte;\n        }\n\n        const innerHash = Hash.computeSha512(BufferUtils.concatTypedArrays(iKey, data));\n        return Hash.computeSha512(BufferUtils.concatTypedArrays(oKey, innerHash));\n    }\n\n    static computePBKDF2sha512(password: Uint8Array, salt: Uint8Array, iterations: number, derivedKeyLength: number): SerialBuffer {\n        // Following https://www.ietf.org/rfc/rfc2898.txt\n        const hashLength = Hash.SIZE.get(Hash.Algorithm.SHA512)!;\n\n        if (derivedKeyLength > (Math.pow(2, 32) - 1) * hashLength) {\n            throw new Error('Derived key too long');\n        }\n\n        const l = Math.ceil(derivedKeyLength / hashLength);\n        const r = derivedKeyLength - (l - 1) * hashLength;\n\n        const derivedKey = new SerialBuffer(derivedKeyLength);\n        for (let i = 1; i <= l; i++) {\n            let u1 = new SerialBuffer(salt.length + 4);\n            u1.write(salt);\n            u1.writeUint32(i);\n\n            let u2 = CryptoUtils.computeHmacSha512(password, u1);\n            const t = u2;\n            for (let j = 1; j < iterations; j++) {\n                u2 = CryptoUtils.computeHmacSha512(password, u2);\n                for (let k = 0; k < t.length; k++) {\n                    t[k] ^= u2[k];\n                }\n            }\n\n            if (i < l) {\n                derivedKey.write(t);\n            } else {\n                derivedKey.write(t.slice(0, r));\n            }\n        }\n        return derivedKey;\n    }\n\n    /** @deprecated */\n    static async otpKdfLegacy(message: Uint8Array, key: Uint8Array, salt: Uint8Array, iterations: number): Promise<Uint8Array> {\n        const worker = await CryptoWorker.getInstanceAsync();\n        const derivedKey = await worker.kdfLegacy(key, salt, iterations, message.byteLength);\n        return BufferUtils.xor(message, derivedKey);\n    }\n\n    static async otpKdf(message: Uint8Array, key: Uint8Array, salt: Uint8Array, iterations: number): Promise<Uint8Array> {\n        const worker = await CryptoWorker.getInstanceAsync();\n        const derivedKey = await worker.kdf(key, salt, iterations, message.byteLength);\n        return BufferUtils.xor(message, derivedKey);\n    }\n\n}\n","export class CRC8 {\n    private static _table: number[] | null = null;\n\n    // Adapted from https://github.com/mode80/crc8js\n    private static _createTable() {\n        // Create a lookup table byte array\n        const table = []; // 256 max len byte array\n\n        for (let i = 0; i < 256; ++i) {\n            let curr = i;\n            for (let j = 0; j < 8; ++j) {\n                if ((curr & 0x80) !== 0) {\n                    curr = ((curr << 1) ^ 0x97) % 256; // Polynomial C2 by Baicheva98\n                } else {\n                    curr = (curr << 1) % 256;\n                }\n            }\n            table[i] = curr;\n        }\n        return table;\n    }\n\n    static compute(buf: Uint8Array): number {\n        if (!CRC8._table) CRC8._table = CRC8._createTable();\n        // Calculate the 8-bit checksum given an array of byte-sized numbers\n        let c = 0;\n        for (let i = 0; i < buf.length; i++) {\n            c = CRC8._table[(c ^ buf[i]) % 256];\n        }\n        return c;\n    }\n}\n","import { Address } from \"./Address\";\nimport { BufferUtils } from \"./BufferUtils\";\nimport { Hash } from \"./Hash\";\nimport { PrivateKey } from \"./PrivateKey\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { Serializable } from \"./Serializable\";\nimport { WasmHelper } from \"./WasmHelper\";\n\nexport class PublicKey extends Serializable {\n    static SIZE = 32;\n\n    static copy(o: PublicKey): PublicKey {\n        if (!o) return o;\n        return new PublicKey(new Uint8Array(o._obj));\n    }\n\n    private _obj: Uint8Array;\n\n    constructor(arg: Uint8Array) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== PublicKey.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    static derive(privateKey: PrivateKey): PublicKey {\n        return new PublicKey(PublicKey._publicKeyDerive(privateKey.serialize()));\n    }\n\n    static sum(publicKeys: PublicKey[]): PublicKey {\n        publicKeys = publicKeys.slice();\n        publicKeys.sort((a, b) => a.compare(b));\n        return PublicKey._delinearizeAndAggregatePublicKeys(publicKeys);\n    }\n\n    static unserialize(buf: SerialBuffer): PublicKey {\n        return new PublicKey(buf.read(PublicKey.SIZE));\n    }\n\n    static fromAny(o: PublicKey | Uint8Array | string): PublicKey {\n        if (!o) throw new Error('Invalid public key format');\n        if (o instanceof PublicKey) return o;\n        try {\n            return new PublicKey(BufferUtils.fromAny(o, PublicKey.SIZE));\n        } catch (e) {\n            throw new Error('Invalid public key format');\n        }\n    }\n\n    serialize(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    get serializedSize(): number {\n        return PublicKey.SIZE;\n    }\n\n    override equals(o: unknown): boolean {\n        return o instanceof PublicKey && super.equals(o);\n    }\n\n    hash(): Hash {\n        return Hash.blake2b(this.serialize());\n    }\n\n    override compare(o: PublicKey): number {\n        return BufferUtils.compare(this._obj, o._obj);\n    }\n\n    toAddress(): Address {\n        return Address.fromHash(this.hash());\n    }\n\n    static _delinearizeAndAggregatePublicKeys(publicKeys: PublicKey[]): PublicKey {\n        const publicKeysObj = publicKeys.map(k => k.serialize());\n        const publicKeysHash = PublicKey._publicKeysHash(publicKeysObj);\n        const raw = PublicKey._publicKeysDelinearizeAndAggregate(publicKeysObj, publicKeysHash);\n        return new PublicKey(raw);\n    }\n\n    private static _publicKeyDerive(privateKey: Uint8Array): Uint8Array {\n        if (privateKey.byteLength !== PrivateKey.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        const Module = WasmHelper.Module;\n        let stackPtr;\n        try {\n            stackPtr = Module.stackSave();\n            const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n            const pubKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmOut, PrivateKey.SIZE);\n            pubKeyBuffer.set(privateKey);\n            const wasmIn = Module.stackAlloc(privateKey.length);\n            const privKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmIn, PrivateKey.SIZE);\n            privKeyBuffer.set(privateKey);\n\n            Module._ed25519_public_key_derive(wasmOut, wasmIn);\n            privKeyBuffer.fill(0);\n            const publicKey = new Uint8Array(PublicKey.SIZE);\n            publicKey.set(pubKeyBuffer);\n            return publicKey;\n        } catch (e) {\n            // Log.w(PublicKey, e); // TODO Log\n            throw e;\n        } finally {\n            if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n        }\n    }\n\n    static _publicKeysHash(publicKeys: Uint8Array[]): Uint8Array {\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n        const Module = WasmHelper.Module;\n        let stackPtr;\n        try {\n            stackPtr = Module.stackSave();\n            const hashSize = Hash.getSize(Hash.Algorithm.SHA512);\n            const wasmOut = Module.stackAlloc(hashSize);\n            const wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n            new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n            Module._ed25519_hash_public_keys(wasmOut, wasmInPublicKeys, publicKeys.length);\n            const hashedPublicKey = new Uint8Array(hashSize);\n            hashedPublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n            return hashedPublicKey;\n        } catch (e) {\n            // Log.w(PublicKey, e); // TODO Log\n            throw e;\n        } finally {\n            if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n        }\n    }\n\n    static _publicKeyDelinearize(publicKey: Uint8Array, publicKeysHash: Uint8Array): Uint8Array {\n        if (publicKey.byteLength !== PublicKey.SIZE\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        const Module = WasmHelper.Module;\n        let stackPtr;\n        try {\n            stackPtr = Module.stackSave();\n            const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n            const wasmInPublicKey = Module.stackAlloc(publicKey.length);\n            const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n            new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKey, publicKey.length).set(publicKey);\n            new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n            Module._ed25519_delinearize_public_key(wasmOut, wasmInPublicKeysHash, wasmInPublicKey);\n            const delinearizedPublicKey = new Uint8Array(PublicKey.SIZE);\n            delinearizedPublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PublicKey.SIZE));\n            return delinearizedPublicKey;\n        } catch (e) {\n            // Log.w(PublicKey, e); // TODO Log\n            throw e;\n        } finally {\n            if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n        }\n    }\n\n    static _publicKeysDelinearizeAndAggregate(publicKeys: Uint8Array[], publicKeysHash: Uint8Array): Uint8Array{\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n        const Module = WasmHelper.Module;\n        let stackPtr;\n        try {\n            stackPtr = Module.stackSave();\n            const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n            const wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n            const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n            new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n            new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n            Module._ed25519_aggregate_delinearized_public_keys(wasmOut, wasmInPublicKeysHash, wasmInPublicKeys, publicKeys.length);\n            const aggregatePublicKey = new Uint8Array(PublicKey.SIZE);\n            aggregatePublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PublicKey.SIZE));\n            return aggregatePublicKey;\n        } catch (e) {\n            // Log.w(PublicKey, e); // TODO Log\n            throw e;\n        } finally {\n            if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n        }\n    }\n}\n","import { BufferUtils } from \"./BufferUtils\";\nimport { CryptoUtils } from \"./CryptoUtils\";\nimport { Entropy } from \"./Entropy\";\nimport { Hash } from \"./Hash\";\nimport { PrivateKey } from \"./PrivateKey\";\nimport { PublicKey } from \"./PublicKey\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { Serializable } from \"./Serializable\";\n\nabstract class Secret extends Serializable {\n    private _type: Secret.Type;\n    private _purposeId: number;\n\n    static SIZE = 32;\n\n    static ENCRYPTION_SALT_SIZE = 16;\n    static ENCRYPTION_KDF_ROUNDS = 256;\n    static ENCRYPTION_CHECKSUM_SIZE = 4;\n    static ENCRYPTION_CHECKSUM_SIZE_V3 = 2;\n\n    constructor(type: Secret.Type, purposeId: number) {\n        super();\n        this._type = type;\n        this._purposeId = purposeId;\n    }\n\n    static async fromEncrypted(buf: SerialBuffer, key: Uint8Array): Promise<PrivateKey | Entropy> {\n        const version = buf.readUint8();\n\n        const roundsLog = buf.readUint8();\n        if (roundsLog > 32) throw new Error('Rounds out-of-bounds');\n        const rounds = Math.pow(2, roundsLog);\n\n        switch (version) {\n            case 1:\n                return Secret._decryptV1(buf, key, rounds);\n            case 2:\n                return Secret._decryptV2(buf, key, rounds);\n            case 3:\n                return Secret._decryptV3(buf, key, rounds);\n            default:\n                throw new Error('Unsupported version');\n        }\n    }\n\n    private static async _decryptV1(buf: SerialBuffer, key: Uint8Array, rounds: number): Promise<PrivateKey> {\n        const ciphertext = buf.read(Secret.SIZE);\n        const salt = buf.read(Secret.ENCRYPTION_SALT_SIZE);\n        const check = buf.read(Secret.ENCRYPTION_CHECKSUM_SIZE);\n        const plaintext = await CryptoUtils.otpKdfLegacy(ciphertext, key, salt, rounds);\n\n        const privateKey = new PrivateKey(plaintext);\n        const publicKey = PublicKey.derive(privateKey);\n        const checksum = publicKey.hash().subarray(0, Secret.ENCRYPTION_CHECKSUM_SIZE);\n        if (!BufferUtils.equals(check, checksum)) {\n            throw new Error('Invalid key');\n        }\n\n        return privateKey;\n    }\n\n    private static async _decryptV2(buf: SerialBuffer, key: Uint8Array, rounds: number): Promise<PrivateKey> {\n        const ciphertext = buf.read(Secret.SIZE);\n        const salt = buf.read(Secret.ENCRYPTION_SALT_SIZE);\n        const check = buf.read(Secret.ENCRYPTION_CHECKSUM_SIZE);\n        const plaintext = await CryptoUtils.otpKdfLegacy(ciphertext, key, salt, rounds);\n\n        const checksum = Hash.computeBlake2b(plaintext).subarray(0, Secret.ENCRYPTION_CHECKSUM_SIZE);\n        if (!BufferUtils.equals(check, checksum)) {\n            throw new Error('Invalid key');\n        }\n\n        return new PrivateKey(plaintext);\n    }\n\n    private static async _decryptV3(buf: SerialBuffer, key: Uint8Array, rounds: number): Promise<PrivateKey | Entropy> {\n        const salt = buf.read(Secret.ENCRYPTION_SALT_SIZE);\n        const ciphertext = buf.read(Secret.ENCRYPTION_CHECKSUM_SIZE_V3 + /*purposeId*/ 4 + Secret.SIZE);\n        const plaintext = await CryptoUtils.otpKdf(ciphertext, key, salt, rounds);\n\n        const check = plaintext.subarray(0, Secret.ENCRYPTION_CHECKSUM_SIZE_V3);\n        const payload = plaintext.subarray(Secret.ENCRYPTION_CHECKSUM_SIZE_V3);\n        const checksum = Hash.computeBlake2b(payload).subarray(0, Secret.ENCRYPTION_CHECKSUM_SIZE_V3);\n        if (!BufferUtils.equals(check, checksum)) {\n            throw new Error('Invalid key');\n        }\n\n        const purposeId = payload[0] << 24 | payload[1] << 16 | payload[2] << 8 | payload[3];\n        const secret = payload.subarray(4);\n        switch (purposeId) {\n            case PrivateKey.PURPOSE_ID:\n                return new PrivateKey(secret);\n            case Entropy.PURPOSE_ID:\n            default:\n                return new Entropy(secret);\n        }\n    }\n\n    async exportEncrypted(key: Uint8Array): Promise<SerialBuffer> {\n        const salt = new Uint8Array(Secret.ENCRYPTION_SALT_SIZE);\n        CryptoUtils.getRandomValues(salt);\n\n        const data = new SerialBuffer(/*purposeId*/ 4 + Secret.SIZE);\n        data.writeUint32(this._purposeId);\n        data.write(this.serialize());\n\n        const checksum = Hash.computeBlake2b(data).subarray(0, Secret.ENCRYPTION_CHECKSUM_SIZE_V3);\n        const plaintext = new SerialBuffer(checksum.byteLength + data.byteLength);\n        plaintext.write(checksum);\n        plaintext.write(data);\n        const ciphertext = await CryptoUtils.otpKdf(plaintext, key, salt, Secret.ENCRYPTION_KDF_ROUNDS);\n\n        const buf = new SerialBuffer(/*version*/ 1 + /*kdf rounds*/ 1 + salt.byteLength + ciphertext.byteLength);\n        buf.writeUint8(3); // version\n        buf.writeUint8(Math.log2(Secret.ENCRYPTION_KDF_ROUNDS));\n        buf.write(salt);\n        buf.write(ciphertext);\n\n        return buf;\n    }\n\n    get encryptedSize(): number {\n        return /*version*/ 1\n            + /*kdf rounds*/ 1\n            + Secret.ENCRYPTION_SALT_SIZE\n            + Secret.ENCRYPTION_CHECKSUM_SIZE_V3\n            + /*purposeId*/ 4\n            + Secret.SIZE;\n    }\n\n    get type(): Secret.Type {\n        return this._type;\n    }\n}\n\nnamespace Secret {\n    export enum Type {\n        PRIVATE_KEY = 1,\n        ENTROPY = 2,\n    }\n}\n\nexport { Secret };\n","import { CryptoUtils } from \"./CryptoUtils\";\nimport { Hash } from \"./Hash\";\nimport { PublicKey } from \"./PublicKey\";\nimport { Secret } from \"./Secret\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { WasmHelper } from \"./WasmHelper\";\n\nexport class PrivateKey extends Secret {\n    static override SIZE = Secret.SIZE;\n    static PURPOSE_ID = 0x42000001;\n\n    private _obj: Uint8Array;\n\n    constructor(arg: Uint8Array) {\n        super(Secret.Type.PRIVATE_KEY, PrivateKey.PURPOSE_ID);\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== PrivateKey.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    static generate(): PrivateKey {\n        const privateKey = new Uint8Array(PrivateKey.SIZE);\n        CryptoUtils.getRandomValues(privateKey);\n        return new PrivateKey(privateKey);\n    }\n\n    static unserialize(buf: SerialBuffer): PrivateKey {\n        return new PrivateKey(buf.read(PrivateKey.SIZE));\n    }\n\n    serialize(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    get serializedSize(): number {\n        return PrivateKey.SIZE;\n    }\n\n    /**\n     * Overwrite this private key with a replacement in-memory\n     */\n    overwrite(privateKey: PrivateKey): void {\n        this._obj.set(privateKey._obj);\n    }\n\n    override equals(o: unknown): boolean {\n        return o instanceof PrivateKey && super.equals(o);\n    }\n\n    static _privateKeyDelinearize(privateKey: Uint8Array, publicKey: Uint8Array, publicKeysHash: Uint8Array): Uint8Array {\n        if (privateKey.byteLength !== PrivateKey.SIZE\n            || publicKey.byteLength !== PublicKey.SIZE\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        const Module = WasmHelper.Module;\n        let stackPtr;\n        try {\n            stackPtr = Module.stackSave();\n            const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n            const wasmInPrivateKey = Module.stackAlloc(privateKey.length);\n            const wasmInPublicKey = Module.stackAlloc(publicKey.length);\n            const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n            new Uint8Array(Module.HEAPU8.buffer, wasmInPrivateKey, privateKey.length).set(privateKey);\n            new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKey, publicKey.length).set(publicKey);\n            new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n            Module._ed25519_derive_delinearized_private_key(wasmOut, wasmInPublicKeysHash, wasmInPublicKey, wasmInPrivateKey);\n            const delinearizedPrivateKey = new Uint8Array(PrivateKey.SIZE);\n            delinearizedPrivateKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PrivateKey.SIZE));\n            return delinearizedPrivateKey;\n        } catch (e) {\n            // Log.w(CryptoWorkerImpl, e); // TODO Log\n            throw e;\n        } finally {\n            if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n        }\n    }\n}\n","import { Address } from \"./Address\";\nimport { BufferUtils } from \"./BufferUtils\";\nimport { CryptoUtils } from \"./CryptoUtils\";\nimport { NumberUtils } from \"./NumberUtils\";\nimport { PrivateKey } from \"./PrivateKey\";\nimport { PublicKey } from \"./PublicKey\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { Serializable } from \"./Serializable\";\n\nexport class ExtendedPrivateKey extends Serializable {\n    static CHAIN_CODE_SIZE = 32;\n\n    private _key: PrivateKey;\n    private _chainCode: Uint8Array;\n\n    constructor(key: PrivateKey, chainCode: Uint8Array) {\n        super();\n        if (!(key instanceof PrivateKey)) throw new Error('ExtendedPrivateKey: Invalid key');\n        if (!(chainCode instanceof Uint8Array)) throw new Error('ExtendedPrivateKey: Invalid chainCode');\n        if (chainCode.length !== ExtendedPrivateKey.CHAIN_CODE_SIZE) throw new Error('ExtendedPrivateKey: Invalid chainCode length');\n        this._key = key;\n        this._chainCode = chainCode;\n    }\n\n    static generateMasterKey(seed: Uint8Array): ExtendedPrivateKey {\n        const bCurve = BufferUtils.fromAscii('ed25519 seed');\n        const hash = CryptoUtils.computeHmacSha512(bCurve, seed);\n        return new ExtendedPrivateKey(new PrivateKey(hash.slice(0, 32)), hash.slice(32));\n    }\n\n    derive(index: number): ExtendedPrivateKey {\n        // Only hardened derivation is allowed for ed25519.\n        if (index < 0x80000000) index += 0x80000000;\n\n        const data = new SerialBuffer(1 + PrivateKey.SIZE + 4);\n        data.writeUint8(0);\n        this._key.serialize(data);\n        data.writeUint32(index);\n\n        const hash = CryptoUtils.computeHmacSha512(this._chainCode, data);\n        return new ExtendedPrivateKey(new PrivateKey(hash.slice(0, 32)), hash.slice(32));\n    }\n\n    static isValidPath(path: string): boolean {\n        if (path.match(/^m(\\/[0-9]+')*$/) === null) return false;\n\n        // Overflow check.\n        const segments = path.split('/');\n        for (let i = 1; i < segments.length; i++) {\n            if (!NumberUtils.isUint32(parseInt(segments[i]))) return false;\n        }\n\n        return true;\n    }\n\n    derivePath(path: string): ExtendedPrivateKey {\n        if (!ExtendedPrivateKey.isValidPath(path)) throw new Error('Invalid path');\n\n        let extendedKey: ExtendedPrivateKey = this;\n        const segments = path.split('/');\n        for (let i = 1; i < segments.length; i++) {\n            const index = parseInt(segments[i]);\n            extendedKey = extendedKey.derive(index);\n        }\n        return extendedKey;\n    }\n\n    static derivePathFromSeed(path: string, seed: Uint8Array): ExtendedPrivateKey {\n        let extendedKey = ExtendedPrivateKey.generateMasterKey(seed);\n        return extendedKey.derivePath(path);\n    }\n\n    static unserialize(buf: SerialBuffer): ExtendedPrivateKey {\n        const privateKey = PrivateKey.unserialize(buf);\n        const chainCode = buf.read(ExtendedPrivateKey.CHAIN_CODE_SIZE);\n        return new ExtendedPrivateKey(privateKey, chainCode);\n    }\n\n    serialize(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._key.serialize(buf);\n        buf.write(this._chainCode);\n        return buf;\n    }\n\n    get serializedSize(): number {\n        return this._key.serializedSize + ExtendedPrivateKey.CHAIN_CODE_SIZE;\n    }\n\n    override equals(o: unknown): boolean {\n        return o instanceof ExtendedPrivateKey && super.equals(o);\n    }\n\n    get privateKey(): PrivateKey {\n        return this._key;\n    }\n\n    toAddress(): Address {\n        return PublicKey.derive(this._key).toAddress();\n    }\n}\n","import { BufferUtils } from \"./BufferUtils\";\nimport { CRC8 } from \"./CRC8\";\nimport { CryptoUtils } from \"./CryptoUtils\";\nimport { Entropy } from \"./Entropy\";\nimport { ExtendedPrivateKey } from \"./ExtendedPrivateKey\";\nimport { Hash } from \"./Hash\";\nimport { NumberUtils } from \"./NumberUtils\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { StringUtils } from \"./StringUtils\";\n\nclass MnemonicUtils {\n    // Adapted from https://github.com/bitcoinjs/bip39, see license below.\n\n    static ENGLISH_WORDLIST: string[];\n    static DEFAULT_WORDLIST: string[];\n\n    private static _crcChecksum(entropy: Uint8Array): string {\n        const ENT = entropy.length * 8;\n        const CS = ENT / 32;\n        const hash = CRC8.compute(entropy);\n\n        return BufferUtils.toBinary([hash]).slice(0, CS);\n    }\n\n    private static _sha256Checksum(entropy: Uint8Array): string {\n        const ENT = entropy.length * 8;\n        const CS = ENT / 32;\n        const hash = Hash.computeSha256(entropy);\n\n        return BufferUtils.toBinary(hash).slice(0, CS);\n    }\n\n    private static _entropyToBits(entropy: Uint8Array): string {\n        // 128 <= ENT <= 256\n        if (entropy.length < 16) throw new Error('Invalid key, length < 16');\n        if (entropy.length > 32) throw new Error('Invalid key, length > 32');\n        if (entropy.length % 4 !== 0) throw new Error('Invalid key, length % 4 != 0');\n\n        return BufferUtils.toBinary(entropy);\n    }\n\n    private static _normalizeEntropy(entropy: string | ArrayBuffer | Uint8Array | Entropy): Uint8Array {\n        let normalized: Uint8Array;\n        if (typeof entropy === 'string') normalized = BufferUtils.fromHex(entropy);\n        else if (entropy instanceof Entropy) normalized = entropy.serialize();\n        else if (entropy instanceof ArrayBuffer) normalized = new Uint8Array(entropy);\n        else normalized = entropy\n        return normalized;\n    }\n\n    private static _bitsToMnemonic(bits: string, wordlist: string[]): string[] {\n        const chunks = bits.match(/(.{11})/g);\n        if (!chunks) throw new Error('Invalid bits, less than 11 characters');\n        const words = chunks.map(chunk => {\n            const index = NumberUtils.fromBinary(chunk);\n            return wordlist[index];\n        });\n\n        return words;\n    }\n\n    private static _mnemonicToBits(mnemonic: string[], wordlist: string[]): string {\n        const words = mnemonic;\n        if (words.length < 12) throw new Error('Invalid mnemonic, less than 12 words');\n        if (words.length > 24) throw new Error('Invalid mnemonic, more than 24 words');\n        if (words.length % 3 !== 0) throw new Error('Invalid mnemonic, words % 3 != 0');\n\n        // Convert word indices to 11 bit binary strings\n        const bits = words.map(function (word) {\n            const index = wordlist.indexOf(word.toLowerCase());\n            if (index === -1) throw new Error(`Invalid mnemonic, word >${word}< is not in wordlist`);\n\n            return StringUtils.lpad(index.toString(2), '0', 11);\n        }).join('');\n\n        return bits;\n    }\n\n    private static _bitsToEntropy(bits: string, legacy: boolean = false): Uint8Array {\n        // Split the binary string into ENT/CS\n        const dividerIndex = bits.length - (bits.length % 8 || 8);\n        const entropyBits = bits.slice(0, dividerIndex);\n        const checksumBits = bits.slice(dividerIndex);\n\n        // Calculate the checksum and compare\n        const chunks = entropyBits.match(/(.{8})/g);\n        if (!chunks) throw new Error('Invalid entropyBits, less than 8 characters');\n        const entropyBytes = chunks.map(NumberUtils.fromBinary);\n\n        if (entropyBytes.length < 16) throw new Error('Invalid generated key, length < 16');\n        if (entropyBytes.length > 32) throw new Error('Invalid generated key, length > 32');\n        if (entropyBytes.length % 4 !== 0) throw new Error('Invalid generated key, length % 4 != 0');\n\n        const entropy = new Uint8Array(entropyBytes);\n        const checksum = legacy ? MnemonicUtils._crcChecksum(entropy) : MnemonicUtils._sha256Checksum(entropy);\n        if (checksum !== checksumBits) throw new Error('Invalid checksum');\n\n        return entropy;\n    }\n\n    static entropyToMnemonic(entropy: string | ArrayBuffer | Uint8Array | Entropy, wordlist?: string[]): string[] {\n        wordlist = wordlist || MnemonicUtils.DEFAULT_WORDLIST;\n        const normalized = MnemonicUtils._normalizeEntropy(entropy);\n\n        const entropyBits = MnemonicUtils._entropyToBits(normalized);\n        const checksumBits = MnemonicUtils._sha256Checksum(normalized);\n\n        const bits = entropyBits + checksumBits;\n        return MnemonicUtils._bitsToMnemonic(bits, wordlist);\n    }\n\n    /** @deprecated */\n    static entropyToLegacyMnemonic(entropy: string | ArrayBuffer | Uint8Array | Entropy, wordlist?: string[]): string[] {\n        wordlist = wordlist || MnemonicUtils.DEFAULT_WORDLIST;\n        const normalized = MnemonicUtils._normalizeEntropy(entropy);\n\n        const entropyBits = MnemonicUtils._entropyToBits(normalized);\n        const checksumBits = MnemonicUtils._crcChecksum(normalized);\n\n        const bits = entropyBits + checksumBits;\n        return MnemonicUtils._bitsToMnemonic(bits, wordlist);\n    }\n\n    static mnemonicToEntropy(mnemonic: string[] | string, wordlist?: string[]): Entropy {\n        if (!Array.isArray(mnemonic)) mnemonic = mnemonic.trim().split(/\\s+/g);\n        wordlist = wordlist || MnemonicUtils.DEFAULT_WORDLIST;\n\n        const bits = MnemonicUtils._mnemonicToBits(mnemonic, wordlist);\n        return new Entropy(MnemonicUtils._bitsToEntropy(bits, false));\n    }\n\n    /** @deprecated */\n    static legacyMnemonicToEntropy(mnemonic: string[] | string, wordlist?: string[]): Entropy {\n        if (!Array.isArray(mnemonic)) mnemonic = mnemonic.trim().split(/\\s+/g);\n        wordlist = wordlist || MnemonicUtils.DEFAULT_WORDLIST;\n\n        const bits = MnemonicUtils._mnemonicToBits(mnemonic, wordlist);\n        return new Entropy(MnemonicUtils._bitsToEntropy(bits, true));\n    }\n\n    private static _salt(password?: string): string {\n        return `mnemonic${password || ''}`;\n    }\n\n    static mnemonicToSeed(mnemonic: string[] | string, password?: string): SerialBuffer {\n        if (Array.isArray(mnemonic)) mnemonic = mnemonic.join(' ');\n\n        const mnemonicBuffer = BufferUtils.fromAscii(mnemonic);\n        const saltBuffer = BufferUtils.fromAscii(MnemonicUtils._salt(password));\n\n        return CryptoUtils.computePBKDF2sha512(mnemonicBuffer, saltBuffer, 2048, 64);\n    }\n\n    static mnemonicToExtendedPrivateKey(mnemonic: string[] | string, password?: string): ExtendedPrivateKey {\n        const seed = MnemonicUtils.mnemonicToSeed(mnemonic, password);\n        return ExtendedPrivateKey.generateMasterKey(seed);\n    }\n\n    static isCollidingChecksum(entropy: Entropy): boolean {\n        const normalizedEntropy = MnemonicUtils._normalizeEntropy(entropy);\n        return MnemonicUtils._crcChecksum(normalizedEntropy) === MnemonicUtils._sha256Checksum(normalizedEntropy);\n    }\n\n    static getMnemonicType(mnemonic: string[] | string, wordlist?: string[]): MnemonicUtils.MnemonicType {\n        if (!Array.isArray(mnemonic)) mnemonic = mnemonic.trim().split(/\\s+/g);\n\n        wordlist = wordlist || MnemonicUtils.DEFAULT_WORDLIST;\n\n        const bits = MnemonicUtils._mnemonicToBits(mnemonic, wordlist);\n\n        let isBIP39 = true;\n        try { MnemonicUtils._bitsToEntropy(bits, false); } catch (e) { isBIP39 = false; }\n        let isLegacy = true;\n        try { MnemonicUtils._bitsToEntropy(bits, true); } catch (e) { isLegacy = false; }\n\n        if (isBIP39 && isLegacy) return MnemonicUtils.MnemonicType.UNKNOWN;\n        if (!isBIP39 && !isLegacy) throw new Error('Invalid checksum');\n        return isBIP39 ? MnemonicUtils.MnemonicType.BIP39 : MnemonicUtils.MnemonicType.LEGACY;\n    }\n}\n\nMnemonicUtils.ENGLISH_WORDLIST = ['abandon', 'ability', 'able', 'about', 'above', 'absent', 'absorb', 'abstract', 'absurd', 'abuse', 'access', 'accident', 'account', 'accuse', 'achieve', 'acid', 'acoustic', 'acquire', 'across', 'act', 'action', 'actor', 'actress', 'actual', 'adapt', 'add', 'addict', 'address', 'adjust', 'admit', 'adult', 'advance', 'advice', 'aerobic', 'affair', 'afford', 'afraid', 'again', 'age', 'agent', 'agree', 'ahead', 'aim', 'air', 'airport', 'aisle', 'alarm', 'album', 'alcohol', 'alert', 'alien', 'all', 'alley', 'allow', 'almost', 'alone', 'alpha', 'already', 'also', 'alter', 'always', 'amateur', 'amazing', 'among', 'amount', 'amused', 'analyst', 'anchor', 'ancient', 'anger', 'angle', 'angry', 'animal', 'ankle', 'announce', 'annual', 'another', 'answer', 'antenna', 'antique', 'anxiety', 'any', 'apart', 'apology', 'appear', 'apple', 'approve', 'april', 'arch', 'arctic', 'area', 'arena', 'argue', 'arm', 'armed', 'armor', 'army', 'around', 'arrange', 'arrest', 'arrive', 'arrow', 'art', 'artefact', 'artist', 'artwork', 'ask', 'aspect', 'assault', 'asset', 'assist', 'assume', 'asthma', 'athlete', 'atom', 'attack', 'attend', 'attitude', 'attract', 'auction', 'audit', 'august', 'aunt', 'author', 'auto', 'autumn', 'average', 'avocado', 'avoid', 'awake', 'aware', 'away', 'awesome', 'awful', 'awkward', 'axis', 'baby', 'bachelor', 'bacon', 'badge', 'bag', 'balance', 'balcony', 'ball', 'bamboo', 'banana', 'banner', 'bar', 'barely', 'bargain', 'barrel', 'base', 'basic', 'basket', 'battle', 'beach', 'bean', 'beauty', 'because', 'become', 'beef', 'before', 'begin', 'behave', 'behind', 'believe', 'below', 'belt', 'bench', 'benefit', 'best', 'betray', 'better', 'between', 'beyond', 'bicycle', 'bid', 'bike', 'bind', 'biology', 'bird', 'birth', 'bitter', 'black', 'blade', 'blame', 'blanket', 'blast', 'bleak', 'bless', 'blind', 'blood', 'blossom', 'blouse', 'blue', 'blur', 'blush', 'board', 'boat', 'body', 'boil', 'bomb', 'bone', 'bonus', 'book', 'boost', 'border', 'boring', 'borrow', 'boss', 'bottom', 'bounce', 'box', 'boy', 'bracket', 'brain', 'brand', 'brass', 'brave', 'bread', 'breeze', 'brick', 'bridge', 'brief', 'bright', 'bring', 'brisk', 'broccoli', 'broken', 'bronze', 'broom', 'brother', 'brown', 'brush', 'bubble', 'buddy', 'budget', 'buffalo', 'build', 'bulb', 'bulk', 'bullet', 'bundle', 'bunker', 'burden', 'burger', 'burst', 'bus', 'business', 'busy', 'butter', 'buyer', 'buzz', 'cabbage', 'cabin', 'cable', 'cactus', 'cage', 'cake', 'call', 'calm', 'camera', 'camp', 'can', 'canal', 'cancel', 'candy', 'cannon', 'canoe', 'canvas', 'canyon', 'capable', 'capital', 'captain', 'car', 'carbon', 'card', 'cargo', 'carpet', 'carry', 'cart', 'case', 'cash', 'casino', 'castle', 'casual', 'cat', 'catalog', 'catch', 'category', 'cattle', 'caught', 'cause', 'caution', 'cave', 'ceiling', 'celery', 'cement', 'census', 'century', 'cereal', 'certain', 'chair', 'chalk', 'champion', 'change', 'chaos', 'chapter', 'charge', 'chase', 'chat', 'cheap', 'check', 'cheese', 'chef', 'cherry', 'chest', 'chicken', 'chief', 'child', 'chimney', 'choice', 'choose', 'chronic', 'chuckle', 'chunk', 'churn', 'cigar', 'cinnamon', 'circle', 'citizen', 'city', 'civil', 'claim', 'clap', 'clarify', 'claw', 'clay', 'clean', 'clerk', 'clever', 'click', 'client', 'cliff', 'climb', 'clinic', 'clip', 'clock', 'clog', 'close', 'cloth', 'cloud', 'clown', 'club', 'clump', 'cluster', 'clutch', 'coach', 'coast', 'coconut', 'code', 'coffee', 'coil', 'coin', 'collect', 'color', 'column', 'combine', 'come', 'comfort', 'comic', 'common', 'company', 'concert', 'conduct', 'confirm', 'congress', 'connect', 'consider', 'control', 'convince', 'cook', 'cool', 'copper', 'copy', 'coral', 'core', 'corn', 'correct', 'cost', 'cotton', 'couch', 'country', 'couple', 'course', 'cousin', 'cover', 'coyote', 'crack', 'cradle', 'craft', 'cram', 'crane', 'crash', 'crater', 'crawl', 'crazy', 'cream', 'credit', 'creek', 'crew', 'cricket', 'crime', 'crisp', 'critic', 'crop', 'cross', 'crouch', 'crowd', 'crucial', 'cruel', 'cruise', 'crumble', 'crunch', 'crush', 'cry', 'crystal', 'cube', 'culture', 'cup', 'cupboard', 'curious', 'current', 'curtain', 'curve', 'cushion', 'custom', 'cute', 'cycle', 'dad', 'damage', 'damp', 'dance', 'danger', 'daring', 'dash', 'daughter', 'dawn', 'day', 'deal', 'debate', 'debris', 'decade', 'december', 'decide', 'decline', 'decorate', 'decrease', 'deer', 'defense', 'define', 'defy', 'degree', 'delay', 'deliver', 'demand', 'demise', 'denial', 'dentist', 'deny', 'depart', 'depend', 'deposit', 'depth', 'deputy', 'derive', 'describe', 'desert', 'design', 'desk', 'despair', 'destroy', 'detail', 'detect', 'develop', 'device', 'devote', 'diagram', 'dial', 'diamond', 'diary', 'dice', 'diesel', 'diet', 'differ', 'digital', 'dignity', 'dilemma', 'dinner', 'dinosaur', 'direct', 'dirt', 'disagree', 'discover', 'disease', 'dish', 'dismiss', 'disorder', 'display', 'distance', 'divert', 'divide', 'divorce', 'dizzy', 'doctor', 'document', 'dog', 'doll', 'dolphin', 'domain', 'donate', 'donkey', 'donor', 'door', 'dose', 'double', 'dove', 'draft', 'dragon', 'drama', 'drastic', 'draw', 'dream', 'dress', 'drift', 'drill', 'drink', 'drip', 'drive', 'drop', 'drum', 'dry', 'duck', 'dumb', 'dune', 'during', 'dust', 'dutch', 'duty', 'dwarf', 'dynamic', 'eager', 'eagle', 'early', 'earn', 'earth', 'easily', 'east', 'easy', 'echo', 'ecology', 'economy', 'edge', 'edit', 'educate', 'effort', 'egg', 'eight', 'either', 'elbow', 'elder', 'electric', 'elegant', 'element', 'elephant', 'elevator', 'elite', 'else', 'embark', 'embody', 'embrace', 'emerge', 'emotion', 'employ', 'empower', 'empty', 'enable', 'enact', 'end', 'endless', 'endorse', 'enemy', 'energy', 'enforce', 'engage', 'engine', 'enhance', 'enjoy', 'enlist', 'enough', 'enrich', 'enroll', 'ensure', 'enter', 'entire', 'entry', 'envelope', 'episode', 'equal', 'equip', 'era', 'erase', 'erode', 'erosion', 'error', 'erupt', 'escape', 'essay', 'essence', 'estate', 'eternal', 'ethics', 'evidence', 'evil', 'evoke', 'evolve', 'exact', 'example', 'excess', 'exchange', 'excite', 'exclude', 'excuse', 'execute', 'exercise', 'exhaust', 'exhibit', 'exile', 'exist', 'exit', 'exotic', 'expand', 'expect', 'expire', 'explain', 'expose', 'express', 'extend', 'extra', 'eye', 'eyebrow', 'fabric', 'face', 'faculty', 'fade', 'faint', 'faith', 'fall', 'false', 'fame', 'family', 'famous', 'fan', 'fancy', 'fantasy', 'farm', 'fashion', 'fat', 'fatal', 'father', 'fatigue', 'fault', 'favorite', 'feature', 'february', 'federal', 'fee', 'feed', 'feel', 'female', 'fence', 'festival', 'fetch', 'fever', 'few', 'fiber', 'fiction', 'field', 'figure', 'file', 'film', 'filter', 'final', 'find', 'fine', 'finger', 'finish', 'fire', 'firm', 'first', 'fiscal', 'fish', 'fit', 'fitness', 'fix', 'flag', 'flame', 'flash', 'flat', 'flavor', 'flee', 'flight', 'flip', 'float', 'flock', 'floor', 'flower', 'fluid', 'flush', 'fly', 'foam', 'focus', 'fog', 'foil', 'fold', 'follow', 'food', 'foot', 'force', 'forest', 'forget', 'fork', 'fortune', 'forum', 'forward', 'fossil', 'foster', 'found', 'fox', 'fragile', 'frame', 'frequent', 'fresh', 'friend', 'fringe', 'frog', 'front', 'frost', 'frown', 'frozen', 'fruit', 'fuel', 'fun', 'funny', 'furnace', 'fury', 'future', 'gadget', 'gain', 'galaxy', 'gallery', 'game', 'gap', 'garage', 'garbage', 'garden', 'garlic', 'garment', 'gas', 'gasp', 'gate', 'gather', 'gauge', 'gaze', 'general', 'genius', 'genre', 'gentle', 'genuine', 'gesture', 'ghost', 'giant', 'gift', 'giggle', 'ginger', 'giraffe', 'girl', 'give', 'glad', 'glance', 'glare', 'glass', 'glide', 'glimpse', 'globe', 'gloom', 'glory', 'glove', 'glow', 'glue', 'goat', 'goddess', 'gold', 'good', 'goose', 'gorilla', 'gospel', 'gossip', 'govern', 'gown', 'grab', 'grace', 'grain', 'grant', 'grape', 'grass', 'gravity', 'great', 'green', 'grid', 'grief', 'grit', 'grocery', 'group', 'grow', 'grunt', 'guard', 'guess', 'guide', 'guilt', 'guitar', 'gun', 'gym', 'habit', 'hair', 'half', 'hammer', 'hamster', 'hand', 'happy', 'harbor', 'hard', 'harsh', 'harvest', 'hat', 'have', 'hawk', 'hazard', 'head', 'health', 'heart', 'heavy', 'hedgehog', 'height', 'hello', 'helmet', 'help', 'hen', 'hero', 'hidden', 'high', 'hill', 'hint', 'hip', 'hire', 'history', 'hobby', 'hockey', 'hold', 'hole', 'holiday', 'hollow', 'home', 'honey', 'hood', 'hope', 'horn', 'horror', 'horse', 'hospital', 'host', 'hotel', 'hour', 'hover', 'hub', 'huge', 'human', 'humble', 'humor', 'hundred', 'hungry', 'hunt', 'hurdle', 'hurry', 'hurt', 'husband', 'hybrid', 'ice', 'icon', 'idea', 'identify', 'idle', 'ignore', 'ill', 'illegal', 'illness', 'image', 'imitate', 'immense', 'immune', 'impact', 'impose', 'improve', 'impulse', 'inch', 'include', 'income', 'increase', 'index', 'indicate', 'indoor', 'industry', 'infant', 'inflict', 'inform', 'inhale', 'inherit', 'initial', 'inject', 'injury', 'inmate', 'inner', 'innocent', 'input', 'inquiry', 'insane', 'insect', 'inside', 'inspire', 'install', 'intact', 'interest', 'into', 'invest', 'invite', 'involve', 'iron', 'island', 'isolate', 'issue', 'item', 'ivory', 'jacket', 'jaguar', 'jar', 'jazz', 'jealous', 'jeans', 'jelly', 'jewel', 'job', 'join', 'joke', 'journey', 'joy', 'judge', 'juice', 'jump', 'jungle', 'junior', 'junk', 'just', 'kangaroo', 'keen', 'keep', 'ketchup', 'key', 'kick', 'kid', 'kidney', 'kind', 'kingdom', 'kiss', 'kit', 'kitchen', 'kite', 'kitten', 'kiwi', 'knee', 'knife', 'knock', 'know', 'lab', 'label', 'labor', 'ladder', 'lady', 'lake', 'lamp', 'language', 'laptop', 'large', 'later', 'latin', 'laugh', 'laundry', 'lava', 'law', 'lawn', 'lawsuit', 'layer', 'lazy', 'leader', 'leaf', 'learn', 'leave', 'lecture', 'left', 'leg', 'legal', 'legend', 'leisure', 'lemon', 'lend', 'length', 'lens', 'leopard', 'lesson', 'letter', 'level', 'liar', 'liberty', 'library', 'license', 'life', 'lift', 'light', 'like', 'limb', 'limit', 'link', 'lion', 'liquid', 'list', 'little', 'live', 'lizard', 'load', 'loan', 'lobster', 'local', 'lock', 'logic', 'lonely', 'long', 'loop', 'lottery', 'loud', 'lounge', 'love', 'loyal', 'lucky', 'luggage', 'lumber', 'lunar', 'lunch', 'luxury', 'lyrics', 'machine', 'mad', 'magic', 'magnet', 'maid', 'mail', 'main', 'major', 'make', 'mammal', 'man', 'manage', 'mandate', 'mango', 'mansion', 'manual', 'maple', 'marble', 'march', 'margin', 'marine', 'market', 'marriage', 'mask', 'mass', 'master', 'match', 'material', 'math', 'matrix', 'matter', 'maximum', 'maze', 'meadow', 'mean', 'measure', 'meat', 'mechanic', 'medal', 'media', 'melody', 'melt', 'member', 'memory', 'mention', 'menu', 'mercy', 'merge', 'merit', 'merry', 'mesh', 'message', 'metal', 'method', 'middle', 'midnight', 'milk', 'million', 'mimic', 'mind', 'minimum', 'minor', 'minute', 'miracle', 'mirror', 'misery', 'miss', 'mistake', 'mix', 'mixed', 'mixture', 'mobile', 'model', 'modify', 'mom', 'moment', 'monitor', 'monkey', 'monster', 'month', 'moon', 'moral', 'more', 'morning', 'mosquito', 'mother', 'motion', 'motor', 'mountain', 'mouse', 'move', 'movie', 'much', 'muffin', 'mule', 'multiply', 'muscle', 'museum', 'mushroom', 'music', 'must', 'mutual', 'myself', 'mystery', 'myth', 'naive', 'name', 'napkin', 'narrow', 'nasty', 'nation', 'nature', 'near', 'neck', 'need', 'negative', 'neglect', 'neither', 'nephew', 'nerve', 'nest', 'net', 'network', 'neutral', 'never', 'news', 'next', 'nice', 'night', 'noble', 'noise', 'nominee', 'noodle', 'normal', 'north', 'nose', 'notable', 'note', 'nothing', 'notice', 'novel', 'now', 'nuclear', 'number', 'nurse', 'nut', 'oak', 'obey', 'object', 'oblige', 'obscure', 'observe', 'obtain', 'obvious', 'occur', 'ocean', 'october', 'odor', 'off', 'offer', 'office', 'often', 'oil', 'okay', 'old', 'olive', 'olympic', 'omit', 'once', 'one', 'onion', 'online', 'only', 'open', 'opera', 'opinion', 'oppose', 'option', 'orange', 'orbit', 'orchard', 'order', 'ordinary', 'organ', 'orient', 'original', 'orphan', 'ostrich', 'other', 'outdoor', 'outer', 'output', 'outside', 'oval', 'oven', 'over', 'own', 'owner', 'oxygen', 'oyster', 'ozone', 'pact', 'paddle', 'page', 'pair', 'palace', 'palm', 'panda', 'panel', 'panic', 'panther', 'paper', 'parade', 'parent', 'park', 'parrot', 'party', 'pass', 'patch', 'path', 'patient', 'patrol', 'pattern', 'pause', 'pave', 'payment', 'peace', 'peanut', 'pear', 'peasant', 'pelican', 'pen', 'penalty', 'pencil', 'people', 'pepper', 'perfect', 'permit', 'person', 'pet', 'phone', 'photo', 'phrase', 'physical', 'piano', 'picnic', 'picture', 'piece', 'pig', 'pigeon', 'pill', 'pilot', 'pink', 'pioneer', 'pipe', 'pistol', 'pitch', 'pizza', 'place', 'planet', 'plastic', 'plate', 'play', 'please', 'pledge', 'pluck', 'plug', 'plunge', 'poem', 'poet', 'point', 'polar', 'pole', 'police', 'pond', 'pony', 'pool', 'popular', 'portion', 'position', 'possible', 'post', 'potato', 'pottery', 'poverty', 'powder', 'power', 'practice', 'praise', 'predict', 'prefer', 'prepare', 'present', 'pretty', 'prevent', 'price', 'pride', 'primary', 'print', 'priority', 'prison', 'private', 'prize', 'problem', 'process', 'produce', 'profit', 'program', 'project', 'promote', 'proof', 'property', 'prosper', 'protect', 'proud', 'provide', 'public', 'pudding', 'pull', 'pulp', 'pulse', 'pumpkin', 'punch', 'pupil', 'puppy', 'purchase', 'purity', 'purpose', 'purse', 'push', 'put', 'puzzle', 'pyramid', 'quality', 'quantum', 'quarter', 'question', 'quick', 'quit', 'quiz', 'quote', 'rabbit', 'raccoon', 'race', 'rack', 'radar', 'radio', 'rail', 'rain', 'raise', 'rally', 'ramp', 'ranch', 'random', 'range', 'rapid', 'rare', 'rate', 'rather', 'raven', 'raw', 'razor', 'ready', 'real', 'reason', 'rebel', 'rebuild', 'recall', 'receive', 'recipe', 'record', 'recycle', 'reduce', 'reflect', 'reform', 'refuse', 'region', 'regret', 'regular', 'reject', 'relax', 'release', 'relief', 'rely', 'remain', 'remember', 'remind', 'remove', 'render', 'renew', 'rent', 'reopen', 'repair', 'repeat', 'replace', 'report', 'require', 'rescue', 'resemble', 'resist', 'resource', 'response', 'result', 'retire', 'retreat', 'return', 'reunion', 'reveal', 'review', 'reward', 'rhythm', 'rib', 'ribbon', 'rice', 'rich', 'ride', 'ridge', 'rifle', 'right', 'rigid', 'ring', 'riot', 'ripple', 'risk', 'ritual', 'rival', 'river', 'road', 'roast', 'robot', 'robust', 'rocket', 'romance', 'roof', 'rookie', 'room', 'rose', 'rotate', 'rough', 'round', 'route', 'royal', 'rubber', 'rude', 'rug', 'rule', 'run', 'runway', 'rural', 'sad', 'saddle', 'sadness', 'safe', 'sail', 'salad', 'salmon', 'salon', 'salt', 'salute', 'same', 'sample', 'sand', 'satisfy', 'satoshi', 'sauce', 'sausage', 'save', 'say', 'scale', 'scan', 'scare', 'scatter', 'scene', 'scheme', 'school', 'science', 'scissors', 'scorpion', 'scout', 'scrap', 'screen', 'script', 'scrub', 'sea', 'search', 'season', 'seat', 'second', 'secret', 'section', 'security', 'seed', 'seek', 'segment', 'select', 'sell', 'seminar', 'senior', 'sense', 'sentence', 'series', 'service', 'session', 'settle', 'setup', 'seven', 'shadow', 'shaft', 'shallow', 'share', 'shed', 'shell', 'sheriff', 'shield', 'shift', 'shine', 'ship', 'shiver', 'shock', 'shoe', 'shoot', 'shop', 'short', 'shoulder', 'shove', 'shrimp', 'shrug', 'shuffle', 'shy', 'sibling', 'sick', 'side', 'siege', 'sight', 'sign', 'silent', 'silk', 'silly', 'silver', 'similar', 'simple', 'since', 'sing', 'siren', 'sister', 'situate', 'six', 'size', 'skate', 'sketch', 'ski', 'skill', 'skin', 'skirt', 'skull', 'slab', 'slam', 'sleep', 'slender', 'slice', 'slide', 'slight', 'slim', 'slogan', 'slot', 'slow', 'slush', 'small', 'smart', 'smile', 'smoke', 'smooth', 'snack', 'snake', 'snap', 'sniff', 'snow', 'soap', 'soccer', 'social', 'sock', 'soda', 'soft', 'solar', 'soldier', 'solid', 'solution', 'solve', 'someone', 'song', 'soon', 'sorry', 'sort', 'soul', 'sound', 'soup', 'source', 'south', 'space', 'spare', 'spatial', 'spawn', 'speak', 'special', 'speed', 'spell', 'spend', 'sphere', 'spice', 'spider', 'spike', 'spin', 'spirit', 'split', 'spoil', 'sponsor', 'spoon', 'sport', 'spot', 'spray', 'spread', 'spring', 'spy', 'square', 'squeeze', 'squirrel', 'stable', 'stadium', 'staff', 'stage', 'stairs', 'stamp', 'stand', 'start', 'state', 'stay', 'steak', 'steel', 'stem', 'step', 'stereo', 'stick', 'still', 'sting', 'stock', 'stomach', 'stone', 'stool', 'story', 'stove', 'strategy', 'street', 'strike', 'strong', 'struggle', 'student', 'stuff', 'stumble', 'style', 'subject', 'submit', 'subway', 'success', 'such', 'sudden', 'suffer', 'sugar', 'suggest', 'suit', 'summer', 'sun', 'sunny', 'sunset', 'super', 'supply', 'supreme', 'sure', 'surface', 'surge', 'surprise', 'surround', 'survey', 'suspect', 'sustain', 'swallow', 'swamp', 'swap', 'swarm', 'swear', 'sweet', 'swift', 'swim', 'swing', 'switch', 'sword', 'symbol', 'symptom', 'syrup', 'system', 'table', 'tackle', 'tag', 'tail', 'talent', 'talk', 'tank', 'tape', 'target', 'task', 'taste', 'tattoo', 'taxi', 'teach', 'team', 'tell', 'ten', 'tenant', 'tennis', 'tent', 'term', 'test', 'text', 'thank', 'that', 'theme', 'then', 'theory', 'there', 'they', 'thing', 'this', 'thought', 'three', 'thrive', 'throw', 'thumb', 'thunder', 'ticket', 'tide', 'tiger', 'tilt', 'timber', 'time', 'tiny', 'tip', 'tired', 'tissue', 'title', 'toast', 'tobacco', 'today', 'toddler', 'toe', 'together', 'toilet', 'token', 'tomato', 'tomorrow', 'tone', 'tongue', 'tonight', 'tool', 'tooth', 'top', 'topic', 'topple', 'torch', 'tornado', 'tortoise', 'toss', 'total', 'tourist', 'toward', 'tower', 'town', 'toy', 'track', 'trade', 'traffic', 'tragic', 'train', 'transfer', 'trap', 'trash', 'travel', 'tray', 'treat', 'tree', 'trend', 'trial', 'tribe', 'trick', 'trigger', 'trim', 'trip', 'trophy', 'trouble', 'truck', 'true', 'truly', 'trumpet', 'trust', 'truth', 'try', 'tube', 'tuition', 'tumble', 'tuna', 'tunnel', 'turkey', 'turn', 'turtle', 'twelve', 'twenty', 'twice', 'twin', 'twist', 'two', 'type', 'typical', 'ugly', 'umbrella', 'unable', 'unaware', 'uncle', 'uncover', 'under', 'undo', 'unfair', 'unfold', 'unhappy', 'uniform', 'unique', 'unit', 'universe', 'unknown', 'unlock', 'until', 'unusual', 'unveil', 'update', 'upgrade', 'uphold', 'upon', 'upper', 'upset', 'urban', 'urge', 'usage', 'use', 'used', 'useful', 'useless', 'usual', 'utility', 'vacant', 'vacuum', 'vague', 'valid', 'valley', 'valve', 'van', 'vanish', 'vapor', 'various', 'vast', 'vault', 'vehicle', 'velvet', 'vendor', 'venture', 'venue', 'verb', 'verify', 'version', 'very', 'vessel', 'veteran', 'viable', 'vibrant', 'vicious', 'victory', 'video', 'view', 'village', 'vintage', 'violin', 'virtual', 'virus', 'visa', 'visit', 'visual', 'vital', 'vivid', 'vocal', 'voice', 'void', 'volcano', 'volume', 'vote', 'voyage', 'wage', 'wagon', 'wait', 'walk', 'wall', 'walnut', 'want', 'warfare', 'warm', 'warrior', 'wash', 'wasp', 'waste', 'water', 'wave', 'way', 'wealth', 'weapon', 'wear', 'weasel', 'weather', 'web', 'wedding', 'weekend', 'weird', 'welcome', 'west', 'wet', 'whale', 'what', 'wheat', 'wheel', 'when', 'where', 'whip', 'whisper', 'wide', 'width', 'wife', 'wild', 'will', 'win', 'window', 'wine', 'wing', 'wink', 'winner', 'winter', 'wire', 'wisdom', 'wise', 'wish', 'witness', 'wolf', 'woman', 'wonder', 'wood', 'wool', 'word', 'work', 'world', 'worry', 'worth', 'wrap', 'wreck', 'wrestle', 'wrist', 'write', 'wrong', 'yard', 'year', 'yellow', 'you', 'young', 'youth', 'zebra', 'zero', 'zone', 'zoo'];\nMnemonicUtils.DEFAULT_WORDLIST = MnemonicUtils.ENGLISH_WORDLIST;\n\nnamespace MnemonicUtils {\n    export enum MnemonicType {\n        UNKNOWN = -1,\n        LEGACY = 0,\n        BIP39 = 1,\n    }\n}\n\nObject.freeze(MnemonicUtils);\n\nexport { MnemonicUtils };\n\n/*\nbitcoinjs/bip39 LICENSE\nCopyright (c) 2014, Wei Lu <luwei.here@gmail.com> and Daniel Cousens <email@dcousens.com>\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\n","import { CryptoUtils } from \"./CryptoUtils\";\nimport { ExtendedPrivateKey } from \"./ExtendedPrivateKey\";\nimport { MnemonicUtils } from \"./MnemonicUtils\";\nimport { Secret } from \"./Secret\";\nimport { SerialBuffer } from \"./SerialBuffer\";\n\nexport class Entropy extends Secret {\n    static override SIZE = Secret.SIZE;\n    static PURPOSE_ID = 0x42000002;\n\n    private _obj: Uint8Array;\n\n    constructor(arg: Uint8Array) {\n        super(Secret.Type.ENTROPY, Entropy.PURPOSE_ID);\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Entropy.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    static generate(): Entropy {\n        const entropy = new Uint8Array(Entropy.SIZE);\n        CryptoUtils.getRandomValues(entropy);\n        return new Entropy(entropy);\n    }\n\n    toExtendedPrivateKey(password?: string, wordlist?: string[]): ExtendedPrivateKey {\n        return MnemonicUtils.mnemonicToExtendedPrivateKey(this.toMnemonic(wordlist), password);\n    }\n\n    toMnemonic(wordlist?: string[]): string[] {\n        return MnemonicUtils.entropyToMnemonic(this, wordlist);\n    }\n\n    static unserialize(buf: SerialBuffer): Entropy {\n        return new Entropy(buf.read(Entropy.SIZE));\n    }\n\n    serialize(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    get serializedSize(): number {\n        return Entropy.SIZE;\n    }\n\n    /**\n     * Overwrite this entropy with a replacement in-memory\n     */\n    overwrite(entropy: Entropy): void {\n        this._obj.set(entropy._obj);\n    }\n\n    override equals(o: unknown): boolean {\n        return o instanceof Entropy && super.equals(o);\n    }\n}\n","import { BufferUtils } from \"./BufferUtils\";\nimport { CryptoUtils } from \"./CryptoUtils\";\nimport { PrivateKey } from \"./PrivateKey\";\nimport { PublicKey } from \"./PublicKey\";\nimport { Secret } from \"./Secret\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { Serializable } from \"./Serializable\";\n\nexport class KeyPair extends Serializable {\n\tstatic LOCK_KDF_ROUNDS = 256;\n\n    private _locked: boolean;\n    private _lockedInternally: boolean;\n    private _lockSalt: Uint8Array | null;\n    private _publicKey: PublicKey;\n\tprivate _internalPrivateKey: PrivateKey;\n\tprivate _unlockedPrivateKey: PrivateKey | null = null;\n\n    constructor(privateKey: PrivateKey, publicKey: PublicKey, locked = false, lockSalt: Uint8Array | null = null) {\n        if (!(privateKey instanceof Object)) throw new Error('Primitive: Invalid type');\n        if (!(publicKey instanceof Object)) throw new Error('Primitive: Invalid type');\n        super();\n\n        this._locked = locked;\n        this._lockedInternally = locked;\n        this._lockSalt = lockSalt;\n        this._publicKey = publicKey;\n        this._internalPrivateKey = new PrivateKey(privateKey.serialize());\n    }\n\n    static generate(): KeyPair {\n        const privateKey = PrivateKey.generate();\n        return new KeyPair(privateKey, PublicKey.derive(privateKey));\n    }\n\n    static derive(privateKey: PrivateKey): KeyPair {\n        return new KeyPair(privateKey, PublicKey.derive(privateKey));\n    }\n\n    static fromHex(hexBuf: string): KeyPair {\n        return KeyPair.unserialize(BufferUtils.fromHex(hexBuf));\n    }\n\n    static unserialize(buf: SerialBuffer): KeyPair {\n        const privateKey = PrivateKey.unserialize(buf);\n        const publicKey = PublicKey.unserialize(buf);\n        let locked = false;\n        let lockSalt = null;\n        if (buf.readPos < buf.byteLength) {\n            const extra = buf.readUint8();\n            if (extra === 1) {\n                locked = true;\n                lockSalt = buf.read(32);\n            }\n        }\n        return new KeyPair(privateKey, publicKey, locked, lockSalt);\n    }\n\n    serialize(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._privateKey.serialize(buf);\n        this.publicKey.serialize(buf);\n        if (this._locked) {\n            buf.writeUint8(1);\n            buf.write(this._lockSalt!);\n        } else {\n            buf.writeUint8(0);\n        }\n        return buf;\n    }\n\n    /**\n     * The unlocked private key.\n     */\n    get privateKey(): PrivateKey {\n        if (this.isLocked) throw new Error('KeyPair is locked');\n        return this._privateKey;\n    }\n\n    /**\n     * The private key in its current state, i.e., depending on this._locked.\n     * If this._locked, it is the internally locked private key.\n     * If !this._locked, it is either the internally unlocked private key (if !this._lockedInternally)\n     * or this._unlockedPrivateKey.\n     */\n    private get _privateKey(): PrivateKey {\n        return this._unlockedPrivateKey || this._internalPrivateKey;\n    }\n\n    get publicKey(): PublicKey {\n        return this._publicKey;\n    }\n\n    get serializedSize(): number {\n        return this._privateKey.serializedSize + this.publicKey.serializedSize + (this._locked ? this._lockSalt!.byteLength + 1 : 1);\n    }\n\n    async lock(key: Uint8Array, lockSalt?: Uint8Array): Promise<void> {\n        if (this._locked) throw new Error('KeyPair already locked');\n\n        if (lockSalt) this._lockSalt = lockSalt;\n        if (!this._lockSalt || this._lockSalt.length === 0) {\n            this._lockSalt = new Uint8Array(32);\n            CryptoUtils.getRandomValues(this._lockSalt);\n        }\n\n        this._internalPrivateKey.overwrite(await this._otpPrivateKey(key));\n        this._clearUnlockedPrivateKey();\n        this._locked = true;\n        this._lockedInternally = true;\n    }\n\n    async unlock(key: Uint8Array): Promise<void> {\n        if (!this._locked) throw new Error('KeyPair not locked');\n\n        const privateKey = await this._otpPrivateKey(key);\n        const verifyPub = PublicKey.derive(privateKey);\n        if (verifyPub.equals(this.publicKey)) {\n            // Only set this._unlockedPrivateKey but keep this._internalPrivateKey locked\n            this._unlockedPrivateKey = privateKey;\n            this._locked = false;\n        } else {\n            throw new Error('Invalid key');\n        }\n    }\n\n    /**\n     * Destroy cached unlocked private key if the internal key is in locked state.\n     */\n    relock(): void {\n        if (this._locked) throw new Error('KeyPair already locked');\n        if (!this._lockedInternally) throw new Error('KeyPair was never locked');\n        this._clearUnlockedPrivateKey();\n        this._locked = true;\n    }\n\n    private _clearUnlockedPrivateKey() {\n        // If this wallet is not locked internally and unlocked, this method does not have any effect.\n        if (!this._lockedInternally || this._locked) return;\n\n\t\tif (!this._unlockedPrivateKey) throw new Error('No unlocked private key to clear');\n\n        // Overwrite cached key in this._unlockedPrivateKey with 0s.\n        this._unlockedPrivateKey.overwrite(PrivateKey.unserialize(new SerialBuffer(this._unlockedPrivateKey.serializedSize)));\n        // Then, reset it.\n        this._unlockedPrivateKey = null;\n    }\n\n    private async _otpPrivateKey(key: Uint8Array): Promise<PrivateKey> {\n        return new PrivateKey(await CryptoUtils.otpKdfLegacy(this._privateKey.serialize(), key, this._lockSalt!, KeyPair.LOCK_KDF_ROUNDS));\n    }\n\n    get isLocked() {\n        return this._locked;\n    }\n\n    static async fromEncrypted(buf: SerialBuffer, key: Uint8Array): Promise<KeyPair> {\n        const privateKey = await Secret.fromEncrypted(buf, key);\n        if (privateKey.type !== Secret.Type.PRIVATE_KEY) throw new Error('Expected privateKey, got Entropy');\n        return KeyPair.derive(privateKey as PrivateKey);\n    }\n\n    exportEncrypted(key: Uint8Array): Promise<SerialBuffer> {\n        return this._privateKey.exportEncrypted(key);\n    }\n\n    get encryptedSize(): number {\n        return this._privateKey.encryptedSize;\n    }\n\n    override equals(o: unknown): boolean {\n        return o instanceof KeyPair && super.equals(o);\n    }\n}\n","import { BufferUtils } from \"./BufferUtils\";\nimport { Hash } from \"./Hash\";\n\nexport type Hashable = Hash | Uint8Array | { hash: () => Hash } | { serialize: () => Uint8Array };\n\nexport class MerkleTree {\n    static computeRoot<T extends Hashable>(values: T[], fnHash: (o: T) => Hash = MerkleTree.hash): Hash {\n        return MerkleTree._computeRoot(values, fnHash);\n    }\n\n    private static _computeRoot<T>(values: T[], fnHash: (o: T) => Hash): Hash {\n        const len = values.length;\n        if (len === 0) {\n            return Hash.light(new Uint8Array(0));\n        }\n        if (len === 1) {\n            return fnHash(values[0]);\n        }\n\n        const mid = Math.round(len / 2);\n        const left = values.slice(0, mid);\n        const right = values.slice(mid);\n        const leftHash = MerkleTree._computeRoot(left, fnHash);\n        const rightHash = MerkleTree._computeRoot(right, fnHash);\n        return Hash.light(BufferUtils.concatTypedArrays(leftHash.serialize(), rightHash.serialize()));\n    }\n\n    static hash(o: Hashable): Hash {\n        if (o instanceof Hash) {\n            return o;\n        }\n        if ('hash' in o && typeof o.hash === 'function') {\n            return o.hash();\n        }\n        if ('serialize' in o && typeof o.serialize === 'function') {\n            return Hash.light(o.serialize());\n        }\n        if (o instanceof Uint8Array) {\n            return Hash.light(o);\n        }\n        throw new Error('MerkleTree objects must be Uint8Array or have a .hash()/.serialize() method');\n    }\n}\n","import { BufferUtils } from \"./BufferUtils\";\nimport { Hash } from \"./Hash\";\nimport { Hashable, MerkleTree } from \"./MerkleTree\";\nimport { NumberUtils } from \"./NumberUtils\";\nimport { SerialBuffer } from \"./SerialBuffer\";\n\nexport class MerklePath {\n\tprivate _nodes: MerklePathNode[];\n\n    constructor(nodes: MerklePathNode[]) {\n        if (!Array.isArray(nodes) || !NumberUtils.isUint8(nodes.length)\n            || nodes.some(it => !(it instanceof MerklePathNode))) throw new Error('Malformed nodes');\n\n        this._nodes = nodes;\n    }\n\n    static compute<T extends Hashable>(values: T[], leafValue: T, fnHash: (o: T) => Hash = MerkleTree.hash): MerklePath {\n        const leafHash = fnHash(leafValue);\n        const path: MerklePathNode[] = [];\n        MerklePath._compute(values, leafHash, path, fnHash);\n        return new MerklePath(path);\n    }\n\n    private static _compute<T>(values: T[], leafHash: Hash, path: MerklePathNode[], fnHash: (o: T) => Hash): { containsLeaf: boolean, inner: Hash } {\n        const len = values.length;\n        let hash;\n        if (len === 0) {\n            hash = Hash.light(new Uint8Array(0));\n            return {containsLeaf: false, inner: hash};\n        }\n        if (len === 1) {\n            hash = fnHash(values[0]);\n            return {containsLeaf: hash.equals(leafHash), inner: hash};\n        }\n\n        const mid = Math.round(len / 2);\n        const left = values.slice(0, mid);\n        const right = values.slice(mid);\n        const {containsLeaf: leftLeaf, inner: leftHash} = MerklePath._compute(left, leafHash, path, fnHash);\n        const {containsLeaf: rightLeaf, inner: rightHash} = MerklePath._compute(right, leafHash, path, fnHash);\n        hash = Hash.light(BufferUtils.concatTypedArrays(leftHash.serialize(), rightHash.serialize()));\n\n        if (leftLeaf) {\n            path.push(new MerklePathNode(rightHash, false));\n            return {containsLeaf: true, inner: hash};\n        } else if (rightLeaf) {\n            path.push(new MerklePathNode(leftHash, true));\n            return {containsLeaf: true, inner: hash};\n        }\n\n        return {containsLeaf: false, inner: hash};\n    }\n\n    computeRoot<T extends Hashable>(leafValue: T, fnHash: (o: T) => Hash = MerkleTree.hash): Hash {\n        /** @type {Hash} */\n        let root = fnHash(leafValue);\n        for (const node of this._nodes) {\n            const left = node.left;\n            const hash = node.hash;\n            const concat = new SerialBuffer(hash.serializedSize * 2);\n            if (left) hash.serialize(concat);\n            root.serialize(concat);\n            if (!left) hash.serialize(concat);\n            root = Hash.light(concat);\n        }\n        return root;\n    }\n\n    private static _compress(nodes: MerklePathNode[]): Uint8Array {\n        const count = nodes.length;\n        const leftBitsSize = Math.ceil(count / 8);\n        const leftBits = new Uint8Array(leftBitsSize);\n\n        for (let i = 0; i < count; i++) {\n            if (nodes[i].left) {\n                leftBits[Math.floor(i / 8)] |= 0x80 >>> (i % 8);\n            }\n        }\n\n        return leftBits;\n    }\n\n    static unserialize(buf: SerialBuffer): MerklePath {\n        const count = buf.readUint8();\n        const leftBitsSize = Math.ceil(count / 8);\n        const leftBits = buf.read(leftBitsSize);\n\n        const nodes = [];\n        for (let i = 0; i < count; i++) {\n            const left = (leftBits[Math.floor(i / 8)] & (0x80 >>> (i % 8))) !== 0;\n            const hash = Hash.unserialize(buf);\n            nodes.push(new MerklePathNode(hash, left));\n        }\n        return new MerklePath(nodes);\n    }\n\n    serialize(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._nodes.length);\n        buf.write(MerklePath._compress(this._nodes));\n\n        for (const node of this._nodes) {\n            node.hash.serialize(buf);\n        }\n        return buf;\n    }\n\n    get serializedSize(): number {\n        const leftBitsSize = Math.ceil(this._nodes.length / 8);\n        return /*count*/ 1\n            + leftBitsSize\n            + this._nodes.reduce((sum, node) => sum + node.hash.serializedSize, 0);\n    }\n\n    equals(o: unknown): boolean {\n        return o instanceof MerklePath\n            && this._nodes.length === o._nodes.length\n            && this._nodes.every((node, i) => node.equals(o._nodes[i]));\n    }\n\n    get nodes(): MerklePathNode[] {\n        return this._nodes;\n    }\n}\n\nclass MerklePathNode {\n\tprivate _hash: Hash;\n\tprivate _left: boolean;\n\n    constructor(hash: Hash, left: boolean) {\n        this._hash = hash;\n        this._left = left;\n    }\n\n    get hash(): Hash {\n        return this._hash;\n    }\n\n    get left(): boolean {\n        return this._left;\n    }\n\n    equals(o: unknown): boolean {\n        return o instanceof MerklePathNode\n            && this._hash.equals(o.hash)\n            && this._left === o.left;\n    }\n}\n","import { BufferUtils } from \"./BufferUtils\";\nimport { NumberUtils } from \"./NumberUtils\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { Transaction } from \"./Transaction\";\n\nexport type PlainAccount = {\n    type: string,\n    balance: number,\n}\n\nabstract class Account {\n\tstatic TYPE_MAP = new Map<Account.Type, {\n\t\tcopy?: (o: Account) => Account,\n\t\tunserialize: (buf: SerialBuffer) => Account,\n\t\tcreate?: (balance: number, blockHeight: number, transaction: Transaction) => Account,\n\t\tverifyOutgoingTransaction: (transaction: Transaction) => boolean,\n\t\tverifyIncomingTransaction: (transaction: Transaction) => boolean,\n\t\tfromPlain: (o: object) => Account,\n\t\tdataToPlain: (data: Uint8Array) => Record<string, any>,\n\t\tproofToPlain: (proof: Uint8Array) => Record<string, any>,\n\t}>();\n    static INITIAL: Account;\n\n\tstatic BalanceError = class extends Error { constructor() { super('Balance Error!'); }};\n\tstatic DoubleTransactionError = class extends Error { constructor() { super('Double Transaction Error!'); }};\n\tstatic ProofError = class extends Error { constructor() { super('Proof Error!'); }};\n\tstatic ValidityError = class extends Error { constructor() { super('Validity Error!'); }};\n\n\tprotected _type: Account.Type;\n\tprotected _balance: number;\n\n    constructor(type: Account.Type, balance: number) {\n        if (!NumberUtils.isUint8(type)) throw new Error('Malformed type');\n        if (!NumberUtils.isUint64(balance)) throw new Error('Malformed balance');\n\n        this._type = type;\n        this._balance = balance;\n    }\n\n    /**\n     * Create Account object from binary form.\n     */\n    static unserialize(buf: SerialBuffer): Account {\n        const type = buf.readUint8() as Account.Type;\n        buf.readPos--;\n\n        if (!Account.TYPE_MAP.has(type)) {\n            throw new Error('Unknown account type');\n        }\n\n        return Account.TYPE_MAP.get(type)!.unserialize(buf);\n    }\n\n    /**\n     * Serialize this Account object into binary form.\n     */\n    serialize(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._type);\n        buf.writeUint64(this._balance);\n        return buf;\n    }\n\n    get serializedSize(): number {\n        return /*type*/ 1\n            + /*balance*/ 8;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     */\n    equals(o: unknown): boolean {\n        return o instanceof Account && BufferUtils.equals(this.serialize(), o.serialize());\n    }\n\n    toString() {\n        return `Account{type=${this._type}, balance=${this._balance.toString()}`;\n    }\n\n    static fromAny(o: Account | Record<string, any>): Account {\n        if (o instanceof Account) return o;\n        return Account.fromPlain(o);\n    }\n\n    static fromPlain(plain: Record<string, any>): Account {\n        if (!plain || plain.type === undefined) throw new Error('Invalid account');\n        const type = Account.Type.fromAny(plain.type);\n        return Account.TYPE_MAP.get(type)!.fromPlain(plain);\n    }\n\n    toPlain(): PlainAccount {\n        return {\n            type: Account.Type.toString(this.type),\n            balance: this.balance\n        };\n    }\n\n    get balance(): number {\n        return this._balance;\n    }\n\n    get type(): Account.Type {\n        return this._type;\n    }\n\n    withBalance(balance: number): Account {\n\t\tthrow new Error('Not yet implemented.');\n\t}\n\n    // withOutgoingTransaction(transaction: Transaction, blockHeight: number, transactionsCache: TransactionCache, revert = false): Account { // TODO: TransactionCache\n    //     if (!revert) {\n    //         const newBalance = this._balance - transaction.value - transaction.fee;\n    //         if (newBalance < 0) {\n    //             throw new Account.BalanceError();\n    //         }\n    //         if (blockHeight < transaction.validityStartHeight\n    //             || blockHeight >= transaction.validityStartHeight + Policy.TRANSACTION_VALIDITY_WINDOW) {\n    //             throw new Account.ValidityError();\n    //         }\n    //         if (transactionsCache.containsTransaction(transaction)) {\n    //             throw new Account.DoubleTransactionError();\n    //         }\n    //         return this.withBalance(newBalance);\n    //     } else {\n    //         if (blockHeight < transaction.validityStartHeight\n    //             || blockHeight >= transaction.validityStartHeight + Policy.TRANSACTION_VALIDITY_WINDOW) {\n    //             throw new Account.ValidityError();\n    //         }\n    //         return this.withBalance(this._balance + transaction.value + transaction.fee);\n    //     }\n    // }\n\n    withIncomingTransaction(transaction: Transaction, blockHeight: number, revert = false): Account {\n        if (!revert) {\n            return this.withBalance(this._balance + transaction.value);\n        } else {\n            const newBalance = this._balance - transaction.value;\n            if (newBalance < 0) {\n                throw new Account.BalanceError();\n            }\n            return this.withBalance(newBalance);\n        }\n    }\n\n    withContractCommand(transaction: Transaction, blockHeight: number, revert = false): Account {\n        throw new Error('Not yet implemented');\n    }\n\n    isInitial(): boolean {\n        return this === Account.INITIAL;\n    }\n\n    isToBePruned(): boolean {\n        return this._balance === 0 && !this.isInitial();\n    }\n\n    static dataToPlain(data: Uint8Array): Record<string, any> {\n        return {};\n    }\n\n    static proofToPlain(proof: Uint8Array): Record<string, any> {\n        return {};\n    }\n}\n\nnamespace Account {\n\t/**\n\t * Enum for Account types.\n\t * Non-zero values are contracts.\n\t */\n\texport enum Type {\n\t\t/**\n\t\t * Basic account type.\n\t\t * @see {BasicAccount}\n\t\t */\n\t\tBASIC = 0,\n\t\t/**\n\t\t * Account with vesting functionality.\n\t\t * @see {VestingContract}\n\t\t */\n\t\tVESTING = 1,\n\t\t/**\n\t\t * Hashed Time-Locked Contract\n\t\t * @see {HashedTimeLockedContract}\n\t\t */\n\t\tHTLC = 2\n\t}\n\n\texport namespace Type {\n\t\texport function toString(type: Account.Type): string {\n\t\t\tswitch (type) {\n\t\t\t\tcase Account.Type.BASIC: return 'basic';\n\t\t\t\tcase Account.Type.VESTING: return 'vesting';\n\t\t\t\tcase Account.Type.HTLC: return 'htlc';\n\t\t\t\tdefault: throw new Error('Invalid account type');\n\t\t\t}\n\t\t}\n\t\texport function fromAny(type: unknown): Account.Type {\n\t\t\tif (typeof type === 'number') return type;\n\t\t\tswitch (type) {\n\t\t\t\tcase 'basic': return Account.Type.BASIC;\n\t\t\t\tcase 'vesting': return Account.Type.VESTING;\n\t\t\t\tcase 'htlc': return Account.Type.HTLC;\n\t\t\t\tdefault: throw new Error('Invalid account type');\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport { Account };\n","import { SerialBuffer } from \"./SerialBuffer\";\nimport { Serializable } from \"./Serializable\";\n\nexport class RandomSecret extends Serializable {\n\tstatic SIZE = 32;\n\n\tprivate _obj: Uint8Array;\n\n    constructor(arg: Uint8Array) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== RandomSecret.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    static unserialize(buf: SerialBuffer): RandomSecret {\n        return new RandomSecret(buf.read(RandomSecret.SIZE));\n    }\n\n    serialize(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    get serializedSize(): number {\n        return RandomSecret.SIZE;\n    }\n\n    override equals(o: unknown): boolean {\n        return o instanceof RandomSecret && super.equals(o);\n    }\n}\n","import { Commitment } from \"./Commitment\";\nimport { PrivateKey } from \"./PrivateKey\";\nimport { PublicKey } from \"./PublicKey\";\nimport { RandomSecret } from \"./RandomSecret\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { Serializable } from \"./Serializable\";\nimport { WasmHelper } from \"./WasmHelper\";\n\nexport class PartialSignature extends Serializable {\n\tstatic SIZE = 32;\n\n\tprivate _obj: Uint8Array;\n\n    constructor(arg: Uint8Array) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== PartialSignature.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    static create(\n\t\tprivateKey: PrivateKey,\n\t\tpublicKey: PublicKey,\n\t\tpublicKeys: PublicKey[],\n\t\tsecret: RandomSecret,\n\t\taggregateCommitment: Commitment,\n\t\tdata: Uint8Array,\n\t) {\n        const raw = PartialSignature._delinearizedPartialSignatureCreate(\n\t\t\tpublicKeys.map(o => o.serialize()),\n\t\t\tprivateKey.serialize(),\n            publicKey.serialize(),\n\t\t\tsecret.serialize(),\n\t\t\taggregateCommitment.serialize(),\n\t\t\tdata,\n\t\t);\n        return new PartialSignature(raw);\n    }\n\n    static unserialize(buf: SerialBuffer): PartialSignature {\n        return new PartialSignature(buf.read(PartialSignature.SIZE));\n    }\n\n    serialize(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    get serializedSize(): number {\n        return PartialSignature.SIZE;\n    }\n\n    override equals(o: unknown): boolean {\n        return o instanceof PartialSignature && super.equals(o);\n    }\n\n    static _delinearizedPartialSignatureCreate(\n\t\tpublicKeys: Uint8Array[],\n\t\tprivateKey: Uint8Array,\n\t\tpublicKey: Uint8Array,\n\t\tsecret: Uint8Array,\n\t\taggregateCommitment: Uint8Array,\n\t\tmessage: Uint8Array,\n\t): Uint8Array {\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)\n            || privateKey.byteLength !== PrivateKey.SIZE\n            || publicKey.byteLength !== PublicKey.SIZE\n            || secret.byteLength !== RandomSecret.SIZE\n            || aggregateCommitment.byteLength !== Commitment.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n\t\tconst Module = WasmHelper.Module;\n\t\tlet stackPtr;\n\t\ttry {\n\t\t\tstackPtr = Module.stackSave();\n\t\t\tconst wasmOut = Module.stackAlloc(PartialSignature.SIZE);\n\t\t\tconst wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n\t\t\tconst wasmInPrivateKey = Module.stackAlloc(privateKey.length);\n\t\t\tconst wasmInPublicKey = Module.stackAlloc(publicKey.length);\n\t\t\tconst wasmInSecret = Module.stackAlloc(secret.length);\n\t\t\tconst wasmInCommitment = Module.stackAlloc(aggregateCommitment.length);\n\t\t\tconst wasmInMessage = Module.stackAlloc(message.length);\n\t\t\tnew Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n\t\t\tnew Uint8Array(Module.HEAPU8.buffer, wasmInPrivateKey, privateKey.length).set(privateKey);\n\t\t\tnew Uint8Array(Module.HEAPU8.buffer, wasmInPublicKey, publicKey.length).set(publicKey);\n\t\t\tnew Uint8Array(Module.HEAPU8.buffer, wasmInSecret, secret.length).set(secret);\n\t\t\tnew Uint8Array(Module.HEAPU8.buffer, wasmInCommitment, aggregateCommitment.length).set(aggregateCommitment);\n\t\t\tnew Uint8Array(Module.HEAPU8.buffer, wasmInMessage, message.length).set(message);\n\t\t\tModule._ed25519_delinearized_partial_sign(wasmOut, wasmInMessage, message.length, wasmInCommitment, wasmInSecret, wasmInPublicKeys, publicKeys.length, wasmInPublicKey, wasmInPrivateKey);\n\t\t\tconst partialSignature = new Uint8Array(PartialSignature.SIZE);\n\t\t\tpartialSignature.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PartialSignature.SIZE));\n\t\t\treturn partialSignature;\n\t\t} catch (e) {\n\t\t\t// Log.w(CryptoWorkerImpl, e); // TODO: Log\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tif (stackPtr !== undefined) Module.stackRestore(stackPtr);\n\t\t}\n\t}\n}\n","import { BufferUtils } from \"./BufferUtils\";\nimport { Commitment } from \"./Commitment\";\nimport { PartialSignature } from \"./PartialSignature\";\nimport { PrivateKey } from \"./PrivateKey\";\nimport { PublicKey } from \"./PublicKey\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { Serializable } from \"./Serializable\";\nimport { WasmHelper } from \"./WasmHelper\";\n\nexport class Signature extends Serializable {\n\tstatic SIZE = 64;\n\n    static copy(o: Signature): Signature {\n        if (!o) return o;\n        const obj = new Uint8Array(o._obj);\n        return new Signature(obj);\n    }\n\n\tprivate _obj: Uint8Array;\n\n    constructor(arg: Uint8Array) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Signature.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    static create(privateKey: PrivateKey, publicKey: PublicKey, data: Uint8Array): Signature {\n        return new Signature(Signature._signatureCreate(privateKey.serialize(), publicKey.serialize(), data));\n    }\n\n    static fromPartialSignatures(commitment: Commitment, signatures: PartialSignature[]): Signature {\n        const raw = Signature._combinePartialSignatures(commitment.serialize(), signatures.map(s => s.serialize()));\n        return new Signature(raw);\n    }\n\n    static unserialize(buf: SerialBuffer): Signature {\n        return new Signature(buf.read(Signature.SIZE));\n    }\n\n    static fromAny(o: Signature | Uint8Array | string): Signature {\n        if (!o) throw new Error('Invalid signature format');\n        if (o instanceof Signature) return o;\n        try {\n            return new Signature(BufferUtils.fromAny(o, Signature.SIZE));\n        } catch (e) {\n            throw new Error('Invalid signature format');\n        }\n    }\n\n    serialize(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    get serializedSize(): number {\n        return Signature.SIZE;\n    }\n\n    verify(publicKey: PublicKey, data: Uint8Array): boolean {\n        return Signature._signatureVerify(publicKey.serialize(), data, this._obj);\n    }\n\n    override equals(o: unknown): boolean {\n        return o instanceof Signature && super.equals(o);\n    }\n\n    private static _combinePartialSignatures(combinedCommitment: Uint8Array, partialSignatures: Uint8Array[]): Uint8Array {\n        const combinedSignature = Signature._aggregatePartialSignatures(partialSignatures);\n        return BufferUtils.concatTypedArrays(combinedCommitment, combinedSignature);\n    }\n\n    private static _aggregatePartialSignatures(partialSignatures: Uint8Array[]): Uint8Array {\n        return partialSignatures.reduce((sigA, sigB) => Signature._scalarsAdd(sigA, sigB));\n    }\n\n    private static _scalarsAdd(a: Uint8Array, b: Uint8Array): Uint8Array {\n        if (a.byteLength !== PartialSignature.SIZE || b.byteLength !== PartialSignature.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n\t\tconst Module = WasmHelper.Module;\n\t\tlet stackPtr;\n\t\ttry {\n\t\t\tstackPtr = Module.stackSave();\n\t\t\tconst wasmOutSum = Module.stackAlloc(PartialSignature.SIZE);\n\t\t\tconst wasmInA = Module.stackAlloc(a.length);\n\t\t\tconst wasmInB = Module.stackAlloc(b.length);\n\t\t\tnew Uint8Array(Module.HEAPU8.buffer, wasmInA, a.length).set(a);\n\t\t\tnew Uint8Array(Module.HEAPU8.buffer, wasmInB, b.length).set(b);\n\t\t\tModule._ed25519_add_scalars(wasmOutSum, wasmInA, wasmInB);\n\t\t\tconst sum = new Uint8Array(PartialSignature.SIZE);\n\t\t\tsum.set(new Uint8Array(Module.HEAPU8.buffer, wasmOutSum, PartialSignature.SIZE));\n\t\t\treturn sum;\n\t\t} catch (e) {\n\t\t\t// Log.w(Signature, e); // TODO: Log\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tif (stackPtr !== undefined) Module.stackRestore(stackPtr);\n\t\t}\n    }\n\n    static _signatureCreate(privateKey: Uint8Array, publicKey: Uint8Array, message: Uint8Array): Uint8Array {\n        if (publicKey.byteLength !== PublicKey.SIZE\n            || privateKey.byteLength !== PrivateKey.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n\t\tconst Module = WasmHelper.Module;\n\t\tlet stackPtr;\n\t\ttry {\n\t\t\tstackPtr = Module.stackSave();\n\t\t\tconst wasmOutSignature = Module.stackAlloc(Signature.SIZE);\n\t\t\tconst signatureBuffer = new Uint8Array(Module.HEAP8.buffer, wasmOutSignature, Signature.SIZE);\n\t\t\tconst wasmInMessage = Module.stackAlloc(message.length);\n\t\t\tnew Uint8Array(Module.HEAP8.buffer, wasmInMessage, message.length).set(message);\n\t\t\tconst wasmInPubKey = Module.stackAlloc(publicKey.length);\n\t\t\tnew Uint8Array(Module.HEAP8.buffer, wasmInPubKey, publicKey.length).set(publicKey);\n\t\t\tconst wasmInPrivKey = Module.stackAlloc(privateKey.length);\n\t\t\tconst privKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmInPrivKey, privateKey.length);\n\t\t\tprivKeyBuffer.set(privateKey);\n\n\t\t\tModule._ed25519_sign(wasmOutSignature, wasmInMessage, message.byteLength, wasmInPubKey, wasmInPrivKey);\n\t\t\tprivKeyBuffer.fill(0);\n\n\t\t\tconst signature = new Uint8Array(Signature.SIZE);\n\t\t\tsignature.set(signatureBuffer);\n\t\t\treturn signature;\n\t\t} catch (e) {\n\t\t\t// Log.w(Signature, e); // TODO: Log\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tif (stackPtr !== undefined) Module.stackRestore(stackPtr);\n\t\t}\n    }\n\n    static _signatureVerify(publicKey: Uint8Array, message: Uint8Array, signature: Uint8Array): boolean {\n\t\tconst Module = WasmHelper.Module;\n\t\tlet stackPtr;\n\t\ttry {\n\t\t\tstackPtr = Module.stackSave();\n\t\t\tconst wasmInPubKey = Module.stackAlloc(publicKey.length);\n\t\t\tnew Uint8Array(Module.HEAP8.buffer, wasmInPubKey, publicKey.length).set(publicKey);\n\t\t\tconst wasmInMessage = Module.stackAlloc(message.length);\n\t\t\tnew Uint8Array(Module.HEAP8.buffer, wasmInMessage, message.length).set(message);\n\t\t\tconst wasmInSignature = Module.stackAlloc(signature.length);\n\t\t\tnew Uint8Array(Module.HEAP8.buffer, wasmInSignature, signature.length).set(signature);\n\n\t\t\treturn !!Module._ed25519_verify(wasmInSignature, wasmInMessage, message.byteLength, wasmInPubKey);\n\t\t} catch (e) {\n\t\t\t// Log.w(Signature, e); // TODO: Log\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tif (stackPtr !== undefined) Module.stackRestore(stackPtr);\n\t\t}\n\t}\n}\n","import { BufferUtils } from \"./BufferUtils\";\nimport { Commitment } from \"./Commitment\";\nimport { CryptoUtils } from \"./CryptoUtils\";\nimport { RandomSecret } from \"./RandomSecret\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { Serializable } from \"./Serializable\";\nimport { Signature } from \"./Signature\";\nimport { WasmHelper } from \"./WasmHelper\";\n\nexport class CommitmentPair extends Serializable {\n\tstatic SERIALIZED_SIZE = RandomSecret.SIZE + Signature.SIZE;\n\tstatic RANDOMNESS_SIZE = 32;\n\n\tprivate _secret: RandomSecret;\n\tprivate _commitment: Commitment;\n\n    constructor(secret: RandomSecret, commitment: Commitment) {\n        super();\n        if (!(secret instanceof RandomSecret)) throw new Error('Primitive: Invalid type');\n        if (!(commitment instanceof Commitment)) throw new Error('Primitive: Invalid type');\n        this._secret = secret;\n        this._commitment = commitment;\n    }\n\n    static generate(): CommitmentPair {\n        const randomness = new Uint8Array(CommitmentPair.RANDOMNESS_SIZE);\n        CryptoUtils.getRandomValues(randomness);\n        const raw = CommitmentPair._commitmentCreate(randomness);\n        return new CommitmentPair(new RandomSecret(raw.secret), new Commitment(raw.commitment));\n    }\n\n    static unserialize(buf: SerialBuffer): CommitmentPair {\n        const secret = RandomSecret.unserialize(buf);\n        const commitment = Commitment.unserialize(buf);\n        return new CommitmentPair(secret, commitment);\n    }\n\n    static fromHex(hexBuf: string): CommitmentPair {\n        return this.unserialize(BufferUtils.fromHex(hexBuf));\n    }\n\n    serialize(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this.secret.serialize(buf);\n        this.commitment.serialize(buf);\n        return buf;\n    }\n\n    get secret(): RandomSecret {\n        return this._secret;\n    }\n\n    get commitment(): Commitment {\n        return this._commitment;\n    }\n\n    get serializedSize(): number {\n        return this.secret.serializedSize + this.commitment.serializedSize;\n    }\n\n    override equals(o: unknown): boolean {\n        return o instanceof CommitmentPair && super.equals(o);\n    }\n\n    static _commitmentCreate(randomness: Uint8Array): { commitment: Uint8Array, secret: Uint8Array } {\n\t\tconst Module = WasmHelper.Module;\n\t\tlet stackPtr;\n\t\ttry {\n\t\t\tstackPtr = Module.stackSave();\n\t\t\tconst wasmOutCommitment = Module.stackAlloc(Commitment.SIZE);\n\t\t\tconst wasmOutSecret = Module.stackAlloc(Commitment.SIZE);\n\t\t\tconst wasmIn = Module.stackAlloc(randomness.length);\n\t\t\tnew Uint8Array(Module.HEAPU8.buffer, wasmIn, randomness.length).set(randomness);\n\t\t\tconst res = Module._ed25519_create_commitment(wasmOutSecret, wasmOutCommitment, wasmIn);\n\t\t\tif (res !== 1) {\n\t\t\t\tthrow new Error(`Secret must not be 0 or 1: ${res}`);\n\t\t\t}\n\t\t\tconst commitment = new Uint8Array(Commitment.SIZE);\n\t\t\tconst secret = new Uint8Array(Commitment.SIZE);\n\t\t\tcommitment.set(new Uint8Array(Module.HEAPU8.buffer, wasmOutCommitment, Commitment.SIZE));\n\t\t\tsecret.set(new Uint8Array(Module.HEAPU8.buffer, wasmOutSecret, Commitment.SIZE));\n\t\t\treturn {commitment, secret};\n\t\t} catch (e) {\n\t\t\t// Log.w(CommitmentPair, e); // TODO: Log\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tif (stackPtr !== undefined) Module.stackRestore(stackPtr);\n\t\t}\n\t}\n}\n","export class Assert {\n    static that(condition: boolean, message = 'Assertion failed'): void {\n        if (!condition) {\n            throw new Error(message);\n        }\n    }\n}\n","import { Account } from \"./Account\";\nimport { Address } from \"./Address\";\nimport { BufferUtils } from \"./BufferUtils\";\nimport { GenesisConfig } from \"./GenesisConfig\";\nimport { Hash } from \"./Hash\";\nimport { NumberUtils } from \"./NumberUtils\";\nimport { SerialBuffer } from \"./SerialBuffer\";\n\nabstract class Transaction {\n\tstatic FORMAT_MAP = new Map<Transaction.Format, {\n\t\tunserialize: (buf: SerialBuffer) => Transaction,\n\t\tfromPlain: (plain:object) => Transaction,\n\t}>();\n\n\tprotected _format: Transaction.Format;\n\tprotected _sender: Address;\n\tprotected _senderType: Account.Type;\n\tprotected _recipient: Address;\n\tprotected _recipientType: Account.Type;\n\tprotected _value: number;\n\tprotected _fee: number;\n\tprotected _networkId: number;\n\tprotected _validityStartHeight: number;\n\tprotected _flags: Transaction.Flag;\n\tprotected _data: Uint8Array;\n\tprotected _proof: Uint8Array;\n\tprotected _valid?: boolean;\n\tprotected _hash?: Hash;\n\n    constructor(\n\t\tformat: Transaction.Format,\n\t\tsender: Address,\n\t\tsenderType: Account.Type,\n\t\trecipient: Address,\n\t\trecipientType: Account.Type,\n\t\tvalue: number,\n\t\tfee: number,\n\t\tvalidityStartHeight: number,\n\t\tflags: Transaction.Flag,\n\t\tdata: Uint8Array,\n\t\tproof: Uint8Array,\n\t\tnetworkId: number = GenesisConfig.NETWORK_ID,\n\t) {\n        if (!(sender instanceof Address)) throw new Error('Malformed sender');\n        if (!NumberUtils.isUint8(senderType)) throw new Error('Malformed sender type');\n        if (!(recipient instanceof Address)) throw new Error('Malformed recipient');\n        if (!NumberUtils.isUint8(recipientType)) throw new Error('Malformed recipient type');\n        if (!NumberUtils.isUint64(value) || value === 0) throw new Error('Malformed value');\n        if (!NumberUtils.isUint64(fee)) throw new Error('Malformed fee');\n        if (!NumberUtils.isUint32(validityStartHeight)) throw new Error('Malformed validityStartHeight');\n        if (!NumberUtils.isUint8(flags) && (flags & ~(Transaction.Flag.ALL)) > 0) throw new Error('Malformed flags');\n        if (!(data instanceof Uint8Array) || !(NumberUtils.isUint16(data.byteLength))) throw new Error('Malformed data');\n        if (!(proof instanceof Uint8Array) || !(NumberUtils.isUint16(proof.byteLength))) throw new Error('Malformed proof');\n        if (!NumberUtils.isUint8(networkId)) throw new Error('Malformed networkId');\n\n        this._format = format;\n        this._sender = sender;\n        this._senderType = senderType;\n        this._recipient = recipient;\n        this._recipientType = recipientType;\n        this._value = value;\n        this._fee = fee;\n        this._networkId = networkId;\n        this._validityStartHeight = validityStartHeight;\n        this._flags = flags;\n        this._data = data;\n        this._proof = proof;\n\n        if (this._recipient === Address.CONTRACT_CREATION) this._recipient = this.getContractCreationAddress();\n    }\n\n    static unserialize(buf: SerialBuffer): Transaction {\n        const format = buf.readUint8() as Transaction.Format;\n        buf.readPos--;\n\n        if (!Transaction.FORMAT_MAP.has(format)) throw new Error('Invalid transaction type');\n        return Transaction.FORMAT_MAP.get(format)!.unserialize(buf);\n    }\n\n    serializeContent(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedContentSize);\n        buf.writeUint16(this._data.byteLength);\n        buf.write(this._data);\n        this._sender.serialize(buf);\n        buf.writeUint8(this._senderType);\n        this._recipient.serialize(buf);\n        buf.writeUint8(this._recipientType);\n        buf.writeUint64(this._value);\n        buf.writeUint64(this._fee);\n        buf.writeUint32(this._validityStartHeight);\n        buf.writeUint8(this._networkId);\n        buf.writeUint8(this._flags);\n        return buf;\n    }\n\n    get serializedContentSize(): number {\n        return /*dataSize*/ 2\n            + this._data.byteLength\n            + this._sender.serializedSize\n            + /*senderType*/ 1\n            + this._recipient.serializedSize\n            + /*recipientType*/ 1\n            + /*value*/ 8\n            + /*fee*/ 8\n            + /*validityStartHeight*/ 4\n            + /*networkId*/ 1\n            + /*flags*/ 1;\n    }\n\n    verify(networkId?: number): boolean {\n        if (this._valid === undefined) {\n            this._valid = this._verify(networkId);\n        }\n        return this._valid;\n    }\n\n    private _verify(networkId: number = GenesisConfig.NETWORK_ID): boolean {\n        if (this._networkId !== networkId) {\n            // Log.w(Transaction, 'Transaction is not valid in this network', this); // TODO: Log\n            return false;\n        }\n        // Check that sender != recipient.\n        if (this._recipient.equals(this._sender)) {\n            // Log.w(Transaction, 'Sender and recipient must not match', this); // TODO: Log\n            return false;\n        }\n        if (!Account.TYPE_MAP.has(this._senderType) || !Account.TYPE_MAP.has(this._recipientType)) {\n            // Log.w(Transaction, 'Invalid account type', this); // TODO: Log\n            return false;\n        }\n        if (!Account.TYPE_MAP.get(this._senderType)!.verifyOutgoingTransaction(this)) {\n            // Log.w(Transaction, 'Invalid for sender', this); // TODO: Log\n            return false;\n        }\n        if (!Account.TYPE_MAP.get(this._recipientType)!.verifyIncomingTransaction(this)) {\n            // Log.w(Transaction, 'Invalid for recipient', this); // TODO: Log\n            return false;\n        }\n        return true;\n    }\n\n    get serializedSize(): number {\n        throw new Error('Getter needs to be overwritten by subclasses');\n    }\n\n    serialize(buf?: SerialBuffer): SerialBuffer {\n        throw new Error('Method needs to be overwritten by subclasses');\n    }\n\n    hash(): Hash {\n        // Exclude the signature, we don't want transactions to be malleable.\n        this._hash = this._hash || Hash.light(this.serializeContent());\n        return this._hash;\n    }\n\n    compare(o: Transaction): number {\n        if (this.fee / this.serializedSize > o.fee / o.serializedSize) return -1;\n        if (this.fee / this.serializedSize < o.fee / o.serializedSize) return 1;\n        if (this.serializedSize > o.serializedSize) return -1;\n        if (this.serializedSize < o.serializedSize) return 1;\n        if (this.fee > o.fee) return -1;\n        if (this.fee < o.fee) return 1;\n        if (this.value > o.value) return -1;\n        if (this.value < o.value) return 1;\n        return this.compareBlockOrder(o);\n    }\n\n    compareBlockOrder(o: Transaction): number {\n        // This function must return 0 iff this.equals(o).\n        const recCompare = this._recipient.compare(o._recipient);\n        if (recCompare !== 0) return recCompare;\n        if (this._validityStartHeight < o._validityStartHeight) return -1;\n        if (this._validityStartHeight > o._validityStartHeight) return 1;\n        if (this._fee > o._fee) return -1;\n        if (this._fee < o._fee) return 1;\n        if (this._value > o._value) return -1;\n        if (this._value < o._value) return 1;\n        const senderCompare = this._sender.compare(o._sender);\n        if (senderCompare !== 0) return senderCompare;\n        if (this._recipientType < o._recipientType) return -1;\n        if (this._recipientType > o._recipientType) return 1;\n        if (this._senderType < o._senderType) return -1;\n        if (this._senderType > o._senderType) return 1;\n        if (this._flags < o._flags) return -1;\n        if (this._flags > o._flags) return 1;\n        return BufferUtils.compare(this._data, o._data);\n    }\n\n    equals(o: unknown): boolean {\n        // This ignores format and proof to be consistent with hash():\n        //   tx1.hash() == tx2.hash() iff tx1.equals(t2)\n        return o instanceof Transaction\n            && this._sender.equals(o._sender)\n            && this._senderType === o._senderType\n            && this._recipient.equals(o._recipient)\n            && this._recipientType === o._recipientType\n            && this._value === o._value\n            && this._fee === o._fee\n            && this._validityStartHeight === o._validityStartHeight\n            && this._networkId === o._networkId\n            && this._flags === o._flags\n            && BufferUtils.equals(this._data, o._data);\n    }\n\n    toString(): string {\n        return `Transaction{`\n            + `sender=${this._sender.toBase64()}, `\n            + `recipient=${this._recipient.toBase64()}, `\n            + `value=${this._value}, `\n            + `fee=${this._fee}, `\n            + `validityStartHeight=${this._validityStartHeight}, `\n            + `networkId=${this._networkId}`\n            + `}`;\n    }\n\n    toPlain() {\n        const data = Account.TYPE_MAP.get(this.recipientType)!.dataToPlain(this.data);\n        data.raw = BufferUtils.toHex(this.data);\n        const proof = Account.TYPE_MAP.get(this.senderType)!.proofToPlain(this.proof);\n        proof.raw = BufferUtils.toHex(this.proof);\n        return {\n            transactionHash: this.hash().toPlain(),\n            format: Transaction.Format.toString(this._format),\n            sender: this.sender.toPlain(),\n            senderType: Account.Type.toString(this.senderType),\n            recipient: this.recipient.toPlain(),\n            recipientType: Account.Type.toString(this.recipientType),\n            value: this.value,\n            fee: this.fee,\n            feePerByte: this.feePerByte,\n            validityStartHeight: this.validityStartHeight,\n            network: GenesisConfig.networkIdToNetworkName(this.networkId),\n            flags: this.flags,\n            data,\n            proof,\n            size: this.serializedSize,\n            valid: this.verify()\n        };\n    }\n\n    static fromPlain(plain: Record<string, any>): Transaction {\n        if (!plain) throw new Error('Invalid transaction format');\n        const format = Transaction.Format.fromAny(plain.format);\n        if (!Transaction.FORMAT_MAP.has(format)) throw new Error('Invalid transaction type');\n        return Transaction.FORMAT_MAP.get(format)!.fromPlain(plain);\n    }\n\n    static fromAny(tx: Transaction | string | Record<string, any>): Transaction {\n        if (tx instanceof Transaction) return tx;\n        if (typeof tx === 'object') return Transaction.fromPlain(tx);\n        if (typeof tx === 'string') return Transaction.unserialize(new SerialBuffer(BufferUtils.fromHex(tx)));\n        throw new Error('Invalid transaction format');\n    }\n\n    getContractCreationAddress(): Address {\n        const tx = Transaction.unserialize(this.serialize());\n        tx._recipient = Address.NULL;\n        tx._hash = undefined;\n        return Address.fromHash(tx.hash());\n    }\n\n    get format(): Transaction.Format {\n        return this._format;\n    }\n\n    get sender(): Address {\n        return this._sender;\n    }\n\n    get senderType(): Account.Type {\n        return this._senderType;\n    }\n\n    get recipient(): Address {\n        return this._recipient;\n    }\n\n    get recipientType(): Account.Type {\n        return this._recipientType;\n    }\n\n    get value(): number {\n        return this._value;\n    }\n\n    get fee(): number {\n        return this._fee;\n    }\n\n    get feePerByte(): number {\n        return this._fee / this.serializedSize;\n    }\n\n    get networkId(): number {\n        return this._networkId;\n    }\n\n    get validityStartHeight(): number {\n        return this._validityStartHeight;\n    }\n\n    get flags(): number {\n        return this._flags;\n    }\n\n    hasFlag(flag: Transaction.Flag): boolean {\n        return (this._flags & flag) > 0;\n    }\n\n    get data(): Uint8Array {\n        return this._data;\n    }\n\n    get proof(): Uint8Array {\n        return this._proof;\n    }\n\n    // Sender proof is set by the Wallet after signing a transaction.\n    set proof(proof: Uint8Array) {\n        this._proof = proof;\n    }\n}\n\nnamespace Transaction {\n    export enum Format {\n        BASIC = 0,\n        EXTENDED = 1,\n    }\n\n    export namespace Format {\n        export function toString(format: Transaction.Format): string {\n            switch (format) {\n\t\t\t\tcase Transaction.Format.BASIC: return 'basic';\n\t\t\t\tcase Transaction.Format.EXTENDED: return 'extended';\n                default: throw new Error('Invalid transaction format');\n            }\n        }\n        export function fromAny(format: unknown): Transaction.Format {\n\t\t\tif (typeof format === 'number') return format;\n\t\t\tswitch (format) {\n\t\t\t\tcase 'basic': return Transaction.Format.BASIC;\n\t\t\t\tcase 'extended': return Transaction.Format.EXTENDED;\n\t\t\t\tdefault: throw new Error('Invalid transaction format');\n\t\t\t}\n        }\n    }\n\n\texport enum Flag {\n\t\tNONE = 0,\n\t\tCONTRACT_CREATION = 0b1,\n\t\tALL = 0b1,\n\t}\n}\n\nexport { Transaction };\n","import { Account } from \"./Account\";\nimport { Address } from \"./Address\";\nimport { Assert } from \"./Assert\";\nimport { BufferUtils } from \"./BufferUtils\";\nimport { GenesisConfig } from \"./GenesisConfig\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { Transaction } from \"./Transaction\";\n\nexport class ExtendedTransaction extends Transaction {\n    constructor(\n\t\tsender: Address,\n\t\tsenderType: Account.Type,\n\t\trecipient: Address,\n\t\trecipientType: Account.Type,\n\t\tvalue: number,\n\t\tfee: number,\n\t\tvalidityStartHeight: number,\n\t\tflags: Transaction.Flag,\n\t\tdata: Uint8Array,\n\t\tproof: Uint8Array = new Uint8Array(0),\n\t\tnetworkId?: number,\n\t) {\n        super(Transaction.Format.EXTENDED, sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId);\n    }\n\n    static override unserialize(buf: SerialBuffer): ExtendedTransaction {\n        const type = /** @type {Transaction.Format} */ buf.readUint8();\n        Assert.that(type === Transaction.Format.EXTENDED);\n\n        const dataSize = buf.readUint16();\n        const data = buf.read(dataSize);\n        const sender = Address.unserialize(buf);\n        const senderType = /** @type {Account.Type} */ buf.readUint8();\n        const recipient = Address.unserialize(buf);\n        const recipientType = /** @type {Account.Type} */ buf.readUint8();\n        const value = buf.readUint64();\n        const fee = buf.readUint64();\n        const validityStartHeight = buf.readUint32();\n        const networkId = buf.readUint8();\n        const flags = buf.readUint8();\n        const proofSize = buf.readUint16();\n        const proof = buf.read(proofSize);\n        return new ExtendedTransaction(sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId);\n    }\n\n    static override fromPlain(plain: Record<string, any>): ExtendedTransaction {\n        if (!plain) throw new Error('Invalid transaction format');\n        return new ExtendedTransaction(\n            Address.fromAny(plain.sender),\n            Account.Type.fromAny(plain.senderType),\n            Address.fromAny(plain.recipient),\n            Account.Type.fromAny(plain.recipientType),\n            plain.value,\n            plain.fee,\n            plain.validityStartHeight,\n            plain.flags,\n            BufferUtils.fromAny(plain.data.raw === undefined ? plain.data : plain.data.raw),\n            BufferUtils.fromAny(plain.proof.raw === undefined ? plain.proof : plain.proof.raw),\n            GenesisConfig.networkIdFromAny(plain.network || plain.networkId)\n        );\n    }\n\n    override serialize(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(Transaction.Format.EXTENDED);\n        this.serializeContent(buf);\n        buf.writeUint16(this._proof.byteLength);\n        buf.write(this._proof);\n        return buf;\n    }\n\n    override get serializedSize(): number {\n        return /*type*/ 1\n            + this.serializedContentSize\n            + /*proofSize*/ 2\n            + this._proof.byteLength;\n    }\n}\n\nTransaction.FORMAT_MAP.set(Transaction.Format.EXTENDED, ExtendedTransaction);\n","import { Address } from \"./Address\";\nimport { MerklePath } from \"./MerklePath\";\nimport { PublicKey } from \"./PublicKey\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { Signature } from \"./Signature\";\nimport { Transaction } from \"./Transaction\";\n\nexport class SignatureProof {\n    static verifyTransaction(transaction: Transaction): boolean {\n\t\tif (!transaction.proof) return false;\n        try {\n            const buffer = new SerialBuffer(transaction.proof);\n            const proof = SignatureProof.unserialize(buffer);\n\n            // Reject proof if it is longer than needed.\n            if (buffer.readPos !== buffer.byteLength) {\n                // Log.w(SignatureProof, 'Invalid SignatureProof - overlong'); // TODO: Log\n                return false;\n            }\n\n            return proof.verify(transaction.sender, transaction.serializeContent());\n        } catch (e) {\n            // Log.w(SignatureProof, `Failed to verify transaction: ${e.message || e}`); // TODO: Log\n            return false;\n        }\n    }\n\n    static singleSig(publicKey: PublicKey, signature?: Signature): SignatureProof {\n        return new SignatureProof(publicKey, new MerklePath([]), signature);\n    }\n\n    static multiSig(signerKey: PublicKey, publicKeys: PublicKey[], signature: Signature): SignatureProof {\n        const merklePath = MerklePath.compute(publicKeys, signerKey);\n        return new SignatureProof(signerKey, merklePath, signature);\n    }\n\n\tprivate _publicKey: PublicKey;\n\tprivate _merklePath: MerklePath;\n\tprivate _signature?: Signature;\n\n    constructor(publicKey: PublicKey, merklePath: MerklePath, signature?: Signature) {\n        if (!(publicKey instanceof PublicKey)) throw new Error('Malformed publickKey');\n        if (!(merklePath instanceof MerklePath)) throw new Error('Malformed merklePath');\n        if (signature && !(signature instanceof Signature)) throw new Error('Malformed signature');\n\n        this._publicKey = publicKey;\n        this._merklePath = merklePath;\n        this._signature = signature;\n    }\n\n    static unserialize(buf: SerialBuffer): SignatureProof {\n        const publicKey = PublicKey.unserialize(buf);\n        const merklePath = MerklePath.unserialize(buf);\n        const signature = Signature.unserialize(buf);\n        return new SignatureProof(publicKey, merklePath, signature);\n    }\n\n    serialize(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._publicKey.serialize(buf);\n        this._merklePath.serialize(buf);\n\n        // The SignatureProof is sometimes serialized before the signature is set (e.g. when creating transactions).\n        // Simply don't serialize the signature if it's missing as this should never go over the wire.\n        // We always expect the signature to be present when unserializing.\n        if (this._signature) {\n            this._signature.serialize(buf);\n        }\n\n        return buf;\n    }\n\n    get serializedSize(): number {\n        return this._publicKey.serializedSize\n            + this._merklePath.serializedSize\n            + (this._signature ? this._signature.serializedSize : 0);\n    }\n\n    static get SINGLE_SIG_SIZE(): number {\n        return PublicKey.SIZE + new MerklePath([]).serializedSize + Signature.SIZE;\n    }\n\n    equals(o: unknown): boolean {\n        return o instanceof SignatureProof\n            && this._publicKey.equals(o._publicKey)\n            && this._merklePath.equals(o._merklePath)\n            && (this._signature ? this._signature.equals(o._signature) : this._signature === o._signature);\n    }\n\n    verify(sender: Address | null, data: Uint8Array): boolean {\n        if (sender !== null && !this.isSignedBy(sender)) {\n            // Log.w(SignatureProof, 'Invalid SignatureProof - signer does not match sender address'); // TODO: Log\n            return false;\n        }\n\n        if (!this._signature) {\n            // Log.w(SignatureProof, 'Invalid SignatureProof - signature is missing'); // TODO: Log\n            return false;\n        }\n\n        if (!this._signature.verify(this._publicKey, data)) {\n            // Log.w(SignatureProof, 'Invalid SignatureProof - signature is invalid'); // TODO: Log\n            return false;\n        }\n\n        return true;\n    }\n\n    isSignedBy(sender: Address): boolean {\n        const merkleRoot = this._merklePath.computeRoot(this._publicKey);\n        const signerAddr = Address.fromHash(merkleRoot);\n        return signerAddr.equals(sender);\n    }\n\n    get publicKey(): PublicKey {\n        return this._publicKey;\n    }\n\n    get merklePath(): MerklePath {\n        return this._merklePath;\n    }\n\n    get signature(): Signature | undefined {\n        return this._signature;\n    }\n\n    set signature(signature: Signature | undefined) {\n        this._signature = signature;\n    }\n}\n","import { Account } from \"./Account\";\nimport { Address } from \"./Address\";\nimport { Assert } from \"./Assert\";\nimport { GenesisConfig } from \"./GenesisConfig\";\nimport { PublicKey } from \"./PublicKey\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { Signature } from \"./Signature\";\nimport { SignatureProof } from \"./SignatureProof\";\nimport { Transaction } from \"./Transaction\";\n\nexport class BasicTransaction extends Transaction {\n\tprivate _signatureProof: SignatureProof;\n\n    constructor(\n\t\tsenderPubKey: PublicKey,\n\t\trecipient: Address,\n\t\tvalue: number,\n\t\tfee: number,\n\t\tvalidityStartHeight: number,\n\t\tsignature?: Signature,\n\t\tnetworkId?: number,\n\t) {\n        if (!(senderPubKey instanceof PublicKey)) throw new Error('Malformed senderPubKey');\n        // Signature may be initially empty and can be set later.\n        if (signature !== undefined && !(signature instanceof Signature)) throw new Error('Malformed signature');\n\n        const proof = SignatureProof.singleSig(senderPubKey, signature);\n        super(Transaction.Format.BASIC, senderPubKey.toAddress(), Account.Type.BASIC, recipient, Account.Type.BASIC, value, fee, validityStartHeight, Transaction.Flag.NONE, new Uint8Array(0), proof.serialize(), networkId);\n\n        this._signatureProof = proof;\n    }\n\n    static override unserialize(buf: SerialBuffer): Transaction {\n        const type = buf.readUint8();\n        Assert.that(type === Transaction.Format.BASIC);\n\n        const senderPubKey = PublicKey.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const value = buf.readUint64();\n        const fee = buf.readUint64();\n        const validityStartHeight = buf.readUint32();\n        const networkId = buf.readUint8();\n        const signature = Signature.unserialize(buf);\n        return new BasicTransaction(senderPubKey, recipient, value, fee, validityStartHeight, signature, networkId);\n    }\n\n    static override fromPlain(plain: Record<string, any>): BasicTransaction {\n        if (!plain) throw new Error('Invalid transaction format');\n        return new BasicTransaction(\n            PublicKey.fromAny(plain.proof.publicKey || plain.senderPubKey),\n            Address.fromAny(plain.recipient),\n            plain.value,\n            plain.fee,\n            plain.validityStartHeight,\n            Signature.fromAny(plain.proof.signature || plain.signature),\n            GenesisConfig.networkIdFromAny(plain.network || plain.networkId)\n        );\n    }\n\n    override serialize(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(Transaction.Format.BASIC);\n        this.senderPubKey.serialize(buf);\n        this._recipient.serialize(buf);\n        buf.writeUint64(this._value);\n        buf.writeUint64(this._fee);\n        buf.writeUint32(this._validityStartHeight);\n        buf.writeUint8(this._networkId);\n        if (this.signature) this.signature.serialize(buf);\n        return buf;\n    }\n\n    override get serializedSize(): number {\n        return /*type*/ 1\n            + this.senderPubKey.serializedSize\n            + this._recipient.serializedSize\n            + /*value*/ 8\n            + /*fee*/ 8\n            + /*validityStartHeight*/ 4\n            + /*networkId*/ 1\n            + (this.signature ? this.signature.serializedSize : 0);\n    }\n\n    get senderPubKey(): PublicKey {\n        return this._signatureProof.publicKey;\n    }\n\n    get signature(): Signature | undefined {\n        return this._signatureProof.signature;\n    }\n\n    set signature(signature: Signature | undefined) {\n        this._signatureProof.signature = signature;\n        this._proof = this._signatureProof.serialize();\n    }\n}\n\nTransaction.FORMAT_MAP.set(Transaction.Format.BASIC, BasicTransaction);\n","import { Address } from \"./Address\";\nimport { BasicTransaction } from \"./BasicTransaction\";\nimport { BufferUtils } from \"./BufferUtils\";\nimport { KeyPair } from \"./KeyPair\";\nimport { PublicKey } from \"./PublicKey\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { Signature } from \"./Signature\";\nimport { SignatureProof } from \"./SignatureProof\";\nimport { Transaction } from \"./Transaction\";\n\nexport class Wallet {\n    /**\n     * Create a new Wallet.\n     */\n    static generate(): Wallet {\n        return new Wallet(KeyPair.generate());\n    }\n\n    static loadPlain(buf: Uint8Array | string): Wallet {\n        if (typeof buf === 'string') buf = BufferUtils.fromHex(buf);\n        if (!buf || buf.byteLength === 0) {\n            throw new Error('Invalid wallet seed');\n        }\n        return new Wallet(KeyPair.unserialize(new SerialBuffer(buf)));\n    }\n\n    static async loadEncrypted(buf: Uint8Array | string, key: Uint8Array | string): Promise<Wallet> {\n        if (typeof buf === 'string') buf = BufferUtils.fromHex(buf);\n        if (typeof key === 'string') key = BufferUtils.fromUtf8(key);\n        return new Wallet(await KeyPair.fromEncrypted(new SerialBuffer(buf), key));\n    }\n\n\tprotected _keyPair: KeyPair;\n\tprotected _address: Address;\n\n    /**\n     * Create a new Wallet object.\n     */\n    constructor(keyPair: KeyPair) {\n        this._keyPair = keyPair;\n        this._address = this._keyPair.publicKey.toAddress();\n    }\n\n    createTransaction(recipient: Address, value: number, fee: number, validityStartHeight: number): Transaction {\n        const transaction = new BasicTransaction(this._keyPair.publicKey, recipient, value, fee, validityStartHeight);\n        transaction.signature = Signature.create(this._keyPair.privateKey, this._keyPair.publicKey, transaction.serializeContent());\n        return transaction;\n    }\n\n    /**\n     * Sign a transaction by the owner of this Wallet.\n     */\n    signTransaction(transaction: Transaction): SignatureProof {\n        const signature = Signature.create(this._keyPair.privateKey, this._keyPair.publicKey, transaction.serializeContent());\n        return SignatureProof.singleSig(this._keyPair.publicKey, signature);\n    }\n\n    exportPlain(): SerialBuffer {\n        return this._keyPair.serialize();\n    }\n\n    exportEncrypted(key: Uint8Array | string): Promise<SerialBuffer> {\n        if (typeof key === 'string') key = BufferUtils.fromUtf8(key);\n        return this._keyPair.exportEncrypted(key);\n    }\n\n    get isLocked(): boolean {\n        return this.keyPair.isLocked;\n    }\n\n    lock(key: Uint8Array | string): Promise<void> {\n        if (typeof key === 'string') key = BufferUtils.fromUtf8(key);\n        return this.keyPair.lock(key);\n    }\n\n    relock(): void {\n        this.keyPair.relock();\n    }\n\n    unlock(key: Uint8Array | string): Promise<void> {\n        if (typeof key === 'string') key = BufferUtils.fromUtf8(key);\n        return this.keyPair.unlock(key);\n    }\n\n    equals(o: unknown): boolean {\n        return o instanceof Wallet && this.keyPair.equals(o.keyPair) && this.address.equals(o.address);\n    }\n\n    /**\n     * The address of the Wallet owner.\n     */\n    get address(): Address {\n        return this._address;\n    }\n\n    /**\n     * The public key of the Wallet owner\n     */\n    get publicKey(): PublicKey {\n        return this._keyPair.publicKey;\n    }\n\n    get keyPair(): KeyPair {\n        return this._keyPair;\n    }\n}\n","import { Account } from \"./Account\";\nimport { Address } from \"./Address\";\nimport { ArrayUtils } from \"./ArrayUtils\";\nimport { BufferUtils } from \"./BufferUtils\";\nimport { Commitment } from \"./Commitment\";\nimport { CommitmentPair } from \"./CommitmentPair\";\nimport { ExtendedTransaction } from \"./ExtendedTransaction\";\nimport { KeyPair } from \"./KeyPair\";\nimport { MerkleTree } from \"./MerkleTree\";\nimport { PartialSignature } from \"./PartialSignature\";\nimport { PublicKey } from \"./PublicKey\";\nimport { RandomSecret } from \"./RandomSecret\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { Signature } from \"./Signature\";\nimport { SignatureProof } from \"./SignatureProof\";\nimport { Transaction } from \"./Transaction\";\nimport { Wallet } from \"./Wallet\";\n\nexport class MultiSigWallet extends Wallet {\n    /**\n     * Create a new MultiSigWallet object.\n     */\n    static fromPublicKeys(keyPair: KeyPair, minSignatures: number, publicKeys: PublicKey[]): MultiSigWallet {\n        if (publicKeys.length === 0) throw new Error('publicKeys may not be empty');\n        if (minSignatures <= 0) throw new Error('minSignatures must be greater than 0');\n        if (!publicKeys.some(key => key.equals(keyPair.publicKey))) throw new Error('Own publicKey must be part of publicKeys');\n\n        // Sort public keys so that the order when signing and construction does not matter.\n        publicKeys = publicKeys.slice();\n        publicKeys.sort((a, b) => a.compare(b));\n        const combinations = [...ArrayUtils.k_combinations(publicKeys, minSignatures)];\n        const multiSigKeys = combinations.map(arr => PublicKey.sum(arr));\n        return new MultiSigWallet(keyPair, minSignatures, multiSigKeys);\n    }\n\n    private static _loadMultiSig(keyPair: KeyPair, buf: SerialBuffer): MultiSigWallet {\n        const minSignatures = buf.readUint8();\n        const numPublicKeys = buf.readUint8();\n        const publicKeys = [];\n        for (let i = 0; i < numPublicKeys; ++i) {\n            publicKeys.push(PublicKey.unserialize(buf));\n        }\n        return new MultiSigWallet(keyPair, minSignatures, publicKeys);\n    }\n\n    static override loadPlain(buf: Uint8Array | string): MultiSigWallet {\n        if (typeof buf === 'string') buf = BufferUtils.fromHex(buf);\n        if (!buf || buf.byteLength === 0) {\n            throw new Error('Invalid wallet seed');\n        }\n\n        const serialBuf = new SerialBuffer(buf);\n        const keyPair = KeyPair.unserialize(serialBuf);\n        return MultiSigWallet._loadMultiSig(keyPair, serialBuf);\n    }\n\n    static override async loadEncrypted(buf: Uint8Array | string, key: Uint8Array | string): Promise<MultiSigWallet> {\n        if (typeof buf === 'string') buf = BufferUtils.fromHex(buf);\n        if (typeof key === 'string') key = BufferUtils.fromUtf8(key);\n\n        const serialBuf = new SerialBuffer(buf);\n        const keyPair = await KeyPair.fromEncrypted(serialBuf, key);\n        return MultiSigWallet._loadMultiSig(keyPair, serialBuf);\n    }\n\n    private _minSignatures: number;\n    private _publicKeys: PublicKey[];\n\n    constructor(keyPair: KeyPair, minSignatures: number, publicKeys: PublicKey[]) {\n        super(keyPair);\n        this._minSignatures = minSignatures;\n        this._publicKeys = publicKeys;\n        this._publicKeys.sort((a, b) => a.compare(b));\n\n        const merkleRoot = MerkleTree.computeRoot(this._publicKeys);\n        /** @type {Address} */\n        this._address = Address.fromHash(merkleRoot);\n    }\n\n    override exportPlain(): SerialBuffer {\n        const buf = new SerialBuffer(this.exportedSize);\n        this._keyPair.serialize(buf);\n        buf.writeUint8(this._minSignatures);\n        buf.writeUint8(this._publicKeys.length);\n        for (const pubKey of this._publicKeys) {\n            pubKey.serialize(buf);\n        }\n        return buf;\n    }\n\n    get exportedSize(): number {\n        return this._keyPair.serializedSize\n            + /*minSignatures*/ 1\n            + /*count*/ 1\n            + this._publicKeys.reduce((sum, pubKey) => sum + pubKey.serializedSize, 0);\n    }\n\n    override async exportEncrypted(key: Uint8Array | string): Promise<SerialBuffer> {\n        if (typeof key === 'string') key = BufferUtils.fromUtf8(key);\n\n        const buf = new SerialBuffer(this.encryptedSize);\n        buf.write(await this._keyPair.exportEncrypted(key));\n        buf.writeUint8(this._minSignatures);\n        buf.writeUint8(this._publicKeys.length);\n        for (const pubKey of this._publicKeys) {\n            pubKey.serialize(buf);\n        }\n\n        return buf;\n    }\n\n    get encryptedSize(): number {\n        return this._keyPair.encryptedSize\n            + /*minSignatures*/ 1\n            + /*count*/ 1\n            + this._publicKeys.reduce((sum, pubKey) => sum + pubKey.serializedSize, 0);\n    }\n\n    /**\n     * Create a Transaction that still needs to be signed.\n     */\n    override createTransaction(recipientAddr: Address, value: number, fee: number, validityStartHeight: number): Transaction {\n        return new ExtendedTransaction(this._address, Account.Type.BASIC,\n            recipientAddr, Account.Type.BASIC, value, fee, validityStartHeight,\n            Transaction.Flag.NONE, new Uint8Array(0));\n    }\n\n    /**\n     * Creates a commitment pair for signing a transaction.\n     */\n    createCommitment(): CommitmentPair {\n        return CommitmentPair.generate();\n    }\n\n    partiallySignTransaction(transaction: Transaction, publicKeys: PublicKey[], aggregatedCommitment: Commitment, secret: RandomSecret): PartialSignature {\n        // Sort public keys to get the right combined public key.\n        publicKeys = publicKeys.slice();\n        publicKeys.sort((a, b) => a.compare(b));\n\n        return PartialSignature.create(this._keyPair.privateKey, this._keyPair.publicKey, publicKeys,\n            secret, aggregatedCommitment, transaction.serializeContent());\n    }\n\n    /**\n     * Sign a transaction by the owner of this Wallet.\n     * @ts-expect-error Cannot change arguments for method overrides */\n    override signTransaction(transaction: Transaction, aggregatedPublicKey: PublicKey, aggregatedCommitment: Commitment, signatures: PartialSignature[]): SignatureProof {\n        if (signatures.length !== this._minSignatures) {\n            throw new Error('Not enough signatures to complete this transaction');\n        }\n\n        const signature = Signature.fromPartialSignatures(aggregatedCommitment, signatures);\n        return SignatureProof.multiSig(aggregatedPublicKey, this._publicKeys, signature);\n    }\n\n    completeTransaction(transaction: Transaction, aggregatedPublicKey: PublicKey, aggregatedCommitment: Commitment, signatures: PartialSignature[]): Transaction {\n        const proof = this.signTransaction(transaction, aggregatedPublicKey, aggregatedCommitment, signatures);\n        transaction.proof = proof.serialize();\n        return transaction;\n    }\n\n    get minSignatures(): number {\n        return this._minSignatures;\n    }\n\n    get publicKeys(): PublicKey[] {\n        return this._publicKeys;\n    }\n}\n","import { Account } from \"./Account\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { SignatureProof } from \"./SignatureProof\";\nimport { Transaction } from \"./Transaction\";\n\n/**\n * This is a classic account that can send all his funds and receive any transaction.\n * All outgoing transactions are signed using the key corresponding to this address.\n */\nexport class BasicAccount extends Account {\n    static copy(o: BasicAccount): BasicAccount {\n        if (!o) return o;\n        return new BasicAccount(o._balance);\n    }\n\n    constructor(balance = 0) {\n        super(Account.Type.BASIC, balance);\n    }\n\n    static override unserialize(buf: SerialBuffer): BasicAccount {\n        const type = buf.readUint8();\n        if (type !== Account.Type.BASIC) throw new Error('Invalid account type');\n\n        const balance = buf.readUint64();\n        return new BasicAccount(balance);\n    }\n\n    static override fromPlain(o: Record<string, any>): BasicAccount {\n        if (!o) throw new Error('Invalid account');\n        return new BasicAccount(o.balance);\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     */\n     override equals(o: unknown): boolean {\n        return o instanceof BasicAccount\n            && this._type === o._type\n            && this._balance === o._balance;\n    }\n\n    override toString(): string {\n        return `BasicAccount{balance=${this._balance}}`;\n    }\n\n    static verifyOutgoingTransaction(transaction: Transaction): boolean {\n        return SignatureProof.verifyTransaction(transaction);\n    }\n\n    static verifyIncomingTransaction(transaction: Transaction): boolean {\n        if (transaction.data.byteLength > 64) return false;\n        return true;\n    }\n\n    override withBalance(balance: number): BasicAccount {\n        return new BasicAccount(balance);\n    }\n\n    // /**\n    //  * @param {Transaction} transaction\n    //  * @param {number} blockHeight\n    //  * @param {boolean} [revert]\n    //  * @return {Account}\n    //  */\n    // withIncomingTransaction(transaction, blockHeight, revert = false) {\n    //     if (!revert) {\n    //         const isContractCreation = transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION);\n    //         const isTypeChange = transaction.recipientType !== this._type;\n    //         if (isContractCreation !== isTypeChange) {\n    //             throw new Error('Data Error!');\n    //         }\n    //     }\n    //     return super.withIncomingTransaction(transaction, blockHeight, revert);\n    // }\n\n    // /**\n    //  * @param {Transaction} transaction\n    //  * @param {number} blockHeight\n    //  * @param {boolean} [revert]\n    //  * @return {Account}\n    //  */\n    // withContractCommand(transaction, blockHeight, revert = false) {\n    //     if (!revert && transaction.recipientType !== this._type && transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION)) {\n    //         // Contract creation\n    //         return Account.TYPE_MAP.get(transaction.recipientType).create(this._balance, blockHeight, transaction);\n    //     }\n    //     return this;\n    // }\n\n    override isInitial(): boolean {\n        return this._balance === 0;\n    }\n\n    static override dataToPlain(data: Uint8Array): Record<string, any> {\n        return Account.dataToPlain(data);\n    }\n\n    static override proofToPlain(proof: Uint8Array): Record<string, any> {\n        try {\n            const signatureProof = SignatureProof.unserialize(new SerialBuffer(proof));\n            return {\n                signature: signatureProof.signature?.toHex(),\n                publicKey: signatureProof.publicKey.toHex(),\n                signer: signatureProof.publicKey.toAddress().toPlain(),\n                pathLength: signatureProof.merklePath.nodes.length\n            };\n        } catch (e) {\n            return Account.proofToPlain(proof);\n        }\n    }\n}\n\nAccount.INITIAL = new BasicAccount(0);\nAccount.TYPE_MAP.set(Account.Type.BASIC, BasicAccount);\n","import { Account } from \"./Account\";\nimport { BasicAccount } from \"./BasicAccount\";\nimport { Transaction } from \"./Transaction\";\n\nexport abstract class Contract extends Account {\n    constructor(type: Account.Type, balance: number) {\n        super(type, balance);\n    }\n\n    static verifyIncomingTransaction(transaction: Transaction): boolean {\n        if (!transaction.recipient.equals(transaction.getContractCreationAddress())) {\n            return false;\n        }\n        return true;\n    }\n\n    override withIncomingTransaction(transaction: Transaction, blockHeight: number, revert = false): Account {\n        if (!revert && transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION)) {\n            // Contract already created\n            throw new Error('Data error');\n        }\n        return super.withIncomingTransaction(transaction, blockHeight, revert);\n    }\n\n\n    override withContractCommand(transaction: Transaction, blockHeight: number, revert = false): Account {\n        if (revert && transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION)) {\n            // Revert contract creation\n            return new BasicAccount(this.balance);\n        }\n        return this;\n    }\n}\n","import { Account } from \"./Account\";\nimport { Address } from \"./Address\";\nimport { Contract } from \"./Contract\";\nimport { NumberUtils } from \"./NumberUtils\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { SignatureProof } from \"./SignatureProof\";\nimport { Transaction } from \"./Transaction\";\n\nexport type PlainVestingContract = {\n\ttype: 'vesting',\n\tbalance: number,\n\towner: string,\n\tvestingStart: number,\n\tvestingStepBlocks: number,\n\tvestingStepAmount: number,\n\tvestingTotalAmount: number,\n}\n\nexport class VestingContract extends Contract {\n\tprivate _owner: Address;\n\tprivate _vestingStart: number;\n\tprivate _vestingStepBlocks: number;\n\tprivate _vestingStepAmount: number;\n\tprivate _vestingTotalAmount: number;\n\n    constructor(\n\t\tbalance = 0,\n\t\towner = Address.NULL,\n\t\tvestingStart = 0,\n\t\tvestingStepBlocks = 0,\n\t\tvestingStepAmount = balance,\n\t\tvestingTotalAmount = balance,\n\t) {\n        super(Account.Type.VESTING, balance);\n        if (!(owner instanceof Address)) throw new Error('Malformed owner address');\n        if (!NumberUtils.isUint32(vestingStart)) throw new Error('Malformed vestingStart');\n        if (!NumberUtils.isUint32(vestingStepBlocks)) throw new Error('Malformed vestingStepBlocks');\n        if (!NumberUtils.isUint64(vestingStepAmount)) throw new Error('Malformed vestingStepAmount');\n        if (!NumberUtils.isUint64(vestingTotalAmount)) throw new Error('Malformed vestingTotalAmount');\n\n        this._owner = owner;\n        this._vestingStart = vestingStart;\n        this._vestingStepBlocks = vestingStepBlocks;\n        this._vestingStepAmount = vestingStepAmount;\n        this._vestingTotalAmount = vestingTotalAmount;\n    }\n\n    static create(balance: number, blockHeight: number, transaction: Transaction): VestingContract {\n        /** @type {number} */\n        let vestingStart, vestingStepBlocks, vestingStepAmount, vestingTotalAmount;\n        const buf = new SerialBuffer(transaction.data);\n        const owner = Address.unserialize(buf);\n        vestingTotalAmount = transaction.value;\n        switch (transaction.data.length) {\n            case Address.SERIALIZED_SIZE + 4:\n                // Only block number: vest full amount at that block\n                vestingStart = 0;\n                vestingStepBlocks = buf.readUint32();\n                vestingStepAmount = vestingTotalAmount;\n                break;\n            case Address.SERIALIZED_SIZE + 16:\n                vestingStart = buf.readUint32();\n                vestingStepBlocks = buf.readUint32();\n                vestingStepAmount = buf.readUint64();\n                break;\n            case Address.SERIALIZED_SIZE + 24:\n                // Create a vesting account with some instantly vested funds or additional funds considered.\n                vestingStart = buf.readUint32();\n                vestingStepBlocks = buf.readUint32();\n                vestingStepAmount = buf.readUint64();\n                vestingTotalAmount = buf.readUint64();\n                break;\n            default:\n                throw new Error('Invalid transaction data');\n        }\n        return new VestingContract(balance, owner, vestingStart, vestingStepBlocks, vestingStepAmount, vestingTotalAmount);\n    }\n\n    static override unserialize(buf: SerialBuffer): VestingContract {\n        const type = buf.readUint8();\n        if (type !== Account.Type.VESTING) throw new Error('Invalid account type');\n\n        const balance = buf.readUint64();\n        const owner = Address.unserialize(buf);\n        const vestingStart = buf.readUint32();\n        const vestingStepBlocks = buf.readUint32();\n        const vestingStepAmount = buf.readUint64();\n        const vestingTotalAmount = buf.readUint64();\n        return new VestingContract(balance, owner, vestingStart, vestingStepBlocks, vestingStepAmount, vestingTotalAmount);\n    }\n\n    static override fromPlain(plain: Record<string, any>): VestingContract {\n        if (!plain) throw new Error('Invalid account');\n        return new VestingContract(plain.balance, Address.fromAny(plain.owner), plain.vestingStart, plain.vestingStepBlocks, plain.vestingStepAmount, plain.vestingTotalAmount);\n    }\n\n    /**\n     * Serialize this VestingContract object into binary form.\n     */\n     override serialize(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._owner.serialize(buf);\n        buf.writeUint32(this._vestingStart);\n        buf.writeUint32(this._vestingStepBlocks);\n        buf.writeUint64(this._vestingStepAmount);\n        buf.writeUint64(this._vestingTotalAmount);\n        return buf;\n    }\n\n    override get serializedSize(): number {\n        return super.serializedSize\n            + this._owner.serializedSize\n            + /*vestingStart*/ 4\n            + /*vestingStepBlocks*/ 4\n            + /*vestingStepAmount*/ 8\n            + /*vestingTotalAmount*/ 8;\n    }\n\n    get owner(): Address {\n        return this._owner;\n    }\n\n    get vestingStart(): number {\n        return this._vestingStart;\n    }\n\n    get vestingStepBlocks(): number {\n        return this._vestingStepBlocks;\n    }\n\n    get vestingStepAmount(): number {\n        return this._vestingStepAmount;\n    }\n\n    get vestingTotalAmount(): number {\n        return this._vestingTotalAmount;\n    }\n\n    override toString(): string {\n        return `VestingAccount{balance=${this._balance}, owner=${this._owner.toUserFriendlyAddress()}`;\n    }\n\n    override toPlain(): PlainVestingContract {\n        const plain = super.toPlain() as Partial<PlainVestingContract>;\n        plain.owner = this.owner.toPlain();\n        plain.vestingStart = this.vestingStart;\n        plain.vestingStepBlocks = this.vestingStepBlocks;\n        plain.vestingStepAmount = this.vestingStepAmount;\n        plain.vestingTotalAmount = this.vestingTotalAmount;\n        return plain as PlainVestingContract;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     */\n     override equals(o: unknown): boolean {\n        return o instanceof VestingContract\n            && this._type === o._type\n            && this._balance === o._balance\n            && this._owner.equals(o._owner)\n            && this._vestingStart === o._vestingStart\n            && this._vestingStepBlocks === o._vestingStepBlocks\n            && this._vestingStepAmount === o._vestingStepAmount\n            && this._vestingTotalAmount === o._vestingTotalAmount;\n    }\n\n    static verifyOutgoingTransaction(transaction: Transaction): boolean {\n        const buf = new SerialBuffer(transaction.proof);\n\n        if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n            return false;\n        }\n\n        if (buf.readPos !== buf.byteLength) {\n            return false;\n        }\n\n        return true;\n    }\n\n    static override verifyIncomingTransaction(transaction: Transaction): boolean {\n        switch (transaction.data.length) {\n            case Address.SERIALIZED_SIZE + 4:\n            case Address.SERIALIZED_SIZE + 16:\n            case Address.SERIALIZED_SIZE + 24:\n                return Contract.verifyIncomingTransaction(transaction);\n            default:\n                return false;\n        }\n    }\n\n    override withBalance(balance: number): VestingContract {\n        return new VestingContract(balance, this._owner, this._vestingStart, this._vestingStepBlocks, this._vestingStepAmount, this._vestingTotalAmount);\n    }\n\n    // withOutgoingTransaction(transaction: Transaction, blockHeight: number, transactionsCache: TransactionCache, revert = false): VestingContract { // TODO: TransactionCache\n    //     if (!revert) {\n    //         const minCap = this.getMinCap(blockHeight);\n    //         const newBalance = this._balance - transaction.value - transaction.fee;\n    //         if (newBalance < minCap) {\n    //             throw new Account.BalanceError();\n    //         }\n\n    //         const buf = new SerialBuffer(transaction.proof);\n    //         if (!SignatureProof.unserialize(buf).isSignedBy(this._owner)) {\n    //             throw new Account.ProofError();\n    //         }\n    //     }\n    //     return super.withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert);\n    // }\n\n    override withIncomingTransaction(transaction: Transaction, blockHeight: number, revert = false): VestingContract {\n        throw new Error('Illegal incoming transaction');\n    }\n\n    getMinCap(blockHeight: number): number {\n        return this._vestingStepBlocks && this._vestingStepAmount > 0\n            ? Math.max(0, this._vestingTotalAmount - Math.floor((blockHeight - this._vestingStart) / this._vestingStepBlocks) * this._vestingStepAmount)\n            : 0;\n    }\n\n\n    static override dataToPlain(data: Uint8Array): Record<string, any> {\n        try {\n            let vestingStart, vestingStepBlocks, vestingStepAmount, vestingTotalAmount;\n            const buf = new SerialBuffer(data);\n            const owner = Address.unserialize(buf);\n            switch (data.length) {\n                case Address.SERIALIZED_SIZE + 4:\n                    vestingStart = 0;\n                    vestingStepBlocks = buf.readUint32();\n                    break;\n                case Address.SERIALIZED_SIZE + 16:\n                    vestingStart = buf.readUint32();\n                    vestingStepBlocks = buf.readUint32();\n                    vestingStepAmount = buf.readUint64();\n                    break;\n                case Address.SERIALIZED_SIZE + 24:\n                    vestingStart = buf.readUint32();\n                    vestingStepBlocks = buf.readUint32();\n                    vestingStepAmount = buf.readUint64();\n                    vestingTotalAmount = buf.readUint64();\n                    break;\n                default:\n                    throw new Error('Invalid transaction data');\n            }\n            return {\n                owner: owner.toPlain(),\n                vestingStart,\n                vestingStepBlocks,\n                vestingStepAmount,\n                vestingTotalAmount\n            };\n        } catch (e) {\n            return Account.dataToPlain(data);\n        }\n    }\n\n    static override proofToPlain(proof: Uint8Array): Record<string, any> {\n        try {\n            const signatureProof = SignatureProof.unserialize(new SerialBuffer(proof));\n            return {\n                signature: signatureProof.signature?.toHex(),\n                publicKey: signatureProof.publicKey.toHex(),\n                signer: signatureProof.publicKey.toAddress().toPlain(),\n                pathLength: signatureProof.merklePath.nodes.length\n            };\n        } catch (e) {\n            return Account.proofToPlain(proof);\n        }\n    }\n}\n\nAccount.TYPE_MAP.set(Account.Type.VESTING, VestingContract);\n","import { Account } from \"./Account\";\nimport { Address } from \"./Address\";\nimport { Contract } from \"./Contract\";\nimport { Hash } from \"./Hash\";\nimport { NumberUtils } from \"./NumberUtils\";\nimport { SerialBuffer } from \"./SerialBuffer\";\nimport { SignatureProof } from \"./SignatureProof\";\nimport { Transaction } from \"./Transaction\";\n\nexport type PlainHashedTimeLockedContract = {\n\ttype: 'htlc',\n\tbalance: number,\n\tsender: string,\n\trecipient: string,\n\thashAlgorithm: string,\n\thashRoot: string,\n\thashCount: number,\n\ttimeout: number,\n\ttotalAmount: number,\n}\n\nclass HashedTimeLockedContract extends Contract {\n\tprivate _sender: Address;\n\tprivate _recipient: Address;\n\tprivate _hashRoot: Hash;\n\tprivate _hashCount: number;\n\tprivate _timeout: number;\n\tprivate _totalAmount: number;\n\n    constructor(\n\t\tbalance = 0,\n\t\tsender = Address.NULL,\n\t\trecipient = Address.NULL,\n\t\thashRoot = Hash.NULL,\n\t\thashCount = 1,\n\t\ttimeout = 0,\n\t\ttotalAmount = balance,\n\t) {\n        super(Account.Type.HTLC, balance);\n        if (!(sender instanceof Address)) throw new Error('Malformed sender address');\n        if (!(recipient instanceof Address)) throw new Error('Malformed recipient address');\n        if (!(hashRoot instanceof Hash)) throw new Error('Malformed hashRoot');\n        if (!NumberUtils.isUint8(hashCount) || hashCount === 0) throw new Error('Malformed hashCount');\n        if (!NumberUtils.isUint32(timeout)) throw new Error('Malformed timeout');\n        if (!NumberUtils.isUint64(totalAmount)) throw new Error('Malformed totalAmount');\n\n        this._sender = sender;\n        this._recipient = recipient;\n        this._hashRoot = hashRoot;\n        this._hashCount = hashCount;\n        this._timeout = timeout;\n        this._totalAmount = totalAmount;\n    }\n\n    static create(balance: number, blockHeight: number, transaction: Transaction): HashedTimeLockedContract {\n        const buf = new SerialBuffer(transaction.data);\n\n        const sender = Address.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n        const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n        const hashCount = buf.readUint8();\n        const timeout = buf.readUint32();\n\n        return new HashedTimeLockedContract(balance, sender, recipient, hashRoot, hashCount, timeout);\n    }\n\n    static override unserialize(buf: SerialBuffer): HashedTimeLockedContract {\n        const type = buf.readUint8();\n        if (type !== Account.Type.HTLC) throw new Error('Invalid account type');\n\n        const balance = buf.readUint64();\n        const sender = Address.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n        const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n        const hashCount = buf.readUint8();\n        const timeout = buf.readUint32();\n        const totalAmount = buf.readUint64();\n        return new HashedTimeLockedContract(balance, sender, recipient, hashRoot, hashCount, timeout, totalAmount);\n    }\n\n    static override fromPlain(plain: Record<string, any>): HashedTimeLockedContract {\n        if (!plain) throw new Error('Invalid account');\n        return new HashedTimeLockedContract(plain.balance, Address.fromAny(plain.sender), Address.fromAny(plain.recipient), Hash.fromAny(plain.hashRoot, Hash.Algorithm.fromAny(plain.hashAlgorithm)), plain.hashCount, plain.timeout, plain.totalAmount);\n    }\n\n\n    /**\n     * Serialize this HTLC object into binary form.\n     */\n     override serialize(buf?: SerialBuffer): SerialBuffer {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._sender.serialize(buf);\n        this._recipient.serialize(buf);\n        buf.writeUint8(this._hashRoot.algorithm);\n        this._hashRoot.serialize(buf);\n        buf.writeUint8(this._hashCount);\n        buf.writeUint32(this._timeout);\n        buf.writeUint64(this._totalAmount);\n        return buf;\n    }\n\n    override get serializedSize(): number {\n        return super.serializedSize\n            + this._sender.serializedSize\n            + this._recipient.serializedSize\n            + /*hashAlgorithm*/ 1\n            + this._hashRoot.serializedSize\n            + /*hashCount*/ 1\n            + /*timeout*/ 4\n            + /*totalAmount*/ 8;\n    }\n\n    get sender(): Address {\n        return this._sender;\n    }\n\n    get recipient(): Address {\n        return this._recipient;\n    }\n\n    get hashAlgorithm(): Hash.Algorithm {\n        return this._hashRoot.algorithm;\n    }\n\n    get hashRoot(): Hash {\n        return this._hashRoot;\n    }\n\n    get hashCount(): number {\n        return this._hashCount;\n    }\n\n    get timeout(): number {\n        return this._timeout;\n    }\n\n    get totalAmount(): number {\n        return this._totalAmount;\n    }\n\n    override toString(): string {\n        return `HashedTimeLockedContract{balance=${this._balance}, sender=${this._sender.toUserFriendlyAddress(false)}, recipient=${this._sender.toUserFriendlyAddress(false)}, amount=${this._totalAmount}/${this._hashCount}, timeout=${this._timeout}}`;\n    }\n\n    override toPlain(): PlainHashedTimeLockedContract {\n        const plain = super.toPlain() as Partial<PlainHashedTimeLockedContract>;\n        plain.sender = this.sender.toPlain();\n        plain.recipient = this.recipient.toPlain();\n        plain.hashAlgorithm = Hash.Algorithm.toString(this.hashRoot.algorithm);\n        plain.hashRoot = this.hashRoot.toPlain();\n        plain.hashCount = this.hashCount;\n        plain.timeout = this.timeout;\n        plain.totalAmount = this.totalAmount;\n        return plain as PlainHashedTimeLockedContract;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     */\n     override equals(o: unknown): boolean {\n        return o instanceof HashedTimeLockedContract\n            && this._type === o._type\n            && this._balance === o._balance\n            && this._sender.equals(o._sender)\n            && this._recipient.equals(o._recipient)\n            && this._hashRoot.equals(o._hashRoot)\n            && this._hashCount === o._hashCount\n            && this._timeout === o._timeout\n            && this._totalAmount === o._totalAmount;\n    }\n\n    static verifyOutgoingTransaction(transaction: Transaction): boolean {\n        try {\n            const buf = new SerialBuffer(transaction.proof);\n            const type = buf.readUint8();\n            switch (type) {\n                case HashedTimeLockedContract.ProofType.REGULAR_TRANSFER: {\n                    const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n                    const hashDepth = buf.readUint8();\n                    const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n                    let preImage = Hash.unserialize(buf, hashAlgorithm);\n\n                    // Verify that the preImage hashed hashDepth times matches the _provided_ hashRoot.\n                    for (let i = 0; i < hashDepth; ++i) {\n                        preImage = Hash.compute(preImage.array, hashAlgorithm);\n                    }\n                    if (!hashRoot.equals(preImage)) {\n                        return false;\n                    }\n\n                    // Signature proof of the HTLC recipient\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n                    break;\n                }\n                case HashedTimeLockedContract.ProofType.EARLY_RESOLVE: {\n                    // Signature proof of the HTLC recipient\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n\n                    // Signature proof of the HTLC creator\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n                    break;\n                }\n                case HashedTimeLockedContract.ProofType.TIMEOUT_RESOLVE:\n                    // Signature proof of the HTLC creator\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n                    break;\n                default:\n                    return false;\n            }\n\n            // Reject overlong proof.\n            if (buf.readPos !== buf.byteLength) {\n                return false;\n            }\n\n            return true; // Accept\n        } catch (e) {\n            return false;\n        }\n    }\n\n    static override verifyIncomingTransaction(transaction: Transaction): boolean {\n        try {\n            const buf = new SerialBuffer(transaction.data);\n\n            Address.unserialize(buf); // sender address\n            Address.unserialize(buf); // recipient address\n            const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n            Hash.unserialize(buf, hashAlgorithm);\n            const hashCount = buf.readUint8(); // hash count\n            buf.readUint32(); // timeout\n\n            if (hashCount === 0) {\n                return false;\n            }\n\n            // Blacklist Argon2 hash function.\n            if (hashAlgorithm === Hash.Algorithm.ARGON2D) {\n                return false;\n            }\n\n            if (buf.readPos !== buf.byteLength) {\n                return false;\n            }\n\n            return Contract.verifyIncomingTransaction(transaction);\n        } catch (e) {\n            return false;\n        }\n    }\n\n    override withBalance(balance: number): HashedTimeLockedContract {\n        return new HashedTimeLockedContract(balance, this._sender, this._recipient, this._hashRoot, this._hashCount, this._timeout, this._totalAmount);\n    }\n\n    // withOutgoingTransaction(transaction: Transaction, blockHeight: number, transactionsCache: TransactionCache, revert = false): HashedTimeLockedContract { // TODO: TransactionCache\n    //     const buf = new SerialBuffer(transaction.proof);\n    //     const type = buf.readUint8();\n    //     let minCap = 0;\n    //     switch (type) {\n    //         case HashedTimeLockedContract.ProofType.REGULAR_TRANSFER: {\n    //             // Check that the contract has not expired yet.\n    //             if (this._timeout < blockHeight) {\n    //                 throw new Account.ProofError();\n    //             }\n\n    //             // Check that the provided hashRoot is correct.\n    //             const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n    //             const hashDepth = buf.readUint8();\n    //             const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n    //             if (!hashRoot.equals(this._hashRoot)) {\n    //                 throw new Account.ProofError();\n    //             }\n\n    //             // Ignore the preImage.\n    //             Hash.unserialize(buf, hashAlgorithm);\n\n    //             // Verify that the transaction is signed by the authorized recipient.\n    //             if (!SignatureProof.unserialize(buf).isSignedBy(this._recipient)) {\n    //                 throw new Account.ProofError();\n    //             }\n\n    //             minCap = Math.max(0, Math.floor((1 - (hashDepth / this._hashCount)) * this._totalAmount));\n\n    //             break;\n    //         }\n    //         case HashedTimeLockedContract.ProofType.EARLY_RESOLVE: {\n    //             if (!SignatureProof.unserialize(buf).isSignedBy(this._recipient)) {\n    //                 throw new Account.ProofError();\n    //             }\n\n    //             if (!SignatureProof.unserialize(buf).isSignedBy(this._sender)) {\n    //                 throw new Account.ProofError();\n    //             }\n\n    //             break;\n    //         }\n    //         case HashedTimeLockedContract.ProofType.TIMEOUT_RESOLVE: {\n    //             if (this._timeout >= blockHeight) {\n    //                 throw new Account.ProofError();\n    //             }\n\n    //             if (!SignatureProof.unserialize(buf).isSignedBy(this._sender)) {\n    //                 throw new Account.ProofError();\n    //             }\n\n    //             break;\n    //         }\n    //         default:\n    //             throw new Account.ProofError();\n    //     }\n\n    //     if (!revert) {\n    //         const newBalance = this._balance - transaction.value - transaction.fee;\n    //         if (newBalance < minCap) {\n    //             throw new Account.BalanceError();\n    //         }\n    //     }\n\n    //     return super.withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert);\n    // }\n\n\n    override withIncomingTransaction(transaction: Transaction, blockHeight: number, revert = false): HashedTimeLockedContract {\n        throw new Error('Illegal incoming transaction');\n    }\n\n    static override dataToPlain(data: Uint8Array): Record<string, any> {\n        try {\n            const buf = new SerialBuffer(data);\n\n            const sender = Address.unserialize(buf);\n            const recipient = Address.unserialize(buf);\n            const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n            const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n            const hashCount = buf.readUint8();\n            const timeout = buf.readUint32();\n\n            return {\n                sender: sender.toPlain(),\n                recipient: recipient.toPlain(),\n                hashAlgorithm: Hash.Algorithm.toString(hashAlgorithm),\n                hashRoot: hashRoot.toPlain(),\n                hashCount,\n                timeout\n            };\n        } catch (e) {\n            return Account.dataToPlain(data);\n        }\n    }\n\n    static override proofToPlain(proof: Uint8Array): Record<string, any> {\n        try {\n            const buf = new SerialBuffer(proof);\n            const type = buf.readUint8();\n            switch (type) {\n                case HashedTimeLockedContract.ProofType.REGULAR_TRANSFER: {\n                    const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n                    const hashDepth = buf.readUint8();\n                    const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n                    const preImage = Hash.unserialize(buf, hashAlgorithm);\n                    const signatureProof = SignatureProof.unserialize(buf);\n\n                    return {\n                        type: HashedTimeLockedContract.ProofType.toString(type),\n                        hashAlgorithm: Hash.Algorithm.toString(hashAlgorithm),\n                        hashDepth,\n                        hashRoot: hashRoot.toPlain(),\n                        preImage: preImage.toPlain(),\n                        signer: signatureProof.publicKey.toAddress().toPlain(),\n                        signature: signatureProof.signature?.toHex(),\n                        publicKey: signatureProof.publicKey.toHex(),\n                        pathLength: signatureProof.merklePath.nodes.length\n                    };\n                }\n                case HashedTimeLockedContract.ProofType.EARLY_RESOLVE: {\n                    const signatureProof = SignatureProof.unserialize(buf);\n                    const creatorSignatureProof = SignatureProof.unserialize(buf);\n                    return {\n                        type: HashedTimeLockedContract.ProofType.toString(type),\n                        signer: signatureProof.publicKey.toAddress().toPlain(),\n                        signature: signatureProof.signature?.toHex(),\n                        publicKey: signatureProof.publicKey.toHex(),\n                        pathLength: signatureProof.merklePath.nodes.length,\n                        creator: creatorSignatureProof.publicKey.toAddress().toPlain(),\n                        creatorSignature: creatorSignatureProof.signature?.toHex(),\n                        creatorPublicKey: creatorSignatureProof.publicKey.toHex(),\n                        creatorPathLength: creatorSignatureProof.merklePath.nodes.length\n                    };\n                }\n                case HashedTimeLockedContract.ProofType.TIMEOUT_RESOLVE: {\n                    const creatorSignatureProof = SignatureProof.unserialize(buf);\n                    return {\n                        type: HashedTimeLockedContract.ProofType.toString(type),\n                        creator: creatorSignatureProof.publicKey.toAddress().toPlain(),\n                        creatorSignature: creatorSignatureProof.signature?.toHex(),\n                        creatorPublicKey: creatorSignatureProof.publicKey.toHex(),\n                        creatorPathLength: creatorSignatureProof.merklePath.nodes.length\n                    };\n                }\n                default:\n                    throw new Error('Invalid proof type');\n            }\n        } catch (e) {\n            return Account.proofToPlain(proof);\n        }\n    }\n}\n\nnamespace HashedTimeLockedContract {\n\texport enum ProofType {\n\t\tREGULAR_TRANSFER = 1,\n\t\tEARLY_RESOLVE = 2,\n\t\tTIMEOUT_RESOLVE = 3,\n\t}\n\n\texport namespace ProofType {\n\t\texport function toString(proofType: HashedTimeLockedContract.ProofType): string {\n\t\t\tswitch (proofType) {\n\t\t\t\tcase HashedTimeLockedContract.ProofType.REGULAR_TRANSFER: return 'regular-transfer';\n\t\t\t\tcase HashedTimeLockedContract.ProofType.EARLY_RESOLVE: return 'early-resolve';\n\t\t\t\tcase HashedTimeLockedContract.ProofType.TIMEOUT_RESOLVE: return 'timeout-resolve';\n\t\t\t\tdefault: throw new Error('Invalid proof type');\n\t\t\t}\n\t\t}\n\t}\n}\n\nAccount.TYPE_MAP.set(Account.Type.HTLC, HashedTimeLockedContract);\n\nexport { HashedTimeLockedContract };\n","import nimiqWasm from \"./wasm/worker-wasm.wasm\";\nimport { setWasmInit, WasmHelper, WasmSource } from \"./WasmHelper\";\nsetWasmInit(() => nimiqWasm());\n\nexport * from \"./lib\";\n\nexport async function initialize(options?: { wasm: WasmSource }) {\n\tif (options?.wasm) console.warn('Calling initialize() with options.wasm is not necessary for the standard version of this library, as the WASM is already included.');\n\treturn WasmHelper.doImport();\n};\n","// @ts-nocheck\n\nexport function init(Module) {\n    Module = Module || {};\n    var Module = Module;\n    var Module;\n    if (!Module) Module = eval(\"(function() { try { return Module || {} } catch(e) { return {} } })()\");\n    var moduleOverrides = {};\n    for (var key in Module) {\n        if (Module.hasOwnProperty(key)) {\n            moduleOverrides[key] = Module[key]\n        }\n    }\n    var ENVIRONMENT_IS_WEB = false;\n    var ENVIRONMENT_IS_WORKER = false;\n    var ENVIRONMENT_IS_NODE = false;\n    var ENVIRONMENT_IS_SHELL = false;\n    if (Module[\"ENVIRONMENT\"]) {\n        if (Module[\"ENVIRONMENT\"] === \"WEB\") {\n            ENVIRONMENT_IS_WEB = true\n        } else if (Module[\"ENVIRONMENT\"] === \"WORKER\") {\n            ENVIRONMENT_IS_WORKER = true\n        } else if (Module[\"ENVIRONMENT\"] === \"NODE\") {\n            ENVIRONMENT_IS_NODE = true\n        } else if (Module[\"ENVIRONMENT\"] === \"SHELL\") {\n            ENVIRONMENT_IS_SHELL = true\n        } else {\n            throw new Error(\"The provided Module['ENVIRONMENT'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.\")\n        }\n    } else {\n        ENVIRONMENT_IS_WEB = typeof window === \"object\";\n        ENVIRONMENT_IS_WORKER = typeof importScripts === \"function\";\n        ENVIRONMENT_IS_NODE = typeof process === \"object\" && typeof require === \"function\" && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;\n        ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER\n    }\n    if (ENVIRONMENT_IS_NODE) {\n        if (!Module[\"print\"]) Module[\"print\"] = console.log;\n        if (!Module[\"printErr\"]) Module[\"printErr\"] = console.warn;\n        var nodeFS;\n        var nodePath;\n        Module[\"read\"] = function read(filename, binary) {\n            if (!nodeFS) nodeFS = require(\"fs\");\n            if (!nodePath) nodePath = require(\"path\");\n            filename = nodePath[\"normalize\"](filename);\n            var ret = nodeFS[\"readFileSync\"](filename);\n            return binary ? ret : ret.toString()\n        };\n        Module[\"readBinary\"] = function readBinary(filename) {\n            var ret = Module[\"read\"](filename, true);\n            if (!ret.buffer) {\n                ret = new Uint8Array(ret)\n            }\n            assert(ret.buffer);\n            return ret\n        };\n        Module[\"load\"] = function load(f) {\n            globalEval(read(f))\n        };\n        if (!Module[\"thisProgram\"]) {\n            if (process[\"argv\"].length > 1) {\n                Module[\"thisProgram\"] = process[\"argv\"][1].replace(/\\\\/g, \"/\")\n            } else {\n                Module[\"thisProgram\"] = \"unknown-program\"\n            }\n        }\n        Module[\"arguments\"] = process[\"argv\"].slice(2);\n        if (typeof module !== \"undefined\") {\n            module[\"exports\"] = Module\n        }\n        process[\"on\"](\"uncaughtException\", function(ex) {\n            if (!(ex instanceof ExitStatus)) {\n                throw ex\n            }\n        });\n        Module[\"inspect\"] = function() {\n            return \"[Emscripten Module object]\"\n        }\n    } else if (ENVIRONMENT_IS_SHELL) {\n        if (!Module[\"print\"]) Module[\"print\"] = print;\n        if (typeof printErr != \"undefined\") Module[\"printErr\"] = printErr;\n        if (typeof read != \"undefined\") {\n            Module[\"read\"] = read\n        } else {\n            Module[\"read\"] = function read() {\n                throw \"no read() available\"\n            }\n        }\n        Module[\"readBinary\"] = function readBinary(f) {\n            if (typeof readbuffer === \"function\") {\n                return new Uint8Array(readbuffer(f))\n            }\n            var data = read(f, \"binary\");\n            assert(typeof data === \"object\");\n            return data\n        };\n        if (typeof scriptArgs != \"undefined\") {\n            Module[\"arguments\"] = scriptArgs\n        } else if (typeof arguments != \"undefined\") {\n            Module[\"arguments\"] = arguments\n        }\n        if (typeof quit === \"function\") {\n            Module[\"quit\"] = function(status, toThrow) {\n                quit(status)\n            }\n        }\n        eval(\"if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined\")\n    } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n        Module[\"read\"] = function read(url) {\n            var xhr = new XMLHttpRequest;\n            xhr.open(\"GET\", url, false);\n            xhr.send(null);\n            return xhr.responseText\n        };\n        if (ENVIRONMENT_IS_WORKER) {\n            Module[\"readBinary\"] = function read(url) {\n                var xhr = new XMLHttpRequest;\n                xhr.open(\"GET\", url, false);\n                xhr.responseType = \"arraybuffer\";\n                xhr.send(null);\n                return xhr.response\n            }\n        }\n        Module[\"readAsync\"] = function readAsync(url, onload, onerror) {\n            var xhr = new XMLHttpRequest;\n            xhr.open(\"GET\", url, true);\n            xhr.responseType = \"arraybuffer\";\n            xhr.onload = function xhr_onload() {\n                if (xhr.status == 200 || xhr.status == 0 && xhr.response) {\n                    onload(xhr.response)\n                } else {\n                    onerror()\n                }\n            };\n            xhr.onerror = onerror;\n            xhr.send(null)\n        };\n        if (typeof arguments != \"undefined\") {\n            Module[\"arguments\"] = arguments\n        }\n        if (typeof console !== \"undefined\") {\n            if (!Module[\"print\"]) Module[\"print\"] = function print(x) {\n                console.log(x)\n            };\n            if (!Module[\"printErr\"]) Module[\"printErr\"] = function printErr(x) {\n                console.warn(x)\n            }\n        } else {\n            var TRY_USE_DUMP = false;\n            if (!Module[\"print\"]) Module[\"print\"] = TRY_USE_DUMP && typeof dump !== \"undefined\" ? function(x) {\n                dump(x)\n            } : function(x) {}\n        }\n        if (ENVIRONMENT_IS_WORKER) {\n            Module[\"load\"] = importScripts\n        }\n        if (typeof Module[\"setWindowTitle\"] === \"undefined\") {\n            Module[\"setWindowTitle\"] = function(title) {\n                document.title = title\n            }\n        }\n    } else {\n        throw \"Unknown runtime environment. Where are we?\"\n    }\n\n    function globalEval(x) {\n        eval.call(null, x)\n    }\n    if (!Module[\"load\"] && Module[\"read\"]) {\n        Module[\"load\"] = function load(f) {\n            globalEval(Module[\"read\"](f))\n        }\n    }\n    if (!Module[\"print\"]) {\n        Module[\"print\"] = function() {}\n    }\n    if (!Module[\"printErr\"]) {\n        Module[\"printErr\"] = Module[\"print\"]\n    }\n    if (!Module[\"arguments\"]) {\n        Module[\"arguments\"] = []\n    }\n    if (!Module[\"thisProgram\"]) {\n        Module[\"thisProgram\"] = \"./this.program\"\n    }\n    if (!Module[\"quit\"]) {\n        Module[\"quit\"] = function(status, toThrow) {\n            throw toThrow\n        }\n    }\n    Module.print = Module[\"print\"];\n    Module.printErr = Module[\"printErr\"];\n    Module[\"preRun\"] = [];\n    Module[\"postRun\"] = [];\n    for (var key in moduleOverrides) {\n        if (moduleOverrides.hasOwnProperty(key)) {\n            Module[key] = moduleOverrides[key]\n        }\n    }\n    moduleOverrides = undefined;\n    var Runtime = {\n        setTempRet0: function(value) {\n            tempRet0 = value;\n            return value\n        },\n        getTempRet0: function() {\n            return tempRet0\n        },\n        stackSave: function() {\n            return STACKTOP\n        },\n        stackRestore: function(stackTop) {\n            STACKTOP = stackTop\n        },\n        getNativeTypeSize: function(type) {\n            switch (type) {\n                case \"i1\":\n                case \"i8\":\n                    return 1;\n                case \"i16\":\n                    return 2;\n                case \"i32\":\n                    return 4;\n                case \"i64\":\n                    return 8;\n                case \"float\":\n                    return 4;\n                case \"double\":\n                    return 8;\n                default: {\n                    if (type[type.length - 1] === \"*\") {\n                        return Runtime.QUANTUM_SIZE\n                    } else if (type[0] === \"i\") {\n                        var bits = parseInt(type.substr(1));\n                        assert(bits % 8 === 0);\n                        return bits / 8\n                    } else {\n                        return 0\n                    }\n                }\n            }\n        },\n        getNativeFieldSize: function(type) {\n            return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE)\n        },\n        STACK_ALIGN: 16,\n        prepVararg: function(ptr, type) {\n            if (type === \"double\" || type === \"i64\") {\n                if (ptr & 7) {\n                    assert((ptr & 7) === 4);\n                    ptr += 4\n                }\n            } else {\n                assert((ptr & 3) === 0)\n            }\n            return ptr\n        },\n        getAlignSize: function(type, size, vararg) {\n            if (!vararg && (type == \"i64\" || type == \"double\")) return 8;\n            if (!type) return Math.min(size, 8);\n            return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE)\n        },\n        dynCall: function(sig, ptr, args) {\n            if (args && args.length) {\n                return Module[\"dynCall_\" + sig].apply(null, [ptr].concat(args))\n            } else {\n                return Module[\"dynCall_\" + sig].call(null, ptr)\n            }\n        },\n        functionPointers: [],\n        addFunction: function(func) {\n            for (var i = 0; i < Runtime.functionPointers.length; i++) {\n                if (!Runtime.functionPointers[i]) {\n                    Runtime.functionPointers[i] = func;\n                    return 2 * (1 + i)\n                }\n            }\n            throw \"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.\"\n        },\n        removeFunction: function(index) {\n            Runtime.functionPointers[(index - 2) / 2] = null\n        },\n        warnOnce: function(text) {\n            if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};\n            if (!Runtime.warnOnce.shown[text]) {\n                Runtime.warnOnce.shown[text] = 1;\n                Module.printErr(text)\n            }\n        },\n        funcWrappers: {},\n        getFuncWrapper: function(func, sig) {\n            assert(sig);\n            if (!Runtime.funcWrappers[sig]) {\n                Runtime.funcWrappers[sig] = {}\n            }\n            var sigCache = Runtime.funcWrappers[sig];\n            if (!sigCache[func]) {\n                if (sig.length === 1) {\n                    sigCache[func] = function dynCall_wrapper() {\n                        return Runtime.dynCall(sig, func)\n                    }\n                } else if (sig.length === 2) {\n                    sigCache[func] = function dynCall_wrapper(arg) {\n                        return Runtime.dynCall(sig, func, [arg])\n                    }\n                } else {\n                    sigCache[func] = function dynCall_wrapper() {\n                        return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments))\n                    }\n                }\n            }\n            return sigCache[func]\n        },\n        getCompilerSetting: function(name) {\n            throw \"You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work\"\n        },\n        stackAlloc: function(size) {\n            var ret = STACKTOP;\n            STACKTOP = STACKTOP + size | 0;\n            STACKTOP = STACKTOP + 15 & -16;\n            return ret\n        },\n        staticAlloc: function(size) {\n            var ret = STATICTOP;\n            STATICTOP = STATICTOP + size | 0;\n            STATICTOP = STATICTOP + 15 & -16;\n            return ret\n        },\n        dynamicAlloc: function(size) {\n            var ret = HEAP32[DYNAMICTOP_PTR >> 2];\n            var end = (ret + size + 15 | 0) & -16;\n            HEAP32[DYNAMICTOP_PTR >> 2] = end;\n            if (end >= TOTAL_MEMORY) {\n                var success = enlargeMemory();\n                if (!success) {\n                    HEAP32[DYNAMICTOP_PTR >> 2] = ret;\n                    return 0\n                }\n            }\n            return ret\n        },\n        alignMemory: function(size, quantum) {\n            var ret = size = Math.ceil(size / (quantum ? quantum : 16)) * (quantum ? quantum : 16);\n            return ret\n        },\n        makeBigInt: function(low, high, unsigned) {\n            var ret = unsigned ? +(low >>> 0) + +(high >>> 0) * 4294967296 : +(low >>> 0) + +(high | 0) * 4294967296;\n            return ret\n        },\n        GLOBAL_BASE: 1024,\n        QUANTUM_SIZE: 4,\n        __dummy__: 0\n    };\n    Runtime[\"addFunction\"] = Runtime.addFunction;\n    Runtime[\"removeFunction\"] = Runtime.removeFunction;\n    var ABORT = 0;\n    var EXITSTATUS = 0;\n\n    function assert(condition, text) {\n        if (!condition) {\n            abort(\"Assertion failed: \" + text)\n        }\n    }\n    var globalScope = this;\n\n    function getCFunc(ident) {\n        var func = Module[\"_\" + ident];\n        if (!func) {\n            try {\n                func = eval(\"_\" + ident)\n            } catch (e) {}\n        }\n        assert(func, \"Cannot call unknown function \" + ident + \" (perhaps LLVM optimizations or closure removed it?)\");\n        return func\n    }\n    var cwrap, ccall;\n    (function() {\n        var JSfuncs = {\n            stackSave: function() {\n                Runtime.stackSave()\n            },\n            stackRestore: function() {\n                Runtime.stackRestore()\n            },\n            arrayToC: function(arr) {\n                var ret = Runtime.stackAlloc(arr.length);\n                writeArrayToMemory(arr, ret);\n                return ret\n            },\n            stringToC: function(str) {\n                var ret = 0;\n                if (str !== null && str !== undefined && str !== 0) {\n                    var len = (str.length << 2) + 1;\n                    ret = Runtime.stackAlloc(len);\n                    stringToUTF8(str, ret, len)\n                }\n                return ret\n            }\n        };\n        var toC = {\n            string: JSfuncs[\"stringToC\"],\n            array: JSfuncs[\"arrayToC\"]\n        };\n        ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {\n            var func = getCFunc(ident);\n            var cArgs = [];\n            var stack = 0;\n            if (args) {\n                for (var i = 0; i < args.length; i++) {\n                    var converter = toC[argTypes[i]];\n                    if (converter) {\n                        if (stack === 0) stack = Runtime.stackSave();\n                        cArgs[i] = converter(args[i])\n                    } else {\n                        cArgs[i] = args[i]\n                    }\n                }\n            }\n            var ret = func.apply(null, cArgs);\n            if (returnType === \"string\") ret = Pointer_stringify(ret);\n            if (stack !== 0) {\n                if (opts && opts.async) {\n                    EmterpreterAsync.asyncFinalizers.push(function() {\n                        Runtime.stackRestore(stack)\n                    });\n                    return\n                }\n                Runtime.stackRestore(stack)\n            }\n            return ret\n        };\n        var sourceRegex = /^function\\s*[a-zA-Z$_0-9]*\\s*\\(([^)]*)\\)\\s*{\\s*([^*]*?)[\\s;]*(?:return\\s*(.*?)[;\\s]*)?}$/;\n\n        function parseJSFunc(jsfunc) {\n            var parsed = jsfunc.toString().match(sourceRegex).slice(1);\n            return {\n                arguments: parsed[0],\n                body: parsed[1],\n                returnValue: parsed[2]\n            }\n        }\n        var JSsource = null;\n\n        function ensureJSsource() {\n            if (!JSsource) {\n                JSsource = {};\n                for (var fun in JSfuncs) {\n                    if (JSfuncs.hasOwnProperty(fun)) {\n                        JSsource[fun] = parseJSFunc(JSfuncs[fun])\n                    }\n                }\n            }\n        }\n        cwrap = function cwrap(ident, returnType, argTypes) {\n            argTypes = argTypes || [];\n            var cfunc = getCFunc(ident);\n            var numericArgs = argTypes.every(function(type) {\n                return type === \"number\"\n            });\n            var numericRet = returnType !== \"string\";\n            if (numericRet && numericArgs) {\n                return cfunc\n            }\n            var argNames = argTypes.map(function(x, i) {\n                return \"$\" + i\n            });\n            var funcstr = \"(function(\" + argNames.join(\",\") + \") {\";\n            var nargs = argTypes.length;\n            if (!numericArgs) {\n                ensureJSsource();\n                funcstr += \"var stack = \" + JSsource[\"stackSave\"].body + \";\";\n                for (var i = 0; i < nargs; i++) {\n                    var arg = argNames[i],\n                        type = argTypes[i];\n                    if (type === \"number\") continue;\n                    var convertCode = JSsource[type + \"ToC\"];\n                    funcstr += \"var \" + convertCode.arguments + \" = \" + arg + \";\";\n                    funcstr += convertCode.body + \";\";\n                    funcstr += arg + \"=(\" + convertCode.returnValue + \");\"\n                }\n            }\n            var cfuncname = parseJSFunc(function() {\n                return cfunc\n            }).returnValue;\n            funcstr += \"var ret = \" + cfuncname + \"(\" + argNames.join(\",\") + \");\";\n            if (!numericRet) {\n                var strgfy = parseJSFunc(function() {\n                    return Pointer_stringify\n                }).returnValue;\n                funcstr += \"ret = \" + strgfy + \"(ret);\"\n            }\n            if (!numericArgs) {\n                ensureJSsource();\n                funcstr += JSsource[\"stackRestore\"].body.replace(\"()\", \"(stack)\") + \";\"\n            }\n            funcstr += \"return ret})\";\n            return eval(funcstr)\n        }\n    })();\n\n    function setValue(ptr, value, type, noSafe) {\n        type = type || \"i8\";\n        if (type.charAt(type.length - 1) === \"*\") type = \"i32\";\n        switch (type) {\n            case \"i1\":\n                HEAP8[ptr >> 0] = value;\n                break;\n            case \"i8\":\n                HEAP8[ptr >> 0] = value;\n                break;\n            case \"i16\":\n                HEAP16[ptr >> 1] = value;\n                break;\n            case \"i32\":\n                HEAP32[ptr >> 2] = value;\n                break;\n            case \"i64\":\n                tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];\n                break;\n            case \"float\":\n                HEAPF32[ptr >> 2] = value;\n                break;\n            case \"double\":\n                HEAPF64[ptr >> 3] = value;\n                break;\n            default:\n                abort(\"invalid type for setValue: \" + type)\n        }\n    }\n\n    function getValue(ptr, type, noSafe) {\n        type = type || \"i8\";\n        if (type.charAt(type.length - 1) === \"*\") type = \"i32\";\n        switch (type) {\n            case \"i1\":\n                return HEAP8[ptr >> 0];\n            case \"i8\":\n                return HEAP8[ptr >> 0];\n            case \"i16\":\n                return HEAP16[ptr >> 1];\n            case \"i32\":\n                return HEAP32[ptr >> 2];\n            case \"i64\":\n                return HEAP32[ptr >> 2];\n            case \"float\":\n                return HEAPF32[ptr >> 2];\n            case \"double\":\n                return HEAPF64[ptr >> 3];\n            default:\n                abort(\"invalid type for setValue: \" + type)\n        }\n        return null\n    }\n    var ALLOC_NORMAL = 0;\n    var ALLOC_STACK = 1;\n    var ALLOC_STATIC = 2;\n    var ALLOC_DYNAMIC = 3;\n    var ALLOC_NONE = 4;\n\n    function allocate(slab, types, allocator, ptr) {\n        var zeroinit, size;\n        if (typeof slab === \"number\") {\n            zeroinit = true;\n            size = slab\n        } else {\n            zeroinit = false;\n            size = slab.length\n        }\n        var singleType = typeof types === \"string\" ? types : null;\n        var ret;\n        if (allocator == ALLOC_NONE) {\n            ret = ptr\n        } else {\n            ret = [typeof _malloc === \"function\" ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length))\n        }\n        if (zeroinit) {\n            var ptr = ret,\n                stop;\n            assert((ret & 3) == 0);\n            stop = ret + (size & ~3);\n            for (; ptr < stop; ptr += 4) {\n                HEAP32[ptr >> 2] = 0\n            }\n            stop = ret + size;\n            while (ptr < stop) {\n                HEAP8[ptr++ >> 0] = 0\n            }\n            return ret\n        }\n        if (singleType === \"i8\") {\n            if (slab.subarray || slab.slice) {\n                HEAPU8.set(slab, ret)\n            } else {\n                HEAPU8.set(new Uint8Array(slab), ret)\n            }\n            return ret\n        }\n        var i = 0,\n            type, typeSize, previousType;\n        while (i < size) {\n            var curr = slab[i];\n            if (typeof curr === \"function\") {\n                curr = Runtime.getFunctionIndex(curr)\n            }\n            type = singleType || types[i];\n            if (type === 0) {\n                i++;\n                continue\n            }\n            if (type == \"i64\") type = \"i32\";\n            setValue(ret + i, curr, type);\n            if (previousType !== type) {\n                typeSize = Runtime.getNativeTypeSize(type);\n                previousType = type\n            }\n            i += typeSize\n        }\n        return ret\n    }\n\n    function getMemory(size) {\n        if (!staticSealed) return Runtime.staticAlloc(size);\n        if (!runtimeInitialized) return Runtime.dynamicAlloc(size);\n        return _malloc(size)\n    }\n\n    function Pointer_stringify(ptr, length) {\n        if (length === 0 || !ptr) return \"\";\n        var hasUtf = 0;\n        var t;\n        var i = 0;\n        while (1) {\n            t = HEAPU8[ptr + i >> 0];\n            hasUtf |= t;\n            if (t == 0 && !length) break;\n            i++;\n            if (length && i == length) break\n        }\n        if (!length) length = i;\n        var ret = \"\";\n        if (hasUtf < 128) {\n            var MAX_CHUNK = 1024;\n            var curr;\n            while (length > 0) {\n                curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));\n                ret = ret ? ret + curr : curr;\n                ptr += MAX_CHUNK;\n                length -= MAX_CHUNK\n            }\n            return ret\n        }\n        return Module[\"UTF8ToString\"](ptr)\n    }\n\n    function AsciiToString(ptr) {\n        var str = \"\";\n        while (1) {\n            var ch = HEAP8[ptr++ >> 0];\n            if (!ch) return str;\n            str += String.fromCharCode(ch)\n        }\n    }\n\n    function stringToAscii(str, outPtr) {\n        return writeAsciiToMemory(str, outPtr, false)\n    }\n    var UTF8Decoder = typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf8\") : undefined;\n\n    function UTF8ArrayToString(u8Array, idx) {\n        var endPtr = idx;\n        while (u8Array[endPtr]) ++endPtr;\n        if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {\n            return UTF8Decoder.decode(u8Array.subarray(idx, endPtr))\n        } else {\n            var u0, u1, u2, u3, u4, u5;\n            var str = \"\";\n            while (1) {\n                u0 = u8Array[idx++];\n                if (!u0) return str;\n                if (!(u0 & 128)) {\n                    str += String.fromCharCode(u0);\n                    continue\n                }\n                u1 = u8Array[idx++] & 63;\n                if ((u0 & 224) == 192) {\n                    str += String.fromCharCode((u0 & 31) << 6 | u1);\n                    continue\n                }\n                u2 = u8Array[idx++] & 63;\n                if ((u0 & 240) == 224) {\n                    u0 = (u0 & 15) << 12 | u1 << 6 | u2\n                } else {\n                    u3 = u8Array[idx++] & 63;\n                    if ((u0 & 248) == 240) {\n                        u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u3\n                    } else {\n                        u4 = u8Array[idx++] & 63;\n                        if ((u0 & 252) == 248) {\n                            u0 = (u0 & 3) << 24 | u1 << 18 | u2 << 12 | u3 << 6 | u4\n                        } else {\n                            u5 = u8Array[idx++] & 63;\n                            u0 = (u0 & 1) << 30 | u1 << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5\n                        }\n                    }\n                }\n                if (u0 < 65536) {\n                    str += String.fromCharCode(u0)\n                } else {\n                    var ch = u0 - 65536;\n                    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023)\n                }\n            }\n        }\n    }\n\n    function UTF8ToString(ptr) {\n        return UTF8ArrayToString(HEAPU8, ptr)\n    }\n\n    function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {\n        if (!(maxBytesToWrite > 0)) return 0;\n        var startIdx = outIdx;\n        var endIdx = outIdx + maxBytesToWrite - 1;\n        for (var i = 0; i < str.length; ++i) {\n            var u = str.charCodeAt(i);\n            if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;\n            if (u <= 127) {\n                if (outIdx >= endIdx) break;\n                outU8Array[outIdx++] = u\n            } else if (u <= 2047) {\n                if (outIdx + 1 >= endIdx) break;\n                outU8Array[outIdx++] = 192 | u >> 6;\n                outU8Array[outIdx++] = 128 | u & 63\n            } else if (u <= 65535) {\n                if (outIdx + 2 >= endIdx) break;\n                outU8Array[outIdx++] = 224 | u >> 12;\n                outU8Array[outIdx++] = 128 | u >> 6 & 63;\n                outU8Array[outIdx++] = 128 | u & 63\n            } else if (u <= 2097151) {\n                if (outIdx + 3 >= endIdx) break;\n                outU8Array[outIdx++] = 240 | u >> 18;\n                outU8Array[outIdx++] = 128 | u >> 12 & 63;\n                outU8Array[outIdx++] = 128 | u >> 6 & 63;\n                outU8Array[outIdx++] = 128 | u & 63\n            } else if (u <= 67108863) {\n                if (outIdx + 4 >= endIdx) break;\n                outU8Array[outIdx++] = 248 | u >> 24;\n                outU8Array[outIdx++] = 128 | u >> 18 & 63;\n                outU8Array[outIdx++] = 128 | u >> 12 & 63;\n                outU8Array[outIdx++] = 128 | u >> 6 & 63;\n                outU8Array[outIdx++] = 128 | u & 63\n            } else {\n                if (outIdx + 5 >= endIdx) break;\n                outU8Array[outIdx++] = 252 | u >> 30;\n                outU8Array[outIdx++] = 128 | u >> 24 & 63;\n                outU8Array[outIdx++] = 128 | u >> 18 & 63;\n                outU8Array[outIdx++] = 128 | u >> 12 & 63;\n                outU8Array[outIdx++] = 128 | u >> 6 & 63;\n                outU8Array[outIdx++] = 128 | u & 63\n            }\n        }\n        outU8Array[outIdx] = 0;\n        return outIdx - startIdx\n    }\n\n    function stringToUTF8(str, outPtr, maxBytesToWrite) {\n        return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite)\n    }\n\n    function lengthBytesUTF8(str) {\n        var len = 0;\n        for (var i = 0; i < str.length; ++i) {\n            var u = str.charCodeAt(i);\n            if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;\n            if (u <= 127) {\n                ++len\n            } else if (u <= 2047) {\n                len += 2\n            } else if (u <= 65535) {\n                len += 3\n            } else if (u <= 2097151) {\n                len += 4\n            } else if (u <= 67108863) {\n                len += 5\n            } else {\n                len += 6\n            }\n        }\n        return len\n    }\n    var UTF16Decoder = typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf-16le\") : undefined;\n\n    function UTF16ToString(ptr) {\n        var endPtr = ptr;\n        var idx = endPtr >> 1;\n        while (HEAP16[idx]) ++idx;\n        endPtr = idx << 1;\n        if (endPtr - ptr > 32 && UTF16Decoder) {\n            return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr))\n        } else {\n            var i = 0;\n            var str = \"\";\n            while (1) {\n                var codeUnit = HEAP16[ptr + i * 2 >> 1];\n                if (codeUnit == 0) return str;\n                ++i;\n                str += String.fromCharCode(codeUnit)\n            }\n        }\n    }\n\n    function stringToUTF16(str, outPtr, maxBytesToWrite) {\n        if (maxBytesToWrite === undefined) {\n            maxBytesToWrite = 2147483647\n        }\n        if (maxBytesToWrite < 2) return 0;\n        maxBytesToWrite -= 2;\n        var startPtr = outPtr;\n        var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;\n        for (var i = 0; i < numCharsToWrite; ++i) {\n            var codeUnit = str.charCodeAt(i);\n            HEAP16[outPtr >> 1] = codeUnit;\n            outPtr += 2\n        }\n        HEAP16[outPtr >> 1] = 0;\n        return outPtr - startPtr\n    }\n\n    function lengthBytesUTF16(str) {\n        return str.length * 2\n    }\n\n    function UTF32ToString(ptr) {\n        var i = 0;\n        var str = \"\";\n        while (1) {\n            var utf32 = HEAP32[ptr + i * 4 >> 2];\n            if (utf32 == 0) return str;\n            ++i;\n            if (utf32 >= 65536) {\n                var ch = utf32 - 65536;\n                str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023)\n            } else {\n                str += String.fromCharCode(utf32)\n            }\n        }\n    }\n\n    function stringToUTF32(str, outPtr, maxBytesToWrite) {\n        if (maxBytesToWrite === undefined) {\n            maxBytesToWrite = 2147483647\n        }\n        if (maxBytesToWrite < 4) return 0;\n        var startPtr = outPtr;\n        var endPtr = startPtr + maxBytesToWrite - 4;\n        for (var i = 0; i < str.length; ++i) {\n            var codeUnit = str.charCodeAt(i);\n            if (codeUnit >= 55296 && codeUnit <= 57343) {\n                var trailSurrogate = str.charCodeAt(++i);\n                codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023\n            }\n            HEAP32[outPtr >> 2] = codeUnit;\n            outPtr += 4;\n            if (outPtr + 4 > endPtr) break\n        }\n        HEAP32[outPtr >> 2] = 0;\n        return outPtr - startPtr\n    }\n\n    function lengthBytesUTF32(str) {\n        var len = 0;\n        for (var i = 0; i < str.length; ++i) {\n            var codeUnit = str.charCodeAt(i);\n            if (codeUnit >= 55296 && codeUnit <= 57343) ++i;\n            len += 4\n        }\n        return len\n    }\n\n    function demangle(func) {\n        var __cxa_demangle_func = Module[\"___cxa_demangle\"] || Module[\"__cxa_demangle\"];\n        if (__cxa_demangle_func) {\n            try {\n                var s = func.substr(1);\n                var len = lengthBytesUTF8(s) + 1;\n                var buf = _malloc(len);\n                stringToUTF8(s, buf, len);\n                var status = _malloc(4);\n                var ret = __cxa_demangle_func(buf, 0, 0, status);\n                if (getValue(status, \"i32\") === 0 && ret) {\n                    return Pointer_stringify(ret)\n                }\n            } catch (e) {} finally {\n                if (buf) _free(buf);\n                if (status) _free(status);\n                if (ret) _free(ret)\n            }\n            return func\n        }\n        Runtime.warnOnce(\"warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling\");\n        return func\n    }\n\n    function demangleAll(text) {\n        var regex = /__Z[\\w\\d_]+/g;\n        return text.replace(regex, function(x) {\n            var y = demangle(x);\n            return x === y ? x : x + \" [\" + y + \"]\"\n        })\n    }\n\n    function jsStackTrace() {\n        var err = new Error;\n        if (!err.stack) {\n            try {\n                throw new Error(0)\n            } catch (e) {\n                err = e\n            }\n            if (!err.stack) {\n                return \"(no stack trace available)\"\n            }\n        }\n        return err.stack.toString()\n    }\n\n    function stackTrace() {\n        var js = jsStackTrace();\n        if (Module[\"extraStackTrace\"]) js += \"\\n\" + Module[\"extraStackTrace\"]();\n        return demangleAll(js)\n    }\n    var PAGE_SIZE = 16384;\n    var WASM_PAGE_SIZE = 65536;\n    var ASMJS_PAGE_SIZE = 16777216;\n    var MIN_TOTAL_MEMORY = 16777216;\n\n    function alignUp(x, multiple) {\n        if (x % multiple > 0) {\n            x += multiple - x % multiple\n        }\n        return x\n    }\n    var HEAP;\n    var buffer;\n    var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;\n\n    function updateGlobalBuffer(buf) {\n        Module[\"buffer\"] = buffer = buf\n    }\n\n    function updateGlobalBufferViews() {\n        Module[\"HEAP8\"] = HEAP8 = new Int8Array(buffer);\n        Module[\"HEAP16\"] = HEAP16 = new Int16Array(buffer);\n        Module[\"HEAP32\"] = HEAP32 = new Int32Array(buffer);\n        Module[\"HEAPU8\"] = HEAPU8 = new Uint8Array(buffer);\n        Module[\"HEAPU16\"] = HEAPU16 = new Uint16Array(buffer);\n        Module[\"HEAPU32\"] = HEAPU32 = new Uint32Array(buffer);\n        Module[\"HEAPF32\"] = HEAPF32 = new Float32Array(buffer);\n        Module[\"HEAPF64\"] = HEAPF64 = new Float64Array(buffer)\n    }\n    var STATIC_BASE, STATICTOP, staticSealed;\n    var STACK_BASE, STACKTOP, STACK_MAX;\n    var DYNAMIC_BASE, DYNAMICTOP_PTR;\n    STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;\n    staticSealed = false;\n\n    function abortOnCannotGrowMemory() {\n        abort(\"Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value \" + TOTAL_MEMORY + \", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 \")\n    }\n\n    function enlargeMemory() {\n        abortOnCannotGrowMemory()\n    }\n    var TOTAL_STACK = Module[\"TOTAL_STACK\"] || 5242880;\n    var TOTAL_MEMORY = Module[\"TOTAL_MEMORY\"] || 16777216;\n    if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr(\"TOTAL_MEMORY should be larger than TOTAL_STACK, was \" + TOTAL_MEMORY + \"! (TOTAL_STACK=\" + TOTAL_STACK + \")\");\n    if (Module[\"buffer\"]) {\n        buffer = Module[\"buffer\"]\n    } else {\n        if (typeof WebAssembly === \"object\" && typeof WebAssembly.Memory === \"function\") {\n            Module[\"wasmMemory\"] = new WebAssembly.Memory({\n                initial: TOTAL_MEMORY / WASM_PAGE_SIZE,\n                maximum: TOTAL_MEMORY / WASM_PAGE_SIZE\n            });\n            buffer = Module[\"wasmMemory\"].buffer\n        } else {\n            buffer = new ArrayBuffer(TOTAL_MEMORY)\n        }\n    }\n    updateGlobalBufferViews();\n\n    function getTotalMemory() {\n        return TOTAL_MEMORY\n    }\n    HEAP32[0] = 1668509029;\n    HEAP16[1] = 25459;\n    if (HEAPU8[2] !== 115 || HEAPU8[3] !== 99) throw \"Runtime error: expected the system to be little-endian!\";\n    Module[\"HEAP\"] = HEAP;\n    Module[\"buffer\"] = buffer;\n    Module[\"HEAP8\"] = HEAP8;\n    Module[\"HEAP16\"] = HEAP16;\n    Module[\"HEAP32\"] = HEAP32;\n    Module[\"HEAPU8\"] = HEAPU8;\n    Module[\"HEAPU16\"] = HEAPU16;\n    Module[\"HEAPU32\"] = HEAPU32;\n    Module[\"HEAPF32\"] = HEAPF32;\n    Module[\"HEAPF64\"] = HEAPF64;\n\n    function callRuntimeCallbacks(callbacks) {\n        while (callbacks.length > 0) {\n            var callback = callbacks.shift();\n            if (typeof callback == \"function\") {\n                callback();\n                continue\n            }\n            var func = callback.func;\n            if (typeof func === \"number\") {\n                if (callback.arg === undefined) {\n                    Module[\"dynCall_v\"](func)\n                } else {\n                    Module[\"dynCall_vi\"](func, callback.arg)\n                }\n            } else {\n                func(callback.arg === undefined ? null : callback.arg)\n            }\n        }\n    }\n    var __ATPRERUN__ = [];\n    var __ATINIT__ = [];\n    var __ATMAIN__ = [];\n    var __ATEXIT__ = [];\n    var __ATPOSTRUN__ = [];\n    var runtimeInitialized = false;\n    var runtimeExited = false;\n\n    function preRun() {\n        if (Module[\"preRun\"]) {\n            if (typeof Module[\"preRun\"] == \"function\") Module[\"preRun\"] = [Module[\"preRun\"]];\n            while (Module[\"preRun\"].length) {\n                addOnPreRun(Module[\"preRun\"].shift())\n            }\n        }\n        callRuntimeCallbacks(__ATPRERUN__)\n    }\n\n    function ensureInitRuntime() {\n        if (runtimeInitialized) return;\n        runtimeInitialized = true;\n        callRuntimeCallbacks(__ATINIT__)\n    }\n\n    function preMain() {\n        callRuntimeCallbacks(__ATMAIN__)\n    }\n\n    function exitRuntime() {\n        callRuntimeCallbacks(__ATEXIT__);\n        runtimeExited = true\n    }\n\n    function postRun() {\n        if (Module[\"postRun\"]) {\n            if (typeof Module[\"postRun\"] == \"function\") Module[\"postRun\"] = [Module[\"postRun\"]];\n            while (Module[\"postRun\"].length) {\n                addOnPostRun(Module[\"postRun\"].shift())\n            }\n        }\n        callRuntimeCallbacks(__ATPOSTRUN__)\n    }\n\n    function addOnPreRun(cb) {\n        __ATPRERUN__.unshift(cb)\n    }\n\n    function addOnInit(cb) {\n        __ATINIT__.unshift(cb)\n    }\n\n    function addOnPreMain(cb) {\n        __ATMAIN__.unshift(cb)\n    }\n\n    function addOnExit(cb) {\n        __ATEXIT__.unshift(cb)\n    }\n\n    function addOnPostRun(cb) {\n        __ATPOSTRUN__.unshift(cb)\n    }\n\n    function intArrayFromString(stringy, dontAddNull, length) {\n        var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;\n        var u8array = new Array(len);\n        var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);\n        if (dontAddNull) u8array.length = numBytesWritten;\n        return u8array\n    }\n\n    function intArrayToString(array) {\n        var ret = [];\n        for (var i = 0; i < array.length; i++) {\n            var chr = array[i];\n            if (chr > 255) {\n                chr &= 255\n            }\n            ret.push(String.fromCharCode(chr))\n        }\n        return ret.join(\"\")\n    }\n\n    function writeStringToMemory(string, buffer, dontAddNull) {\n        Runtime.warnOnce(\"writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!\");\n        var lastChar, end;\n        if (dontAddNull) {\n            end = buffer + lengthBytesUTF8(string);\n            lastChar = HEAP8[end]\n        }\n        stringToUTF8(string, buffer, Infinity);\n        if (dontAddNull) HEAP8[end] = lastChar\n    }\n\n    function writeArrayToMemory(array, buffer) {\n        HEAP8.set(array, buffer)\n    }\n\n    function writeAsciiToMemory(str, buffer, dontAddNull) {\n        for (var i = 0; i < str.length; ++i) {\n            HEAP8[buffer++ >> 0] = str.charCodeAt(i)\n        }\n        if (!dontAddNull) HEAP8[buffer >> 0] = 0\n    }\n\n    function unSign(value, bits, ignore) {\n        if (value >= 0) {\n            return value\n        }\n        return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value\n    }\n\n    function reSign(value, bits, ignore) {\n        if (value <= 0) {\n            return value\n        }\n        var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1);\n        if (value >= half && (bits <= 32 || value > half)) {\n            value = -2 * half + value\n        }\n        return value\n    }\n    if (!Math[\"imul\"] || Math[\"imul\"](4294967295, 5) !== -5) Math[\"imul\"] = function imul(a, b) {\n        var ah = a >>> 16;\n        var al = a & 65535;\n        var bh = b >>> 16;\n        var bl = b & 65535;\n        return al * bl + (ah * bl + al * bh << 16) | 0\n    };\n    Math.imul = Math[\"imul\"];\n    if (!Math[\"fround\"]) {\n        var froundBuffer = new Float32Array(1);\n        Math[\"fround\"] = function(x) {\n            froundBuffer[0] = x;\n            return froundBuffer[0]\n        }\n    }\n    Math.fround = Math[\"fround\"];\n    if (!Math[\"clz32\"]) Math[\"clz32\"] = function(x) {\n        x = x >>> 0;\n        for (var i = 0; i < 32; i++) {\n            if (x & 1 << 31 - i) return i\n        }\n        return 32\n    };\n    Math.clz32 = Math[\"clz32\"];\n    if (!Math[\"trunc\"]) Math[\"trunc\"] = function(x) {\n        return x < 0 ? Math.ceil(x) : Math.floor(x)\n    };\n    Math.trunc = Math[\"trunc\"];\n    var Math_abs = Math.abs;\n    var Math_cos = Math.cos;\n    var Math_sin = Math.sin;\n    var Math_tan = Math.tan;\n    var Math_acos = Math.acos;\n    var Math_asin = Math.asin;\n    var Math_atan = Math.atan;\n    var Math_atan2 = Math.atan2;\n    var Math_exp = Math.exp;\n    var Math_log = Math.log;\n    var Math_sqrt = Math.sqrt;\n    var Math_ceil = Math.ceil;\n    var Math_floor = Math.floor;\n    var Math_pow = Math.pow;\n    var Math_imul = Math.imul;\n    var Math_fround = Math.fround;\n    var Math_round = Math.round;\n    var Math_min = Math.min;\n    var Math_clz32 = Math.clz32;\n    var Math_trunc = Math.trunc;\n    var runDependencies = 0;\n    var runDependencyWatcher = null;\n    var dependenciesFulfilled = null;\n\n    function getUniqueRunDependency(id) {\n        return id\n    }\n\n    function addRunDependency(id) {\n        runDependencies++;\n        if (Module[\"monitorRunDependencies\"]) {\n            Module[\"monitorRunDependencies\"](runDependencies)\n        }\n    }\n\n    function removeRunDependency(id) {\n        runDependencies--;\n        if (Module[\"monitorRunDependencies\"]) {\n            Module[\"monitorRunDependencies\"](runDependencies)\n        }\n        if (runDependencies == 0) {\n            if (runDependencyWatcher !== null) {\n                clearInterval(runDependencyWatcher);\n                runDependencyWatcher = null\n            }\n            if (dependenciesFulfilled) {\n                var callback = dependenciesFulfilled;\n                dependenciesFulfilled = null;\n                callback()\n            }\n        }\n    }\n    Module[\"preloadedImages\"] = {};\n    Module[\"preloadedAudios\"] = {};\n    var memoryInitializer = null;\n\n    function integrateWasmJS(Module) {\n        var method = Module[\"wasmJSMethod\"] || \"native-wasm\";\n        Module[\"wasmJSMethod\"] = method;\n        var wasmTextFile = Module[\"wasmTextFile\"] || \"worker-wasm.wast\";\n        var wasmBinaryFile = Module[\"wasmBinaryFile\"] || \"worker-wasm.wasm\";\n        var asmjsCodeFile = Module[\"asmjsCodeFile\"] || \"worker-wasm.temp.asm.js\";\n        var wasmPageSize = 64 * 1024;\n        var asm2wasmImports = {\n            \"f64-rem\": function(x, y) {\n                return x % y\n            },\n            \"f64-to-int\": function(x) {\n                return x | 0\n            },\n            \"i32s-div\": function(x, y) {\n                return (x | 0) / (y | 0) | 0\n            },\n            \"i32u-div\": function(x, y) {\n                return (x >>> 0) / (y >>> 0) >>> 0\n            },\n            \"i32s-rem\": function(x, y) {\n                return (x | 0) % (y | 0) | 0\n            },\n            \"i32u-rem\": function(x, y) {\n                return (x >>> 0) % (y >>> 0) >>> 0\n            },\n            debugger: function() {\n                debugger\n            }\n        };\n        var info = {\n            global: null,\n            env: null,\n            asm2wasm: asm2wasmImports,\n            parent: Module\n        };\n        var exports = null;\n\n        function lookupImport(mod, base) {\n            var lookup = info;\n            if (mod.indexOf(\".\") < 0) {\n                lookup = (lookup || {})[mod]\n            } else {\n                var parts = mod.split(\".\");\n                lookup = (lookup || {})[parts[0]];\n                lookup = (lookup || {})[parts[1]]\n            }\n            if (base) {\n                lookup = (lookup || {})[base]\n            }\n            if (lookup === undefined) {\n                abort(\"bad lookupImport to (\" + mod + \").\" + base)\n            }\n            return lookup\n        }\n\n        function mergeMemory(newBuffer) {\n            var oldBuffer = Module[\"buffer\"];\n            if (newBuffer.byteLength < oldBuffer.byteLength) {\n                Module[\"printErr\"](\"the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here\")\n            }\n            var oldView = new Int8Array(oldBuffer);\n            var newView = new Int8Array(newBuffer);\n            if (!memoryInitializer) {\n                oldView.set(newView.subarray(Module[\"STATIC_BASE\"], Module[\"STATIC_BASE\"] + Module[\"STATIC_BUMP\"]), Module[\"STATIC_BASE\"])\n            }\n            newView.set(oldView);\n            updateGlobalBuffer(newBuffer);\n            updateGlobalBufferViews()\n        }\n        var WasmTypes = {\n            none: 0,\n            i32: 1,\n            i64: 2,\n            f32: 3,\n            f64: 4\n        };\n\n        function fixImports(imports) {\n            if (!0) return imports;\n            var ret = {};\n            for (var i in imports) {\n                var fixed = i;\n                if (fixed[0] == \"_\") fixed = fixed.substr(1);\n                ret[fixed] = imports[i]\n            }\n            return ret\n        }\n\n        function getBinaryModule() {\n            if (Module[\"wasmModule\"]) {\n                return Module[\"wasmModule\"]\n            }\n            var binary;\n            if (Module[\"wasmBinary\"]) {\n                binary = Module[\"wasmBinary\"];\n                binary = new Uint8Array(binary)\n            } else if (Module[\"readBinary\"]) {\n                binary = Module[\"readBinary\"](wasmBinaryFile)\n            } else {\n                throw \"on the web, we need the wasm binary to be preloaded and set on Module['wasmBinary']. emcc.py will do that for you when generating HTML (but not JS)\"\n            }\n            return WebAssembly.compile(binary)\n        }\n\n        function getBinaryModulePromise() {\n            if (!Module[\"wasmModule\"] && !Module[\"wasmBinary\"] && typeof fetch === \"function\") {\n                return fetch(wasmBinaryFile).then(function(response) {\n                    return response.arrayBuffer().then(function(buf) {\n                        return WebAssembly.compile(buf)\n                    })\n                })\n            }\n            return new Promise(function(resolve, reject) {\n                resolve(getBinaryModule())\n            })\n        }\n\n        function doJustAsm(global, env, providedBuffer) {\n            if (typeof Module[\"asm\"] !== \"function\" || Module[\"asm\"] === methodHandler) {\n                if (!Module[\"asmPreload\"]) {\n                    eval(Module[\"read\"](asmjsCodeFile))\n                } else {\n                    Module[\"asm\"] = Module[\"asmPreload\"]\n                }\n            }\n            if (typeof Module[\"asm\"] !== \"function\") {\n                Module[\"printErr\"](\"asm evalling did not set the module properly\");\n                return false\n            }\n            return Module[\"asm\"](global, env, providedBuffer)\n        }\n\n        function doNativeWasm(global, env, providedBuffer) {\n            if (typeof WebAssembly !== \"object\") {\n                Module[\"printErr\"](\"no native wasm support detected\");\n                return false\n            }\n            if (!(Module[\"wasmMemory\"] instanceof WebAssembly.Memory)) {\n                Module[\"printErr\"](\"no native wasm Memory in use\");\n                return false\n            }\n            env[\"memory\"] = Module[\"wasmMemory\"];\n            info[\"global\"] = {\n                NaN: NaN,\n                Infinity: Infinity\n            };\n            info[\"global.Math\"] = global.Math;\n            info[\"env\"] = env;\n\n            function receiveInstance(instance) {\n                exports = instance.exports;\n                if (exports.memory) mergeMemory(exports.memory);\n                Module[\"asm\"] = exports;\n                Module[\"usingWasm\"] = true;\n                removeRunDependency(\"wasm-instantiate\")\n            }\n            addRunDependency(\"wasm-instantiate\");\n            if (Module[\"instantiateWasm\"]) {\n                try {\n                    return Module[\"instantiateWasm\"](info, receiveInstance)\n                } catch (e) {\n                    Module[\"printErr\"](\"Module.instantiateWasm callback failed with error: \" + e);\n                    return false\n                }\n            }\n            Module[\"printErr\"](\"asynchronously preparing wasm\");\n            getBinaryModulePromise().then(function(mod) {\n                return WebAssembly.instantiate(mod, info)\n            }).then(function(instance) {\n                receiveInstance(instance)\n            }).catch(function(reason) {\n                Module[\"printErr\"](\"failed to asynchronously prepare wasm: \" + reason);\n                Module[\"quit\"](1, reason)\n            });\n            return {}\n        }\n\n        function doWasmPolyfill(global, env, providedBuffer, method) {\n            if (typeof WasmJS !== \"function\") {\n                Module[\"printErr\"](\"WasmJS not detected - polyfill not bundled?\");\n                return false\n            }\n            var wasmJS = WasmJS({});\n            wasmJS[\"outside\"] = Module;\n            wasmJS[\"info\"] = info;\n            wasmJS[\"lookupImport\"] = lookupImport;\n            assert(providedBuffer === Module[\"buffer\"]);\n            info.global = global;\n            info.env = env;\n            assert(providedBuffer === Module[\"buffer\"]);\n            env[\"memory\"] = providedBuffer;\n            assert(env[\"memory\"] instanceof ArrayBuffer);\n            wasmJS[\"providedTotalMemory\"] = Module[\"buffer\"].byteLength;\n            var code;\n            if (method === \"interpret-binary\") {\n                code = getBinary()\n            } else {\n                code = Module[\"read\"](method == \"interpret-asm2wasm\" ? asmjsCodeFile : wasmTextFile)\n            }\n            var temp;\n            if (method == \"interpret-asm2wasm\") {\n                temp = wasmJS[\"_malloc\"](code.length + 1);\n                wasmJS[\"writeAsciiToMemory\"](code, temp);\n                wasmJS[\"_load_asm2wasm\"](temp)\n            } else if (method === \"interpret-s-expr\") {\n                temp = wasmJS[\"_malloc\"](code.length + 1);\n                wasmJS[\"writeAsciiToMemory\"](code, temp);\n                wasmJS[\"_load_s_expr2wasm\"](temp)\n            } else if (method === \"interpret-binary\") {\n                temp = wasmJS[\"_malloc\"](code.length);\n                wasmJS[\"HEAPU8\"].set(code, temp);\n                wasmJS[\"_load_binary2wasm\"](temp, code.length)\n            } else {\n                throw \"what? \" + method\n            }\n            wasmJS[\"_free\"](temp);\n            wasmJS[\"_instantiate\"](temp);\n            if (Module[\"newBuffer\"]) {\n                mergeMemory(Module[\"newBuffer\"]);\n                Module[\"newBuffer\"] = null\n            }\n            exports = wasmJS[\"asmExports\"];\n            return exports\n        }\n        Module[\"asmPreload\"] = Module[\"asm\"];\n        Module[\"reallocBuffer\"] = function(size) {\n            var PAGE_MULTIPLE = Module[\"usingWasm\"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE;\n            size = alignUp(size, PAGE_MULTIPLE);\n            var old = Module[\"buffer\"];\n            var oldSize = old.byteLength;\n            if (Module[\"usingWasm\"]) {\n                try {\n                    var result = Module[\"wasmMemory\"].grow((size - oldSize) / wasmPageSize);\n                    if (result !== (-1 | 0)) {\n                        return Module[\"buffer\"] = Module[\"wasmMemory\"].buffer\n                    } else {\n                        return null\n                    }\n                } catch (e) {\n                    return null\n                }\n            } else {\n                exports[\"__growWasmMemory\"]((size - oldSize) / wasmPageSize);\n                return Module[\"buffer\"] !== old ? Module[\"buffer\"] : null\n            }\n        };\n        Module[\"asm\"] = function(global, env, providedBuffer) {\n            global = fixImports(global);\n            env = fixImports(env);\n            if (!env[\"table\"]) {\n                var TABLE_SIZE = Module[\"wasmTableSize\"];\n                if (TABLE_SIZE === undefined) TABLE_SIZE = 1024;\n                var MAX_TABLE_SIZE = Module[\"wasmMaxTableSize\"];\n                if (typeof WebAssembly === \"object\" && typeof WebAssembly.Table === \"function\") {\n                    if (MAX_TABLE_SIZE !== undefined) {\n                        env[\"table\"] = new WebAssembly.Table({\n                            initial: TABLE_SIZE,\n                            maximum: MAX_TABLE_SIZE,\n                            element: \"anyfunc\"\n                        })\n                    } else {\n                        env[\"table\"] = new WebAssembly.Table({\n                            initial: TABLE_SIZE,\n                            element: \"anyfunc\"\n                        })\n                    }\n                } else {\n                    env[\"table\"] = new Array(TABLE_SIZE)\n                }\n                Module[\"wasmTable\"] = env[\"table\"]\n            }\n            if (!env[\"memoryBase\"]) {\n                env[\"memoryBase\"] = Module[\"STATIC_BASE\"]\n            }\n            if (!env[\"tableBase\"]) {\n                env[\"tableBase\"] = 0\n            }\n            var exports;\n            var methods = method.split(\",\");\n            for (var i = 0; i < methods.length; i++) {\n                var curr = methods[i];\n                Module[\"printErr\"](\"trying binaryen method: \" + curr);\n                if (curr === \"native-wasm\") {\n                    if (exports = doNativeWasm(global, env, providedBuffer)) break\n                } else if (curr === \"asmjs\") {\n                    if (exports = doJustAsm(global, env, providedBuffer)) break\n                } else if (curr === \"interpret-asm2wasm\" || curr === \"interpret-s-expr\" || curr === \"interpret-binary\") {\n                    if (exports = doWasmPolyfill(global, env, providedBuffer, curr)) break\n                } else {\n                    throw \"bad method: \" + curr\n                }\n            }\n            if (!exports) throw \"no binaryen method succeeded. consider enabling more options, like interpreting, if you want that: https://github.com/kripken/emscripten/wiki/WebAssembly#binaryen-methods\";\n            Module[\"printErr\"](\"binaryen method succeeded.\");\n            return exports\n        };\n        var methodHandler = Module[\"asm\"]\n    }\n    integrateWasmJS(Module);\n    var ASM_CONSTS = [];\n    STATIC_BASE = 1024;\n    STATICTOP = STATIC_BASE + 42112;\n    __ATINIT__.push();\n    memoryInitializer = Module[\"wasmJSMethod\"].indexOf(\"asmjs\") >= 0 || Module[\"wasmJSMethod\"].indexOf(\"interpret-asm2wasm\") >= 0 ? \"worker-wasm.js.mem\" : null;\n    var STATIC_BUMP = 42112;\n    Module[\"STATIC_BASE\"] = STATIC_BASE;\n    Module[\"STATIC_BUMP\"] = STATIC_BUMP;\n    var tempDoublePtr = STATICTOP;\n    STATICTOP += 16;\n\n    function copyTempFloat(ptr) {\n        HEAP8[tempDoublePtr] = HEAP8[ptr];\n        HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];\n        HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];\n        HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3]\n    }\n\n    function copyTempDouble(ptr) {\n        HEAP8[tempDoublePtr] = HEAP8[ptr];\n        HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];\n        HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];\n        HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];\n        HEAP8[tempDoublePtr + 4] = HEAP8[ptr + 4];\n        HEAP8[tempDoublePtr + 5] = HEAP8[ptr + 5];\n        HEAP8[tempDoublePtr + 6] = HEAP8[ptr + 6];\n        HEAP8[tempDoublePtr + 7] = HEAP8[ptr + 7]\n    }\n\n    function ___setErrNo(value) {\n        if (Module[\"___errno_location\"]) HEAP32[Module[\"___errno_location\"]() >> 2] = value;\n        return value\n    }\n    Module[\"_sbrk\"] = _sbrk;\n\n    function _abort() {\n        Module[\"abort\"]()\n    }\n    Module[\"_llvm_bswap_i32\"] = _llvm_bswap_i32;\n    Module[\"_llvm_bswap_i16\"] = _llvm_bswap_i16;\n\n    function _emscripten_memcpy_big(dest, src, num) {\n        HEAPU8.set(HEAPU8.subarray(src, src + num), dest);\n        return dest\n    }\n    Module[\"_memcpy\"] = _memcpy;\n    DYNAMICTOP_PTR = allocate(1, \"i32\", ALLOC_STATIC);\n    STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);\n    STACK_MAX = STACK_BASE + TOTAL_STACK;\n    DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);\n    HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;\n    staticSealed = true;\n    Module[\"wasmTableSize\"] = 6;\n    Module[\"wasmMaxTableSize\"] = 6;\n\n    function invoke_iiii(index, a1, a2, a3) {\n        try {\n            return Module[\"dynCall_iiii\"](index, a1, a2, a3)\n        } catch (e) {\n            if (typeof e !== \"number\" && e !== \"longjmp\") throw e;\n            Module[\"setThrew\"](1, 0)\n        }\n    }\n\n    function invoke_vii(index, a1, a2) {\n        try {\n            Module[\"dynCall_vii\"](index, a1, a2)\n        } catch (e) {\n            if (typeof e !== \"number\" && e !== \"longjmp\") throw e;\n            Module[\"setThrew\"](1, 0)\n        }\n    }\n\n    function invoke_iii(index, a1, a2) {\n        try {\n            return Module[\"dynCall_iii\"](index, a1, a2)\n        } catch (e) {\n            if (typeof e !== \"number\" && e !== \"longjmp\") throw e;\n            Module[\"setThrew\"](1, 0)\n        }\n    }\n    Module.asmGlobalArg = {\n        Math: Math,\n        Int8Array: Int8Array,\n        Int16Array: Int16Array,\n        Int32Array: Int32Array,\n        Uint8Array: Uint8Array,\n        Uint16Array: Uint16Array,\n        Uint32Array: Uint32Array,\n        Float32Array: Float32Array,\n        Float64Array: Float64Array,\n        NaN: NaN,\n        Infinity: Infinity\n    };\n    Module.asmLibraryArg = {\n        abort: abort,\n        assert: assert,\n        enlargeMemory: enlargeMemory,\n        getTotalMemory: getTotalMemory,\n        abortOnCannotGrowMemory: abortOnCannotGrowMemory,\n        invoke_iiii: invoke_iiii,\n        invoke_vii: invoke_vii,\n        invoke_iii: invoke_iii,\n        _abort: _abort,\n        _emscripten_memcpy_big: _emscripten_memcpy_big,\n        ___setErrNo: ___setErrNo,\n        DYNAMICTOP_PTR: DYNAMICTOP_PTR,\n        tempDoublePtr: tempDoublePtr,\n        ABORT: ABORT,\n        STACKTOP: STACKTOP,\n        STACK_MAX: STACK_MAX\n    };\n    var asm = Module[\"asm\"](Module.asmGlobalArg, Module.asmLibraryArg, buffer);\n    Module[\"asm\"] = asm;\n    var _nimiq_argon2_verify = Module[\"_nimiq_argon2_verify\"] = function() {\n        return Module[\"asm\"][\"_nimiq_argon2_verify\"].apply(null, arguments)\n    };\n    var stackSave = Module[\"stackSave\"] = function() {\n        return Module[\"asm\"][\"stackSave\"].apply(null, arguments)\n    };\n    var getTempRet0 = Module[\"getTempRet0\"] = function() {\n        return Module[\"asm\"][\"getTempRet0\"].apply(null, arguments)\n    };\n    var _nimiq_kdf_legacy = Module[\"_nimiq_kdf_legacy\"] = function() {\n        return Module[\"asm\"][\"_nimiq_kdf_legacy\"].apply(null, arguments)\n    };\n    var _ed25519_sign = Module[\"_ed25519_sign\"] = function() {\n        return Module[\"asm\"][\"_ed25519_sign\"].apply(null, arguments)\n    };\n    var _nimiq_blake2 = Module[\"_nimiq_blake2\"] = function() {\n        return Module[\"asm\"][\"_nimiq_blake2\"].apply(null, arguments)\n    };\n    var _nimiq_argon2_no_wipe = Module[\"_nimiq_argon2_no_wipe\"] = function() {\n        return Module[\"asm\"][\"_nimiq_argon2_no_wipe\"].apply(null, arguments)\n    };\n    var _ed25519_delinearized_partial_sign = Module[\"_ed25519_delinearized_partial_sign\"] = function() {\n        return Module[\"asm\"][\"_ed25519_delinearized_partial_sign\"].apply(null, arguments)\n    };\n    var _nimiq_sha512 = Module[\"_nimiq_sha512\"] = function() {\n        return Module[\"asm\"][\"_nimiq_sha512\"].apply(null, arguments)\n    };\n    var _sbrk = Module[\"_sbrk\"] = function() {\n        return Module[\"asm\"][\"_sbrk\"].apply(null, arguments)\n    };\n    var _ed25519_derive_delinearized_private_key = Module[\"_ed25519_derive_delinearized_private_key\"] = function() {\n        return Module[\"asm\"][\"_ed25519_derive_delinearized_private_key\"].apply(null, arguments)\n    };\n    var stackAlloc = Module[\"stackAlloc\"] = function() {\n        return Module[\"asm\"][\"stackAlloc\"].apply(null, arguments)\n    };\n    var _ed25519_create_commitment = Module[\"_ed25519_create_commitment\"] = function() {\n        return Module[\"asm\"][\"_ed25519_create_commitment\"].apply(null, arguments)\n    };\n    var _nimiq_argon2_target = Module[\"_nimiq_argon2_target\"] = function() {\n        return Module[\"asm\"][\"_nimiq_argon2_target\"].apply(null, arguments)\n    };\n    var _nimiq_argon2 = Module[\"_nimiq_argon2\"] = function() {\n        return Module[\"asm\"][\"_nimiq_argon2\"].apply(null, arguments)\n    };\n    var _ed25519_delinearize_public_key = Module[\"_ed25519_delinearize_public_key\"] = function() {\n        return Module[\"asm\"][\"_ed25519_delinearize_public_key\"].apply(null, arguments)\n    };\n    var _ed25519_add_scalars = Module[\"_ed25519_add_scalars\"] = function() {\n        return Module[\"asm\"][\"_ed25519_add_scalars\"].apply(null, arguments)\n    };\n    var _ed25519_public_key_derive = Module[\"_ed25519_public_key_derive\"] = function() {\n        return Module[\"asm\"][\"_ed25519_public_key_derive\"].apply(null, arguments)\n    };\n    var setTempRet0 = Module[\"setTempRet0\"] = function() {\n        return Module[\"asm\"][\"setTempRet0\"].apply(null, arguments)\n    };\n    var _nimiq_kdf = Module[\"_nimiq_kdf\"] = function() {\n        return Module[\"asm\"][\"_nimiq_kdf\"].apply(null, arguments)\n    };\n    var _llvm_bswap_i16 = Module[\"_llvm_bswap_i16\"] = function() {\n        return Module[\"asm\"][\"_llvm_bswap_i16\"].apply(null, arguments)\n    };\n    var _emscripten_get_global_libc = Module[\"_emscripten_get_global_libc\"] = function() {\n        return Module[\"asm\"][\"_emscripten_get_global_libc\"].apply(null, arguments)\n    };\n    var _ed25519_verify = Module[\"_ed25519_verify\"] = function() {\n        return Module[\"asm\"][\"_ed25519_verify\"].apply(null, arguments)\n    };\n    var _get_static_memory_size = Module[\"_get_static_memory_size\"] = function() {\n        return Module[\"asm\"][\"_get_static_memory_size\"].apply(null, arguments)\n    };\n    var _llvm_bswap_i32 = Module[\"_llvm_bswap_i32\"] = function() {\n        return Module[\"asm\"][\"_llvm_bswap_i32\"].apply(null, arguments)\n    };\n    var _free = Module[\"_free\"] = function() {\n        return Module[\"asm\"][\"_free\"].apply(null, arguments)\n    };\n    var runPostSets = Module[\"runPostSets\"] = function() {\n        return Module[\"asm\"][\"runPostSets\"].apply(null, arguments)\n    };\n    var setThrew = Module[\"setThrew\"] = function() {\n        return Module[\"asm\"][\"setThrew\"].apply(null, arguments)\n    };\n    var establishStackSpace = Module[\"establishStackSpace\"] = function() {\n        return Module[\"asm\"][\"establishStackSpace\"].apply(null, arguments)\n    };\n    var _get_static_memory_start = Module[\"_get_static_memory_start\"] = function() {\n        return Module[\"asm\"][\"_get_static_memory_start\"].apply(null, arguments)\n    };\n    var _nimiq_sha256 = Module[\"_nimiq_sha256\"] = function() {\n        return Module[\"asm\"][\"_nimiq_sha256\"].apply(null, arguments)\n    };\n    var stackRestore = Module[\"stackRestore\"] = function() {\n        return Module[\"asm\"][\"stackRestore\"].apply(null, arguments)\n    };\n    var _ed25519_hash_public_keys = Module[\"_ed25519_hash_public_keys\"] = function() {\n        return Module[\"asm\"][\"_ed25519_hash_public_keys\"].apply(null, arguments)\n    };\n    var _malloc = Module[\"_malloc\"] = function() {\n        return Module[\"asm\"][\"_malloc\"].apply(null, arguments)\n    };\n    var _memcpy = Module[\"_memcpy\"] = function() {\n        return Module[\"asm\"][\"_memcpy\"].apply(null, arguments)\n    };\n    var _ed25519_aggregate_commitments = Module[\"_ed25519_aggregate_commitments\"] = function() {\n        return Module[\"asm\"][\"_ed25519_aggregate_commitments\"].apply(null, arguments)\n    };\n    var _ed25519_aggregate_delinearized_public_keys = Module[\"_ed25519_aggregate_delinearized_public_keys\"] = function() {\n        return Module[\"asm\"][\"_ed25519_aggregate_delinearized_public_keys\"].apply(null, arguments)\n    };\n    var dynCall_iiii = Module[\"dynCall_iiii\"] = function() {\n        return Module[\"asm\"][\"dynCall_iiii\"].apply(null, arguments)\n    };\n    var dynCall_vii = Module[\"dynCall_vii\"] = function() {\n        return Module[\"asm\"][\"dynCall_vii\"].apply(null, arguments)\n    };\n    var dynCall_iii = Module[\"dynCall_iii\"] = function() {\n        return Module[\"asm\"][\"dynCall_iii\"].apply(null, arguments)\n    };\n    Runtime.stackAlloc = Module[\"stackAlloc\"];\n    Runtime.stackSave = Module[\"stackSave\"];\n    Runtime.stackRestore = Module[\"stackRestore\"];\n    Runtime.establishStackSpace = Module[\"establishStackSpace\"];\n    Runtime.setTempRet0 = Module[\"setTempRet0\"];\n    Runtime.getTempRet0 = Module[\"getTempRet0\"];\n    Module[\"asm\"] = asm;\n    if (memoryInitializer) {\n        if (typeof Module[\"locateFile\"] === \"function\") {\n            memoryInitializer = Module[\"locateFile\"](memoryInitializer)\n        } else if (Module[\"memoryInitializerPrefixURL\"]) {\n            memoryInitializer = Module[\"memoryInitializerPrefixURL\"] + memoryInitializer\n        }\n        if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {\n            var data = Module[\"readBinary\"](memoryInitializer);\n            HEAPU8.set(data, Runtime.GLOBAL_BASE)\n        } else {\n            addRunDependency(\"memory initializer\");\n            var applyMemoryInitializer = function(data) {\n                if (data.byteLength) data = new Uint8Array(data);\n                HEAPU8.set(data, Runtime.GLOBAL_BASE);\n                if (Module[\"memoryInitializerRequest\"]) delete Module[\"memoryInitializerRequest\"].response;\n                removeRunDependency(\"memory initializer\")\n            };\n\n            function doBrowserLoad() {\n                Module[\"readAsync\"](memoryInitializer, applyMemoryInitializer, function() {\n                    throw \"could not load memory initializer \" + memoryInitializer\n                })\n            }\n            if (Module[\"memoryInitializerRequest\"]) {\n                function useRequest() {\n                    var request = Module[\"memoryInitializerRequest\"];\n                    if (request.status !== 200 && request.status !== 0) {\n                        console.warn(\"a problem seems to have happened with Module.memoryInitializerRequest, status: \" + request.status + \", retrying \" + memoryInitializer);\n                        doBrowserLoad();\n                        return\n                    }\n                    applyMemoryInitializer(request.response)\n                }\n                if (Module[\"memoryInitializerRequest\"].response) {\n                    setTimeout(useRequest, 0)\n                } else {\n                    Module[\"memoryInitializerRequest\"].addEventListener(\"load\", useRequest)\n                }\n            } else {\n                doBrowserLoad()\n            }\n        }\n    }\n\n    function ExitStatus(status) {\n        this.name = \"ExitStatus\";\n        this.message = \"Program terminated with exit(\" + status + \")\";\n        this.status = status\n    }\n    ExitStatus.prototype = new Error;\n    ExitStatus.prototype.constructor = ExitStatus;\n    var initialStackTop;\n    var preloadStartTime = null;\n    var calledMain = false;\n    dependenciesFulfilled = function runCaller() {\n        if (!Module[\"calledRun\"]) run();\n        if (!Module[\"calledRun\"]) dependenciesFulfilled = runCaller\n    };\n    Module[\"callMain\"] = Module.callMain = function callMain(args) {\n        args = args || [];\n        ensureInitRuntime();\n        var argc = args.length + 1;\n\n        function pad() {\n            for (var i = 0; i < 4 - 1; i++) {\n                argv.push(0)\n            }\n        }\n        var argv = [allocate(intArrayFromString(Module[\"thisProgram\"]), \"i8\", ALLOC_NORMAL)];\n        pad();\n        for (var i = 0; i < argc - 1; i = i + 1) {\n            argv.push(allocate(intArrayFromString(args[i]), \"i8\", ALLOC_NORMAL));\n            pad()\n        }\n        argv.push(0);\n        argv = allocate(argv, \"i32\", ALLOC_NORMAL);\n        try {\n            var ret = Module[\"_main\"](argc, argv, 0);\n            exit(ret, true)\n        } catch (e) {\n            if (e instanceof ExitStatus) {\n                return\n            } else if (e == \"SimulateInfiniteLoop\") {\n                Module[\"noExitRuntime\"] = true;\n                return\n            } else {\n                var toLog = e;\n                if (e && typeof e === \"object\" && e.stack) {\n                    toLog = [e, e.stack]\n                }\n                Module.printErr(\"exception thrown: \" + toLog);\n                Module[\"quit\"](1, e)\n            }\n        } finally {\n            calledMain = true\n        }\n    };\n\n    function run(args) {\n        args = args || Module[\"arguments\"];\n        if (preloadStartTime === null) preloadStartTime = Date.now();\n        if (runDependencies > 0) {\n            return\n        }\n        preRun();\n        if (runDependencies > 0) return;\n        if (Module[\"calledRun\"]) return;\n\n        function doRun() {\n            if (Module[\"calledRun\"]) return;\n            Module[\"calledRun\"] = true;\n            if (ABORT) return;\n            ensureInitRuntime();\n            preMain();\n            if (Module[\"onRuntimeInitialized\"]) Module[\"onRuntimeInitialized\"]();\n            if (Module[\"_main\"] && shouldRunNow) Module[\"callMain\"](args);\n            postRun()\n        }\n        if (Module[\"setStatus\"]) {\n            Module[\"setStatus\"](\"Running...\");\n            setTimeout(function() {\n                setTimeout(function() {\n                    Module[\"setStatus\"](\"\")\n                }, 1);\n                doRun()\n            }, 1)\n        } else {\n            doRun()\n        }\n    }\n    Module[\"run\"] = Module.run = run;\n\n    function exit(status, implicit) {\n        if (implicit && Module[\"noExitRuntime\"]) {\n            return\n        }\n        if (Module[\"noExitRuntime\"]) {} else {\n            ABORT = true;\n            EXITSTATUS = status;\n            STACKTOP = initialStackTop;\n            exitRuntime();\n            if (Module[\"onExit\"]) Module[\"onExit\"](status)\n        }\n        if (ENVIRONMENT_IS_NODE) {\n            process[\"exit\"](status)\n        }\n        Module[\"quit\"](status, new ExitStatus(status))\n    }\n    Module[\"exit\"] = Module.exit = exit;\n    var abortDecorators = [];\n\n    function abort(what) {\n        if (what !== undefined) {\n            Module.print(what);\n            Module.printErr(what);\n            what = JSON.stringify(what)\n        } else {\n            what = \"\"\n        }\n        ABORT = true;\n        EXITSTATUS = 1;\n        var extra = \"\\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.\";\n        var output = \"abort(\" + what + \") at \" + stackTrace() + extra;\n        if (abortDecorators) {\n            abortDecorators.forEach(function(decorator) {\n                output = decorator(output, what)\n            })\n        }\n        throw output\n    }\n    Module[\"abort\"] = Module.abort = abort;\n    if (Module[\"preInit\"]) {\n        if (typeof Module[\"preInit\"] == \"function\") Module[\"preInit\"] = [Module[\"preInit\"]];\n        while (Module[\"preInit\"].length > 0) {\n            Module[\"preInit\"].pop()()\n        }\n    }\n    var shouldRunNow = true;\n    if (Module[\"noInitialRun\"]) {\n        shouldRunNow = false\n    }\n    Module[\"noExitRuntime\"] = true;\n    run();\n    return Module\n};\n// if (typeof module !== \"undefined\") module.exports = Module;\n// if (typeof WasmHelper !== \"undefined\") WasmHelper.fireModuleLoaded();\n// else if (typeof Nimiq !== \"undefined\" && Nimiq.WasmHelper) Nimiq.WasmHelper.fireModuleLoaded();\n"],"names":["k","i","Hash","Algorithm","Secret","Type","MnemonicUtils","MnemonicType","Account","publicKey","Transaction","Format","Flag","HashedTimeLockedContract","ProofType","read","data","print","printErr","type","func","arg","global","env","providedBuffer","method","exports"],"mappings":"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"}